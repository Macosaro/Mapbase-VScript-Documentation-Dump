7.1
=====================================
Enum:        Hitgroup
Elements:    9
Description: Hit groups from traces
=====================================

=====================================
Enum:        IN
Elements:    26
Description: Button mask bindings
=====================================

=====================================
Enum:        MapLoad
Elements:    4
Description: Map load enum for GetLoadType()
=====================================

=====================================
Enum:        RenderMode
Elements:    11
Description: Render modes used by Get/SetRenderMode
=====================================

=====================================
Enum:        WeaponSound
Elements:    17
Description: Weapon sounds.
=====================================

Constant:    ACT_180_LEFT
Value:       128 (int)

Constant:    ACT_180_RIGHT
Value:       129 (int)

Constant:    ACT_90_LEFT
Value:       130 (int)

Constant:    ACT_90_RIGHT
Value:       131 (int)

Constant:    ACT_ARM
Value:       69 (int)

Constant:    ACT_ARM_MELEE
Value:       1857 (int)

Constant:    ACT_ARM_RIFLE
Value:       1854 (int)

Constant:    ACT_ARM_RPG
Value:       1856 (int)

Constant:    ACT_ARM_SHOTGUN
Value:       1855 (int)

Constant:    ACT_ARREST_FLOOR
Value:       1986 (int)

Constant:    ACT_ARREST_FLOOR_CURIOUS
Value:       1987 (int)

Constant:    ACT_ARREST_FLOOR_ENTER
Value:       1989 (int)

Constant:    ACT_ARREST_FLOOR_ENTER_PANICKED
Value:       1990 (int)

Constant:    ACT_ARREST_FLOOR_EXIT
Value:       1991 (int)

Constant:    ACT_ARREST_STANDING_GESTURE
Value:       1988 (int)

Constant:    ACT_BACKSTAB_VM_DOWN
Value:       1648 (int)

Constant:    ACT_BACKSTAB_VM_IDLE
Value:       1649 (int)

Constant:    ACT_BACKSTAB_VM_UP
Value:       1647 (int)

Constant:    ACT_BARNACLE_CHEW
Value:       169 (int)

Constant:    ACT_BARNACLE_CHOMP
Value:       168 (int)

Constant:    ACT_BARNACLE_HIT
Value:       166 (int)

Constant:    ACT_BARNACLE_PULL
Value:       167 (int)

Constant:    ACT_BIG_FLINCH
Value:       62 (int)

Constant:    ACT_BUSY_LEAN_BACK
Value:       388 (int)

Constant:    ACT_BUSY_LEAN_BACK_ENTRY
Value:       389 (int)

Constant:    ACT_BUSY_LEAN_BACK_EXIT
Value:       390 (int)

Constant:    ACT_BUSY_LEAN_LEFT
Value:       385 (int)

Constant:    ACT_BUSY_LEAN_LEFT_ENTRY
Value:       386 (int)

Constant:    ACT_BUSY_LEAN_LEFT_EXIT
Value:       387 (int)

Constant:    ACT_BUSY_QUEUE
Value:       398 (int)

Constant:    ACT_BUSY_SIT_CHAIR
Value:       394 (int)

Constant:    ACT_BUSY_SIT_CHAIR_ENTRY
Value:       395 (int)

Constant:    ACT_BUSY_SIT_CHAIR_EXIT
Value:       396 (int)

Constant:    ACT_BUSY_SIT_GROUND
Value:       391 (int)

Constant:    ACT_BUSY_SIT_GROUND_ENTRY
Value:       392 (int)

Constant:    ACT_BUSY_SIT_GROUND_EXIT
Value:       393 (int)

Constant:    ACT_BUSY_STAND
Value:       397 (int)

Constant:    ACT_CIT_BLINDED
Value:       1942 (int)

Constant:    ACT_CIT_HANDSUP
Value:       1941 (int)

Constant:    ACT_CIT_HEAL
Value:       1944 (int)

Constant:    ACT_CIT_SHOWARMBAND
Value:       1943 (int)

Constant:    ACT_CIT_STARTLED
Value:       1945 (int)

Constant:    ACT_CLIMB_ALL
Value:       1862 (int)

Constant:    ACT_CLIMB_DISMOUNT
Value:       35 (int)

Constant:    ACT_CLIMB_DISMOUNT_BOTTOM
Value:       1866 (int)

Constant:    ACT_CLIMB_DOWN
Value:       34 (int)

Constant:    ACT_CLIMB_IDLE
Value:       1863 (int)

Constant:    ACT_CLIMB_MOUNT_BOTTOM
Value:       1865 (int)

Constant:    ACT_CLIMB_MOUNT_TOP
Value:       1864 (int)

Constant:    ACT_CLIMB_UP
Value:       33 (int)

Constant:    ACT_COMBAT_IDLE
Value:       108 (int)

Constant:    ACT_COMBINE_AR2_ALTFIRE
Value:       1767 (int)

Constant:    ACT_COMBINE_THROW_GRENADE
Value:       1766 (int)

Constant:    ACT_COVER
Value:       3 (int)

Constant:    ACT_COVER_AR2_LOW
Value:       1765 (int)

Constant:    ACT_COVER_CROSSBOW_LOW
Value:       1803 (int)

Constant:    ACT_COVER_LOW
Value:       5 (int)

Constant:    ACT_COVER_LOW_RPG
Value:       350 (int)

Constant:    ACT_COVER_MED
Value:       4 (int)

Constant:    ACT_COVER_PISTOL_LOW
Value:       300 (int)

Constant:    ACT_COVER_REVOLVER_LOW
Value:       1789 (int)

Constant:    ACT_COVER_SHOTGUN_LOW
Value:       1832 (int)

Constant:    ACT_COVER_SMG1_LOW
Value:       301 (int)

Constant:    ACT_COVER_WALL_L
Value:       1885 (int)

Constant:    ACT_COVER_WALL_LOW_L
Value:       1887 (int)

Constant:    ACT_COVER_WALL_LOW_L_PISTOL
Value:       1895 (int)

Constant:    ACT_COVER_WALL_LOW_L_RIFLE
Value:       1891 (int)

Constant:    ACT_COVER_WALL_LOW_R
Value:       1886 (int)

Constant:    ACT_COVER_WALL_LOW_R_PISTOL
Value:       1894 (int)

Constant:    ACT_COVER_WALL_LOW_R_RIFLE
Value:       1890 (int)

Constant:    ACT_COVER_WALL_L_PISTOL
Value:       1893 (int)

Constant:    ACT_COVER_WALL_L_RIFLE
Value:       1889 (int)

Constant:    ACT_COVER_WALL_R
Value:       1884 (int)

Constant:    ACT_COVER_WALL_R_PISTOL
Value:       1892 (int)

Constant:    ACT_COVER_WALL_R_RIFLE
Value:       1888 (int)

Constant:    ACT_COWER
Value:       60 (int)

Constant:    ACT_CROSSBOW_DRAW_UNLOADED
Value:       485 (int)

Constant:    ACT_CROSSBOW_FIDGET_UNLOADED
Value:       487 (int)

Constant:    ACT_CROSSBOW_IDLE_UNLOADED
Value:       486 (int)

Constant:    ACT_CROUCH
Value:       44 (int)

Constant:    ACT_CROUCHIDLE
Value:       45 (int)

Constant:    ACT_CROUCHIDLE_AGITATED
Value:       103 (int)

Constant:    ACT_CROUCHIDLE_AIM_STIMULATED
Value:       102 (int)

Constant:    ACT_CROUCHIDLE_STIMULATED
Value:       101 (int)

Constant:    ACT_CROUCHING_GRENADEIDLE
Value:       437 (int)

Constant:    ACT_CROUCHING_GRENADEREADY
Value:       438 (int)

Constant:    ACT_CROUCHING_PRIMARYATTACK
Value:       439 (int)

Constant:    ACT_CROUCHING_SHIELD_ATTACK
Value:       456 (int)

Constant:    ACT_CROUCHING_SHIELD_DOWN
Value:       454 (int)

Constant:    ACT_CROUCHING_SHIELD_KNOCKBACK
Value:       457 (int)

Constant:    ACT_CROUCHING_SHIELD_UP
Value:       453 (int)

Constant:    ACT_CROUCHING_SHIELD_UP_IDLE
Value:       455 (int)

Constant:    ACT_CROUCH_PANICKED
Value:       1952 (int)

Constant:    ACT_DEEPIDLE1
Value:       513 (int)

Constant:    ACT_DEEPIDLE2
Value:       514 (int)

Constant:    ACT_DEEPIDLE3
Value:       515 (int)

Constant:    ACT_DEEPIDLE4
Value:       516 (int)

Constant:    ACT_DEPLOY
Value:       469 (int)

Constant:    ACT_DEPLOY_IDLE
Value:       470 (int)

Constant:    ACT_DIEBACKWARD
Value:       21 (int)

Constant:    ACT_DIEFORWARD
Value:       22 (int)

Constant:    ACT_DIERAGDOLL
Value:       24 (int)

Constant:    ACT_DIESIMPLE
Value:       20 (int)

Constant:    ACT_DIEVIOLENT
Value:       23 (int)

Constant:    ACT_DIE_BACKSHOT
Value:       115 (int)

Constant:    ACT_DIE_BACKSIDE
Value:       408 (int)

Constant:    ACT_DIE_BARNACLE_SWALLOW
Value:       400 (int)

Constant:    ACT_DIE_CHESTSHOT
Value:       113 (int)

Constant:    ACT_DIE_FRONTSIDE
Value:       406 (int)

Constant:    ACT_DIE_GUTSHOT
Value:       114 (int)

Constant:    ACT_DIE_HEADSHOT
Value:       112 (int)

Constant:    ACT_DIE_LEFTSIDE
Value:       409 (int)

Constant:    ACT_DIE_RIGHTSIDE
Value:       407 (int)

Constant:    ACT_DISARM
Value:       70 (int)

Constant:    ACT_DISARM_MELEE
Value:       1861 (int)

Constant:    ACT_DISARM_RIFLE
Value:       1858 (int)

Constant:    ACT_DISARM_RPG
Value:       1860 (int)

Constant:    ACT_DISARM_SHOTGUN
Value:       1859 (int)

Constant:    ACT_DI_ALYX_ANTLION
Value:       414 (int)

Constant:    ACT_DI_ALYX_HEADCRAB_MELEE
Value:       413 (int)

Constant:    ACT_DI_ALYX_ZOMBIE_MELEE
Value:       411 (int)

Constant:    ACT_DI_ALYX_ZOMBIE_SHOTGUN26
Value:       416 (int)

Constant:    ACT_DI_ALYX_ZOMBIE_SHOTGUN64
Value:       415 (int)

Constant:    ACT_DI_ALYX_ZOMBIE_TORSO_MELEE
Value:       412 (int)

Constant:    ACT_DI_HUNTER_MELEE
Value:       1953 (int)

Constant:    ACT_DI_HUNTER_TACKLE
Value:       1954 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM
Value:       601 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_30CAL
Value:       725 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_BAR
Value:       796 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_BAZOOKA
Value:       770 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_BOLT
Value:       647 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_C96
Value:       621 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_GREASE
Value:       699 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_GREN_FRAG
Value:       738 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_GREN_STICK
Value:       746 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_KNIFE
Value:       754 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_MG
Value:       712 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_MP40
Value:       673 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_MP44
Value:       686 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_PISTOL
Value:       608 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_PSCHRECK
Value:       783 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_RIFLE
Value:       634 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_SPADE
Value:       762 (int)

Constant:    ACT_DOD_CROUCHWALK_AIM_TOMMY
Value:       660 (int)

Constant:    ACT_DOD_CROUCHWALK_IDLE
Value:       600 (int)

Constant:    ACT_DOD_CROUCHWALK_IDLE_30CAL
Value:       731 (int)

Constant:    ACT_DOD_CROUCHWALK_IDLE_BAR
Value:       802 (int)

Constant:    ACT_DOD_CROUCHWALK_IDLE_BAZOOKA
Value:       776 (int)

Constant:    ACT_DOD_CROUCHWALK_IDLE_BOLT
Value:       653 (int)

Constant:    ACT_DOD_CROUCHWALK_IDLE_C96
Value:       627 (int)

Constant:    ACT_DOD_CROUCHWALK_IDLE_GREASE
Value:       705 (int)

Constant:    ACT_DOD_CROUCHWALK_IDLE_MG
Value:       718 (int)

Constant:    ACT_DOD_CROUCHWALK_IDLE_MP40
Value:       679 (int)

Constant:    ACT_DOD_CROUCHWALK_IDLE_MP44
Value:       692 (int)

Constant:    ACT_DOD_CROUCHWALK_IDLE_PISTOL
Value:       614 (int)

Constant:    ACT_DOD_CROUCHWALK_IDLE_PSCHRECK
Value:       789 (int)

Constant:    ACT_DOD_CROUCHWALK_IDLE_RIFLE
Value:       640 (int)

Constant:    ACT_DOD_CROUCHWALK_IDLE_TNT
Value:       981 (int)

Constant:    ACT_DOD_CROUCHWALK_IDLE_TOMMY
Value:       666 (int)

Constant:    ACT_DOD_CROUCHWALK_ZOOMED
Value:       585 (int)

Constant:    ACT_DOD_CROUCHWALK_ZOOM_BAZOOKA
Value:       821 (int)

Constant:    ACT_DOD_CROUCHWALK_ZOOM_BOLT
Value:       815 (int)

Constant:    ACT_DOD_CROUCHWALK_ZOOM_PSCHRECK
Value:       827 (int)

Constant:    ACT_DOD_CROUCHWALK_ZOOM_RIFLE
Value:       809 (int)

Constant:    ACT_DOD_CROUCH_AIM
Value:       599 (int)

Constant:    ACT_DOD_CROUCH_AIM_30CAL
Value:       724 (int)

Constant:    ACT_DOD_CROUCH_AIM_BAR
Value:       795 (int)

Constant:    ACT_DOD_CROUCH_AIM_BAZOOKA
Value:       769 (int)

Constant:    ACT_DOD_CROUCH_AIM_BOLT
Value:       646 (int)

Constant:    ACT_DOD_CROUCH_AIM_C96
Value:       620 (int)

Constant:    ACT_DOD_CROUCH_AIM_GREASE
Value:       698 (int)

Constant:    ACT_DOD_CROUCH_AIM_GREN_FRAG
Value:       737 (int)

Constant:    ACT_DOD_CROUCH_AIM_GREN_STICK
Value:       745 (int)

Constant:    ACT_DOD_CROUCH_AIM_KNIFE
Value:       753 (int)

Constant:    ACT_DOD_CROUCH_AIM_MG
Value:       711 (int)

Constant:    ACT_DOD_CROUCH_AIM_MP40
Value:       672 (int)

Constant:    ACT_DOD_CROUCH_AIM_MP44
Value:       685 (int)

Constant:    ACT_DOD_CROUCH_AIM_PISTOL
Value:       607 (int)

Constant:    ACT_DOD_CROUCH_AIM_PSCHRECK
Value:       782 (int)

Constant:    ACT_DOD_CROUCH_AIM_RIFLE
Value:       633 (int)

Constant:    ACT_DOD_CROUCH_AIM_SPADE
Value:       761 (int)

Constant:    ACT_DOD_CROUCH_AIM_TOMMY
Value:       659 (int)

Constant:    ACT_DOD_CROUCH_IDLE
Value:       598 (int)

Constant:    ACT_DOD_CROUCH_IDLE_30CAL
Value:       730 (int)

Constant:    ACT_DOD_CROUCH_IDLE_BAR
Value:       801 (int)

Constant:    ACT_DOD_CROUCH_IDLE_BAZOOKA
Value:       775 (int)

Constant:    ACT_DOD_CROUCH_IDLE_BOLT
Value:       652 (int)

Constant:    ACT_DOD_CROUCH_IDLE_C96
Value:       626 (int)

Constant:    ACT_DOD_CROUCH_IDLE_GREASE
Value:       704 (int)

Constant:    ACT_DOD_CROUCH_IDLE_MG
Value:       717 (int)

Constant:    ACT_DOD_CROUCH_IDLE_MP40
Value:       678 (int)

Constant:    ACT_DOD_CROUCH_IDLE_MP44
Value:       691 (int)

Constant:    ACT_DOD_CROUCH_IDLE_PISTOL
Value:       613 (int)

Constant:    ACT_DOD_CROUCH_IDLE_PSCHRECK
Value:       788 (int)

Constant:    ACT_DOD_CROUCH_IDLE_RIFLE
Value:       639 (int)

Constant:    ACT_DOD_CROUCH_IDLE_TNT
Value:       980 (int)

Constant:    ACT_DOD_CROUCH_IDLE_TOMMY
Value:       665 (int)

Constant:    ACT_DOD_CROUCH_ZOOMED
Value:       584 (int)

Constant:    ACT_DOD_CROUCH_ZOOM_BAZOOKA
Value:       820 (int)

Constant:    ACT_DOD_CROUCH_ZOOM_BOLT
Value:       814 (int)

Constant:    ACT_DOD_CROUCH_ZOOM_PSCHRECK
Value:       826 (int)

Constant:    ACT_DOD_CROUCH_ZOOM_RIFLE
Value:       808 (int)

Constant:    ACT_DOD_DEFUSE_TNT
Value:       987 (int)

Constant:    ACT_DOD_DEPLOYED
Value:       580 (int)

Constant:    ACT_DOD_DEPLOY_30CAL
Value:       834 (int)

Constant:    ACT_DOD_DEPLOY_MG
Value:       833 (int)

Constant:    ACT_DOD_DEPLOY_RIFLE
Value:       831 (int)

Constant:    ACT_DOD_DEPLOY_TOMMY
Value:       832 (int)

Constant:    ACT_DOD_HS_CROUCH
Value:       958 (int)

Constant:    ACT_DOD_HS_CROUCH_30CAL
Value:       969 (int)

Constant:    ACT_DOD_HS_CROUCH_BAZOOKA
Value:       970 (int)

Constant:    ACT_DOD_HS_CROUCH_K98
Value:       978 (int)

Constant:    ACT_DOD_HS_CROUCH_KNIFE
Value:       972 (int)

Constant:    ACT_DOD_HS_CROUCH_MG42
Value:       973 (int)

Constant:    ACT_DOD_HS_CROUCH_MP44
Value:       977 (int)

Constant:    ACT_DOD_HS_CROUCH_PISTOL
Value:       974 (int)

Constant:    ACT_DOD_HS_CROUCH_PSCHRECK
Value:       971 (int)

Constant:    ACT_DOD_HS_CROUCH_STICKGRENADE
Value:       975 (int)

Constant:    ACT_DOD_HS_CROUCH_TOMMY
Value:       976 (int)

Constant:    ACT_DOD_HS_IDLE
Value:       957 (int)

Constant:    ACT_DOD_HS_IDLE_30CAL
Value:       959 (int)

Constant:    ACT_DOD_HS_IDLE_BAZOOKA
Value:       960 (int)

Constant:    ACT_DOD_HS_IDLE_K98
Value:       968 (int)

Constant:    ACT_DOD_HS_IDLE_KNIFE
Value:       962 (int)

Constant:    ACT_DOD_HS_IDLE_MG42
Value:       963 (int)

Constant:    ACT_DOD_HS_IDLE_MP44
Value:       967 (int)

Constant:    ACT_DOD_HS_IDLE_PISTOL
Value:       964 (int)

Constant:    ACT_DOD_HS_IDLE_PSCHRECK
Value:       961 (int)

Constant:    ACT_DOD_HS_IDLE_STICKGRENADE
Value:       965 (int)

Constant:    ACT_DOD_HS_IDLE_TOMMY
Value:       966 (int)

Constant:    ACT_DOD_IDLE_ZOOMED
Value:       582 (int)

Constant:    ACT_DOD_PLANT_TNT
Value:       986 (int)

Constant:    ACT_DOD_PRIMARYATTACK_30CAL
Value:       869 (int)

Constant:    ACT_DOD_PRIMARYATTACK_BAR
Value:       885 (int)

Constant:    ACT_DOD_PRIMARYATTACK_BAZOOKA
Value:       881 (int)

Constant:    ACT_DOD_PRIMARYATTACK_BOLT
Value:       845 (int)

Constant:    ACT_DOD_PRIMARYATTACK_C96
Value:       863 (int)

Constant:    ACT_DOD_PRIMARYATTACK_CROUCH
Value:       949 (int)

Constant:    ACT_DOD_PRIMARYATTACK_CROUCH_GREN_FRAG
Value:       952 (int)

Constant:    ACT_DOD_PRIMARYATTACK_CROUCH_GREN_STICK
Value:       953 (int)

Constant:    ACT_DOD_PRIMARYATTACK_CROUCH_KNIFE
Value:       951 (int)

Constant:    ACT_DOD_PRIMARYATTACK_CROUCH_SPADE
Value:       950 (int)

Constant:    ACT_DOD_PRIMARYATTACK_DEPLOYED
Value:       588 (int)

Constant:    ACT_DOD_PRIMARYATTACK_DEPLOYED_30CAL
Value:       871 (int)

Constant:    ACT_DOD_PRIMARYATTACK_DEPLOYED_MG
Value:       868 (int)

Constant:    ACT_DOD_PRIMARYATTACK_DEPLOYED_RIFLE
Value:       844 (int)

Constant:    ACT_DOD_PRIMARYATTACK_GREASE
Value:       859 (int)

Constant:    ACT_DOD_PRIMARYATTACK_GREN_FRAG
Value:       873 (int)

Constant:    ACT_DOD_PRIMARYATTACK_GREN_STICK
Value:       875 (int)

Constant:    ACT_DOD_PRIMARYATTACK_KNIFE
Value:       877 (int)

Constant:    ACT_DOD_PRIMARYATTACK_MG
Value:       865 (int)

Constant:    ACT_DOD_PRIMARYATTACK_MP40
Value:       853 (int)

Constant:    ACT_DOD_PRIMARYATTACK_MP44
Value:       857 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PISTOL
Value:       861 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE
Value:       592 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_30CAL
Value:       870 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_BAR
Value:       886 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_BAZOOKA
Value:       882 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_BOLT
Value:       847 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_C96
Value:       864 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED
Value:       589 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_30CAL
Value:       872 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_MG
Value:       867 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_RIFLE
Value:       843 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_GREASE
Value:       860 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_GREN_FRAG
Value:       874 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_GREN_STICK
Value:       876 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_KNIFE
Value:       878 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_MG
Value:       866 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_MP40
Value:       854 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_MP44
Value:       858 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_PISTOL
Value:       862 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_PSCHRECK
Value:       884 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_RIFLE
Value:       841 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_SPADE
Value:       880 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PRONE_TOMMY
Value:       850 (int)

Constant:    ACT_DOD_PRIMARYATTACK_PSCHRECK
Value:       883 (int)

Constant:    ACT_DOD_PRIMARYATTACK_RIFLE
Value:       839 (int)

Constant:    ACT_DOD_PRIMARYATTACK_SPADE
Value:       879 (int)

Constant:    ACT_DOD_PRIMARYATTACK_TOMMY
Value:       849 (int)

Constant:    ACT_DOD_PRONEWALK_AIM_GREN_FRAG
Value:       743 (int)

Constant:    ACT_DOD_PRONEWALK_AIM_GREN_STICK
Value:       751 (int)

Constant:    ACT_DOD_PRONEWALK_AIM_KNIFE
Value:       759 (int)

Constant:    ACT_DOD_PRONEWALK_AIM_SPADE
Value:       767 (int)

Constant:    ACT_DOD_PRONEWALK_IDLE_30CAL
Value:       735 (int)

Constant:    ACT_DOD_PRONEWALK_IDLE_BAR
Value:       806 (int)

Constant:    ACT_DOD_PRONEWALK_IDLE_BAZOOKA
Value:       780 (int)

Constant:    ACT_DOD_PRONEWALK_IDLE_BOLT
Value:       657 (int)

Constant:    ACT_DOD_PRONEWALK_IDLE_C96
Value:       631 (int)

Constant:    ACT_DOD_PRONEWALK_IDLE_GREASE
Value:       709 (int)

Constant:    ACT_DOD_PRONEWALK_IDLE_MG
Value:       722 (int)

Constant:    ACT_DOD_PRONEWALK_IDLE_MP40
Value:       683 (int)

Constant:    ACT_DOD_PRONEWALK_IDLE_MP44
Value:       696 (int)

Constant:    ACT_DOD_PRONEWALK_IDLE_PISTOL
Value:       618 (int)

Constant:    ACT_DOD_PRONEWALK_IDLE_PSCHRECK
Value:       793 (int)

Constant:    ACT_DOD_PRONEWALK_IDLE_RIFLE
Value:       644 (int)

Constant:    ACT_DOD_PRONEWALK_IDLE_TNT
Value:       985 (int)

Constant:    ACT_DOD_PRONEWALK_IDLE_TOMMY
Value:       670 (int)

Constant:    ACT_DOD_PRONE_AIM_30CAL
Value:       728 (int)

Constant:    ACT_DOD_PRONE_AIM_BAR
Value:       799 (int)

Constant:    ACT_DOD_PRONE_AIM_BAZOOKA
Value:       773 (int)

Constant:    ACT_DOD_PRONE_AIM_BOLT
Value:       650 (int)

Constant:    ACT_DOD_PRONE_AIM_C96
Value:       624 (int)

Constant:    ACT_DOD_PRONE_AIM_GREASE
Value:       702 (int)

Constant:    ACT_DOD_PRONE_AIM_GREN_FRAG
Value:       741 (int)

Constant:    ACT_DOD_PRONE_AIM_GREN_STICK
Value:       749 (int)

Constant:    ACT_DOD_PRONE_AIM_KNIFE
Value:       757 (int)

Constant:    ACT_DOD_PRONE_AIM_MG
Value:       715 (int)

Constant:    ACT_DOD_PRONE_AIM_MP40
Value:       676 (int)

Constant:    ACT_DOD_PRONE_AIM_MP44
Value:       689 (int)

Constant:    ACT_DOD_PRONE_AIM_PISTOL
Value:       611 (int)

Constant:    ACT_DOD_PRONE_AIM_PSCHRECK
Value:       786 (int)

Constant:    ACT_DOD_PRONE_AIM_RIFLE
Value:       637 (int)

Constant:    ACT_DOD_PRONE_AIM_SPADE
Value:       765 (int)

Constant:    ACT_DOD_PRONE_AIM_TOMMY
Value:       663 (int)

Constant:    ACT_DOD_PRONE_DEPLOYED
Value:       581 (int)

Constant:    ACT_DOD_PRONE_DEPLOY_30CAL
Value:       838 (int)

Constant:    ACT_DOD_PRONE_DEPLOY_MG
Value:       837 (int)

Constant:    ACT_DOD_PRONE_DEPLOY_RIFLE
Value:       835 (int)

Constant:    ACT_DOD_PRONE_DEPLOY_TOMMY
Value:       836 (int)

Constant:    ACT_DOD_PRONE_FORWARD_ZOOMED
Value:       587 (int)

Constant:    ACT_DOD_PRONE_ZOOMED
Value:       586 (int)

Constant:    ACT_DOD_PRONE_ZOOM_BAZOOKA
Value:       824 (int)

Constant:    ACT_DOD_PRONE_ZOOM_BOLT
Value:       818 (int)

Constant:    ACT_DOD_PRONE_ZOOM_FORWARD_BAZOOKA
Value:       947 (int)

Constant:    ACT_DOD_PRONE_ZOOM_FORWARD_BOLT
Value:       946 (int)

Constant:    ACT_DOD_PRONE_ZOOM_FORWARD_PSCHRECK
Value:       948 (int)

Constant:    ACT_DOD_PRONE_ZOOM_FORWARD_RIFLE
Value:       945 (int)

Constant:    ACT_DOD_PRONE_ZOOM_PSCHRECK
Value:       830 (int)

Constant:    ACT_DOD_PRONE_ZOOM_RIFLE
Value:       812 (int)

Constant:    ACT_DOD_RELOAD_BAR
Value:       889 (int)

Constant:    ACT_DOD_RELOAD_BAZOOKA
Value:       913 (int)

Constant:    ACT_DOD_RELOAD_BOLT
Value:       892 (int)

Constant:    ACT_DOD_RELOAD_C96
Value:       900 (int)

Constant:    ACT_DOD_RELOAD_CROUCH
Value:       594 (int)

Constant:    ACT_DOD_RELOAD_CROUCH_BAR
Value:       901 (int)

Constant:    ACT_DOD_RELOAD_CROUCH_BAZOOKA
Value:       908 (int)

Constant:    ACT_DOD_RELOAD_CROUCH_BOLT
Value:       904 (int)

Constant:    ACT_DOD_RELOAD_CROUCH_C96
Value:       912 (int)

Constant:    ACT_DOD_RELOAD_CROUCH_M1CARBINE
Value:       911 (int)

Constant:    ACT_DOD_RELOAD_CROUCH_MP40
Value:       906 (int)

Constant:    ACT_DOD_RELOAD_CROUCH_MP44
Value:       905 (int)

Constant:    ACT_DOD_RELOAD_CROUCH_PISTOL
Value:       910 (int)

Constant:    ACT_DOD_RELOAD_CROUCH_PSCHRECK
Value:       909 (int)

Constant:    ACT_DOD_RELOAD_CROUCH_RIFLE
Value:       902 (int)

Constant:    ACT_DOD_RELOAD_CROUCH_RIFLEGRENADE
Value:       903 (int)

Constant:    ACT_DOD_RELOAD_CROUCH_TOMMY
Value:       907 (int)

Constant:    ACT_DOD_RELOAD_DEPLOYED
Value:       590 (int)

Constant:    ACT_DOD_RELOAD_DEPLOYED_30CAL
Value:       918 (int)

Constant:    ACT_DOD_RELOAD_DEPLOYED_BAR
Value:       921 (int)

Constant:    ACT_DOD_RELOAD_DEPLOYED_FG42
Value:       917 (int)

Constant:    ACT_DOD_RELOAD_DEPLOYED_MG
Value:       919 (int)

Constant:    ACT_DOD_RELOAD_DEPLOYED_MG34
Value:       920 (int)

Constant:    ACT_DOD_RELOAD_FG42
Value:       897 (int)

Constant:    ACT_DOD_RELOAD_GARAND
Value:       887 (int)

Constant:    ACT_DOD_RELOAD_GREASEGUN
Value:       895 (int)

Constant:    ACT_DOD_RELOAD_K43
Value:       888 (int)

Constant:    ACT_DOD_RELOAD_M1CARBINE
Value:       893 (int)

Constant:    ACT_DOD_RELOAD_MP40
Value:       890 (int)

Constant:    ACT_DOD_RELOAD_MP44
Value:       891 (int)

Constant:    ACT_DOD_RELOAD_PISTOL
Value:       896 (int)

Constant:    ACT_DOD_RELOAD_PRONE
Value:       595 (int)

Constant:    ACT_DOD_RELOAD_PRONE_BAR
Value:       929 (int)

Constant:    ACT_DOD_RELOAD_PRONE_BAZOOKA
Value:       936 (int)

Constant:    ACT_DOD_RELOAD_PRONE_BOLT
Value:       925 (int)

Constant:    ACT_DOD_RELOAD_PRONE_C96
Value:       935 (int)

Constant:    ACT_DOD_RELOAD_PRONE_DEPLOYED
Value:       591 (int)

Constant:    ACT_DOD_RELOAD_PRONE_DEPLOYED_30CAL
Value:       942 (int)

Constant:    ACT_DOD_RELOAD_PRONE_DEPLOYED_BAR
Value:       940 (int)

Constant:    ACT_DOD_RELOAD_PRONE_DEPLOYED_FG42
Value:       941 (int)

Constant:    ACT_DOD_RELOAD_PRONE_DEPLOYED_MG
Value:       943 (int)

Constant:    ACT_DOD_RELOAD_PRONE_DEPLOYED_MG34
Value:       944 (int)

Constant:    ACT_DOD_RELOAD_PRONE_FG42
Value:       932 (int)

Constant:    ACT_DOD_RELOAD_PRONE_GARAND
Value:       923 (int)

Constant:    ACT_DOD_RELOAD_PRONE_GREASEGUN
Value:       930 (int)

Constant:    ACT_DOD_RELOAD_PRONE_K43
Value:       926 (int)

Constant:    ACT_DOD_RELOAD_PRONE_M1CARBINE
Value:       924 (int)

Constant:    ACT_DOD_RELOAD_PRONE_MP40
Value:       927 (int)

Constant:    ACT_DOD_RELOAD_PRONE_MP44
Value:       928 (int)

Constant:    ACT_DOD_RELOAD_PRONE_PISTOL
Value:       922 (int)

Constant:    ACT_DOD_RELOAD_PRONE_PSCHRECK
Value:       938 (int)

Constant:    ACT_DOD_RELOAD_PRONE_RIFLE
Value:       933 (int)

Constant:    ACT_DOD_RELOAD_PRONE_RIFLEGRENADE
Value:       934 (int)

Constant:    ACT_DOD_RELOAD_PRONE_TOMMY
Value:       931 (int)

Constant:    ACT_DOD_RELOAD_PSCHRECK
Value:       915 (int)

Constant:    ACT_DOD_RELOAD_RIFLE
Value:       898 (int)

Constant:    ACT_DOD_RELOAD_RIFLEGRENADE
Value:       899 (int)

Constant:    ACT_DOD_RELOAD_TOMMY
Value:       894 (int)

Constant:    ACT_DOD_RUN_AIM
Value:       605 (int)

Constant:    ACT_DOD_RUN_AIM_30CAL
Value:       727 (int)

Constant:    ACT_DOD_RUN_AIM_BAR
Value:       798 (int)

Constant:    ACT_DOD_RUN_AIM_BAZOOKA
Value:       772 (int)

Constant:    ACT_DOD_RUN_AIM_BOLT
Value:       649 (int)

Constant:    ACT_DOD_RUN_AIM_C96
Value:       623 (int)

Constant:    ACT_DOD_RUN_AIM_GREASE
Value:       701 (int)

Constant:    ACT_DOD_RUN_AIM_GREN_FRAG
Value:       740 (int)

Constant:    ACT_DOD_RUN_AIM_GREN_STICK
Value:       748 (int)

Constant:    ACT_DOD_RUN_AIM_KNIFE
Value:       756 (int)

Constant:    ACT_DOD_RUN_AIM_MG
Value:       714 (int)

Constant:    ACT_DOD_RUN_AIM_MP40
Value:       675 (int)

Constant:    ACT_DOD_RUN_AIM_MP44
Value:       688 (int)

Constant:    ACT_DOD_RUN_AIM_PISTOL
Value:       610 (int)

Constant:    ACT_DOD_RUN_AIM_PSCHRECK
Value:       785 (int)

Constant:    ACT_DOD_RUN_AIM_RIFLE
Value:       636 (int)

Constant:    ACT_DOD_RUN_AIM_SPADE
Value:       764 (int)

Constant:    ACT_DOD_RUN_AIM_TOMMY
Value:       662 (int)

Constant:    ACT_DOD_RUN_IDLE
Value:       604 (int)

Constant:    ACT_DOD_RUN_IDLE_30CAL
Value:       733 (int)

Constant:    ACT_DOD_RUN_IDLE_BAR
Value:       804 (int)

Constant:    ACT_DOD_RUN_IDLE_BAZOOKA
Value:       778 (int)

Constant:    ACT_DOD_RUN_IDLE_BOLT
Value:       655 (int)

Constant:    ACT_DOD_RUN_IDLE_C96
Value:       629 (int)

Constant:    ACT_DOD_RUN_IDLE_GREASE
Value:       707 (int)

Constant:    ACT_DOD_RUN_IDLE_MG
Value:       720 (int)

Constant:    ACT_DOD_RUN_IDLE_MP40
Value:       681 (int)

Constant:    ACT_DOD_RUN_IDLE_MP44
Value:       694 (int)

Constant:    ACT_DOD_RUN_IDLE_PISTOL
Value:       616 (int)

Constant:    ACT_DOD_RUN_IDLE_PSCHRECK
Value:       791 (int)

Constant:    ACT_DOD_RUN_IDLE_RIFLE
Value:       642 (int)

Constant:    ACT_DOD_RUN_IDLE_TNT
Value:       983 (int)

Constant:    ACT_DOD_RUN_IDLE_TOMMY
Value:       668 (int)

Constant:    ACT_DOD_RUN_ZOOM_BAZOOKA
Value:       823 (int)

Constant:    ACT_DOD_RUN_ZOOM_BOLT
Value:       817 (int)

Constant:    ACT_DOD_RUN_ZOOM_PSCHRECK
Value:       829 (int)

Constant:    ACT_DOD_RUN_ZOOM_RIFLE
Value:       811 (int)

Constant:    ACT_DOD_SECONDARYATTACK_BOLT
Value:       846 (int)

Constant:    ACT_DOD_SECONDARYATTACK_CROUCH
Value:       954 (int)

Constant:    ACT_DOD_SECONDARYATTACK_CROUCH_MP40
Value:       956 (int)

Constant:    ACT_DOD_SECONDARYATTACK_CROUCH_TOMMY
Value:       955 (int)

Constant:    ACT_DOD_SECONDARYATTACK_MP40
Value:       855 (int)

Constant:    ACT_DOD_SECONDARYATTACK_PRONE
Value:       593 (int)

Constant:    ACT_DOD_SECONDARYATTACK_PRONE_BOLT
Value:       848 (int)

Constant:    ACT_DOD_SECONDARYATTACK_PRONE_MP40
Value:       856 (int)

Constant:    ACT_DOD_SECONDARYATTACK_PRONE_RIFLE
Value:       842 (int)

Constant:    ACT_DOD_SECONDARYATTACK_PRONE_TOMMY
Value:       852 (int)

Constant:    ACT_DOD_SECONDARYATTACK_RIFLE
Value:       840 (int)

Constant:    ACT_DOD_SECONDARYATTACK_TOMMY
Value:       851 (int)

Constant:    ACT_DOD_SPRINT_AIM_GREN_FRAG
Value:       742 (int)

Constant:    ACT_DOD_SPRINT_AIM_GREN_STICK
Value:       750 (int)

Constant:    ACT_DOD_SPRINT_AIM_KNIFE
Value:       758 (int)

Constant:    ACT_DOD_SPRINT_AIM_SPADE
Value:       766 (int)

Constant:    ACT_DOD_SPRINT_IDLE_30CAL
Value:       734 (int)

Constant:    ACT_DOD_SPRINT_IDLE_BAR
Value:       805 (int)

Constant:    ACT_DOD_SPRINT_IDLE_BAZOOKA
Value:       779 (int)

Constant:    ACT_DOD_SPRINT_IDLE_BOLT
Value:       656 (int)

Constant:    ACT_DOD_SPRINT_IDLE_C96
Value:       630 (int)

Constant:    ACT_DOD_SPRINT_IDLE_GREASE
Value:       708 (int)

Constant:    ACT_DOD_SPRINT_IDLE_MG
Value:       721 (int)

Constant:    ACT_DOD_SPRINT_IDLE_MP40
Value:       682 (int)

Constant:    ACT_DOD_SPRINT_IDLE_MP44
Value:       695 (int)

Constant:    ACT_DOD_SPRINT_IDLE_PISTOL
Value:       617 (int)

Constant:    ACT_DOD_SPRINT_IDLE_PSCHRECK
Value:       792 (int)

Constant:    ACT_DOD_SPRINT_IDLE_RIFLE
Value:       643 (int)

Constant:    ACT_DOD_SPRINT_IDLE_TNT
Value:       984 (int)

Constant:    ACT_DOD_SPRINT_IDLE_TOMMY
Value:       669 (int)

Constant:    ACT_DOD_STAND_AIM
Value:       597 (int)

Constant:    ACT_DOD_STAND_AIM_30CAL
Value:       723 (int)

Constant:    ACT_DOD_STAND_AIM_BAR
Value:       794 (int)

Constant:    ACT_DOD_STAND_AIM_BAZOOKA
Value:       768 (int)

Constant:    ACT_DOD_STAND_AIM_BOLT
Value:       645 (int)

Constant:    ACT_DOD_STAND_AIM_C96
Value:       619 (int)

Constant:    ACT_DOD_STAND_AIM_GREASE
Value:       697 (int)

Constant:    ACT_DOD_STAND_AIM_GREN_FRAG
Value:       736 (int)

Constant:    ACT_DOD_STAND_AIM_GREN_STICK
Value:       744 (int)

Constant:    ACT_DOD_STAND_AIM_KNIFE
Value:       752 (int)

Constant:    ACT_DOD_STAND_AIM_MG
Value:       710 (int)

Constant:    ACT_DOD_STAND_AIM_MP40
Value:       671 (int)

Constant:    ACT_DOD_STAND_AIM_MP44
Value:       684 (int)

Constant:    ACT_DOD_STAND_AIM_PISTOL
Value:       606 (int)

Constant:    ACT_DOD_STAND_AIM_PSCHRECK
Value:       781 (int)

Constant:    ACT_DOD_STAND_AIM_RIFLE
Value:       632 (int)

Constant:    ACT_DOD_STAND_AIM_SPADE
Value:       760 (int)

Constant:    ACT_DOD_STAND_AIM_TOMMY
Value:       658 (int)

Constant:    ACT_DOD_STAND_IDLE
Value:       596 (int)

Constant:    ACT_DOD_STAND_IDLE_30CAL
Value:       729 (int)

Constant:    ACT_DOD_STAND_IDLE_BAR
Value:       800 (int)

Constant:    ACT_DOD_STAND_IDLE_BAZOOKA
Value:       774 (int)

Constant:    ACT_DOD_STAND_IDLE_BOLT
Value:       651 (int)

Constant:    ACT_DOD_STAND_IDLE_C96
Value:       625 (int)

Constant:    ACT_DOD_STAND_IDLE_GREASE
Value:       703 (int)

Constant:    ACT_DOD_STAND_IDLE_MG
Value:       716 (int)

Constant:    ACT_DOD_STAND_IDLE_MP40
Value:       677 (int)

Constant:    ACT_DOD_STAND_IDLE_MP44
Value:       690 (int)

Constant:    ACT_DOD_STAND_IDLE_PISTOL
Value:       612 (int)

Constant:    ACT_DOD_STAND_IDLE_PSCHRECK
Value:       787 (int)

Constant:    ACT_DOD_STAND_IDLE_RIFLE
Value:       638 (int)

Constant:    ACT_DOD_STAND_IDLE_TNT
Value:       979 (int)

Constant:    ACT_DOD_STAND_IDLE_TOMMY
Value:       664 (int)

Constant:    ACT_DOD_STAND_ZOOM_BAZOOKA
Value:       819 (int)

Constant:    ACT_DOD_STAND_ZOOM_BOLT
Value:       813 (int)

Constant:    ACT_DOD_STAND_ZOOM_PSCHRECK
Value:       825 (int)

Constant:    ACT_DOD_STAND_ZOOM_RIFLE
Value:       807 (int)

Constant:    ACT_DOD_WALK_AIM
Value:       603 (int)

Constant:    ACT_DOD_WALK_AIM_30CAL
Value:       726 (int)

Constant:    ACT_DOD_WALK_AIM_BAR
Value:       797 (int)

Constant:    ACT_DOD_WALK_AIM_BAZOOKA
Value:       771 (int)

Constant:    ACT_DOD_WALK_AIM_BOLT
Value:       648 (int)

Constant:    ACT_DOD_WALK_AIM_C96
Value:       622 (int)

Constant:    ACT_DOD_WALK_AIM_GREASE
Value:       700 (int)

Constant:    ACT_DOD_WALK_AIM_GREN_FRAG
Value:       739 (int)

Constant:    ACT_DOD_WALK_AIM_GREN_STICK
Value:       747 (int)

Constant:    ACT_DOD_WALK_AIM_KNIFE
Value:       755 (int)

Constant:    ACT_DOD_WALK_AIM_MG
Value:       713 (int)

Constant:    ACT_DOD_WALK_AIM_MP40
Value:       674 (int)

Constant:    ACT_DOD_WALK_AIM_MP44
Value:       687 (int)

Constant:    ACT_DOD_WALK_AIM_PISTOL
Value:       609 (int)

Constant:    ACT_DOD_WALK_AIM_PSCHRECK
Value:       784 (int)

Constant:    ACT_DOD_WALK_AIM_RIFLE
Value:       635 (int)

Constant:    ACT_DOD_WALK_AIM_SPADE
Value:       763 (int)

Constant:    ACT_DOD_WALK_AIM_TOMMY
Value:       661 (int)

Constant:    ACT_DOD_WALK_IDLE
Value:       602 (int)

Constant:    ACT_DOD_WALK_IDLE_30CAL
Value:       732 (int)

Constant:    ACT_DOD_WALK_IDLE_BAR
Value:       803 (int)

Constant:    ACT_DOD_WALK_IDLE_BAZOOKA
Value:       777 (int)

Constant:    ACT_DOD_WALK_IDLE_BOLT
Value:       654 (int)

Constant:    ACT_DOD_WALK_IDLE_C96
Value:       628 (int)

Constant:    ACT_DOD_WALK_IDLE_GREASE
Value:       706 (int)

Constant:    ACT_DOD_WALK_IDLE_MG
Value:       719 (int)

Constant:    ACT_DOD_WALK_IDLE_MP40
Value:       680 (int)

Constant:    ACT_DOD_WALK_IDLE_MP44
Value:       693 (int)

Constant:    ACT_DOD_WALK_IDLE_PISTOL
Value:       615 (int)

Constant:    ACT_DOD_WALK_IDLE_PSCHRECK
Value:       790 (int)

Constant:    ACT_DOD_WALK_IDLE_RIFLE
Value:       641 (int)

Constant:    ACT_DOD_WALK_IDLE_TNT
Value:       982 (int)

Constant:    ACT_DOD_WALK_IDLE_TOMMY
Value:       667 (int)

Constant:    ACT_DOD_WALK_ZOOMED
Value:       583 (int)

Constant:    ACT_DOD_WALK_ZOOM_BAZOOKA
Value:       822 (int)

Constant:    ACT_DOD_WALK_ZOOM_BOLT
Value:       816 (int)

Constant:    ACT_DOD_WALK_ZOOM_PSCHRECK
Value:       828 (int)

Constant:    ACT_DOD_WALK_ZOOM_RIFLE
Value:       810 (int)

Constant:    ACT_DOD_ZOOMLOAD_BAZOOKA
Value:       914 (int)

Constant:    ACT_DOD_ZOOMLOAD_PRONE_BAZOOKA
Value:       937 (int)

Constant:    ACT_DOD_ZOOMLOAD_PRONE_PSCHRECK
Value:       939 (int)

Constant:    ACT_DOD_ZOOMLOAD_PSCHRECK
Value:       916 (int)

Constant:    ACT_DO_NOT_DISTURB
Value:       170 (int)

Constant:    ACT_DROP_WEAPON
Value:       71 (int)

Constant:    ACT_DROP_WEAPON_SHOTGUN
Value:       72 (int)

Constant:    ACT_DUCK_DODGE
Value:       399 (int)

Constant:    ACT_DYINGLOOP
Value:       428 (int)

Constant:    ACT_DYINGTODEAD
Value:       429 (int)

Constant:    ACT_ENGINEER_BLD_VM_DRAW
Value:       1571 (int)

Constant:    ACT_ENGINEER_BLD_VM_IDLE
Value:       1574 (int)

Constant:    ACT_ENGINEER_PDA1_VM_DRAW
Value:       1569 (int)

Constant:    ACT_ENGINEER_PDA1_VM_IDLE
Value:       1572 (int)

Constant:    ACT_ENGINEER_PDA2_VM_DRAW
Value:       1570 (int)

Constant:    ACT_ENGINEER_PDA2_VM_IDLE
Value:       1573 (int)

Constant:    ACT_FIRE_END
Value:       436 (int)

Constant:    ACT_FIRE_LOOP
Value:       435 (int)

Constant:    ACT_FIRE_START
Value:       434 (int)

Constant:    ACT_FISTS_VM_DRAW
Value:       227 (int)

Constant:    ACT_FISTS_VM_HITLEFT
Value:       223 (int)

Constant:    ACT_FISTS_VM_HITRIGHT
Value:       224 (int)

Constant:    ACT_FISTS_VM_IDLE
Value:       226 (int)

Constant:    ACT_FISTS_VM_SWINGHARD
Value:       225 (int)

Constant:    ACT_FLINCH_CHEST
Value:       117 (int)

Constant:    ACT_FLINCH_HEAD
Value:       116 (int)

Constant:    ACT_FLINCH_LEFTARM
Value:       119 (int)

Constant:    ACT_FLINCH_LEFTLEG
Value:       121 (int)

Constant:    ACT_FLINCH_PHYSICS
Value:       123 (int)

Constant:    ACT_FLINCH_RIGHTARM
Value:       120 (int)

Constant:    ACT_FLINCH_RIGHTLEG
Value:       122 (int)

Constant:    ACT_FLINCH_STOMACH
Value:       118 (int)

Constant:    ACT_FLY
Value:       25 (int)

Constant:    ACT_GAUSS_SPINCYCLE
Value:       489 (int)

Constant:    ACT_GAUSS_SPINUP
Value:       488 (int)

Constant:    ACT_GESTURE_BARNACLE_STRANGLE
Value:       401 (int)

Constant:    ACT_GESTURE_BIG_FLINCH
Value:       144 (int)

Constant:    ACT_GESTURE_COMBINE_AR2_ALTFIRE
Value:       1769 (int)

Constant:    ACT_GESTURE_COMBINE_THROW_GRENADE
Value:       1768 (int)

Constant:    ACT_GESTURE_DEPLOY_MANHACK
Value:       1985 (int)

Constant:    ACT_GESTURE_DOOR_LEVER_OPEN_BACK
Value:       1992 (int)

Constant:    ACT_GESTURE_DOOR_LEVER_OPEN_FRONT
Value:       1993 (int)

Constant:    ACT_GESTURE_DOOR_PUSHBAR_OPEN_BACK
Value:       1994 (int)

Constant:    ACT_GESTURE_FLINCH_BLAST
Value:       145 (int)

Constant:    ACT_GESTURE_FLINCH_BLAST_DAMAGED
Value:       147 (int)

Constant:    ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN
Value:       148 (int)

Constant:    ACT_GESTURE_FLINCH_BLAST_SHOTGUN
Value:       146 (int)

Constant:    ACT_GESTURE_FLINCH_CHEST
Value:       150 (int)

Constant:    ACT_GESTURE_FLINCH_HEAD
Value:       149 (int)

Constant:    ACT_GESTURE_FLINCH_LEFTARM
Value:       152 (int)

Constant:    ACT_GESTURE_FLINCH_LEFTLEG
Value:       154 (int)

Constant:    ACT_GESTURE_FLINCH_RIGHTARM
Value:       153 (int)

Constant:    ACT_GESTURE_FLINCH_RIGHTLEG
Value:       155 (int)

Constant:    ACT_GESTURE_FLINCH_STOMACH
Value:       151 (int)

Constant:    ACT_GESTURE_MELEE_ATTACK1
Value:       138 (int)

Constant:    ACT_GESTURE_MELEE_ATTACK2
Value:       139 (int)

Constant:    ACT_GESTURE_MELEE_ATTACK_SWING
Value:       317 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK1
Value:       136 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK1_LOW
Value:       140 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK2
Value:       137 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK2_LOW
Value:       141 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_ANNABELLE
Value:       1846 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_AR1
Value:       302 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_AR2
Value:       303 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE
Value:       304 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_CROSSBOW
Value:       1805 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_HMG1
Value:       305 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_ML
Value:       306 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_PISTOL
Value:       311 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW
Value:       312 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_REVOLVER
Value:       1791 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_RPG
Value:       1843 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_SHOTGUN
Value:       310 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_SLAM
Value:       313 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_SMG1
Value:       307 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_SMG1_LOW
Value:       308 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_SMG2
Value:       309 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE
Value:       316 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_THROW
Value:       315 (int)

Constant:    ACT_GESTURE_RANGE_ATTACK_TRIPWIRE
Value:       314 (int)

Constant:    ACT_GESTURE_RELOAD
Value:       381 (int)

Constant:    ACT_GESTURE_RELOAD_ANNABELLE
Value:       1849 (int)

Constant:    ACT_GESTURE_RELOAD_AR2
Value:       1764 (int)

Constant:    ACT_GESTURE_RELOAD_CROSSBOW
Value:       1806 (int)

Constant:    ACT_GESTURE_RELOAD_PISTOL
Value:       382 (int)

Constant:    ACT_GESTURE_RELOAD_REVOLVER
Value:       1792 (int)

Constant:    ACT_GESTURE_RELOAD_SHOTGUN
Value:       384 (int)

Constant:    ACT_GESTURE_RELOAD_SMG1
Value:       383 (int)

Constant:    ACT_GESTURE_SIGNAL_ADVANCE
Value:       1772 (int)

Constant:    ACT_GESTURE_SIGNAL_FORWARD
Value:       1773 (int)

Constant:    ACT_GESTURE_SIGNAL_GROUP
Value:       1774 (int)

Constant:    ACT_GESTURE_SIGNAL_HALT
Value:       1775 (int)

Constant:    ACT_GESTURE_SIGNAL_LEFT
Value:       1776 (int)

Constant:    ACT_GESTURE_SIGNAL_RIGHT
Value:       1777 (int)

Constant:    ACT_GESTURE_SIGNAL_TAKECOVER
Value:       1778 (int)

Constant:    ACT_GESTURE_SMALL_FLINCH
Value:       143 (int)

Constant:    ACT_GESTURE_SPECIAL_ATTACK1
Value:       1770 (int)

Constant:    ACT_GESTURE_SPECIAL_ATTACK2
Value:       1771 (int)

Constant:    ACT_GESTURE_TURN_LEFT
Value:       156 (int)

Constant:    ACT_GESTURE_TURN_LEFT180
Value:       1946 (int)

Constant:    ACT_GESTURE_TURN_LEFT180_FLAT
Value:       1948 (int)

Constant:    ACT_GESTURE_TURN_LEFT45
Value:       158 (int)

Constant:    ACT_GESTURE_TURN_LEFT45_FLAT
Value:       162 (int)

Constant:    ACT_GESTURE_TURN_LEFT90
Value:       160 (int)

Constant:    ACT_GESTURE_TURN_LEFT90_FLAT
Value:       164 (int)

Constant:    ACT_GESTURE_TURN_RIGHT
Value:       157 (int)

Constant:    ACT_GESTURE_TURN_RIGHT180
Value:       1947 (int)

Constant:    ACT_GESTURE_TURN_RIGHT180_FLAT
Value:       1949 (int)

Constant:    ACT_GESTURE_TURN_RIGHT45
Value:       159 (int)

Constant:    ACT_GESTURE_TURN_RIGHT45_FLAT
Value:       163 (int)

Constant:    ACT_GESTURE_TURN_RIGHT90
Value:       161 (int)

Constant:    ACT_GESTURE_TURN_RIGHT90_FLAT
Value:       165 (int)

Constant:    ACT_GET_DOWN_CROUCH
Value:       509 (int)

Constant:    ACT_GET_DOWN_STAND
Value:       507 (int)

Constant:    ACT_GET_UP_CROUCH
Value:       510 (int)

Constant:    ACT_GET_UP_STAND
Value:       508 (int)

Constant:    ACT_GLIDE
Value:       27 (int)

Constant:    ACT_GLOCK_SHOOTEMPTY
Value:       479 (int)

Constant:    ACT_GLOCK_SHOOT_RELOAD
Value:       480 (int)

Constant:    ACT_GRENADE_ROLL
Value:       472 (int)

Constant:    ACT_GRENADE_TOSS
Value:       473 (int)

Constant:    ACT_HANDGRENADE_THROW1
Value:       474 (int)

Constant:    ACT_HANDGRENADE_THROW2
Value:       475 (int)

Constant:    ACT_HANDGRENADE_THROW3
Value:       476 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK
Value:       992 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK2
Value:       1907 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK2_AR2
Value:       1911 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK2_CROSSBOW
Value:       1915 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK2_GRENADE
Value:       1913 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK2_MELEE
Value:       1916 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK2_PHYSGUN
Value:       1912 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK2_PISTOL
Value:       1908 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK2_REVOLVER
Value:       1924 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK2_RPG
Value:       1914 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK2_SHOTGUN
Value:       1909 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK2_SLAM
Value:       1917 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK2_SMG1
Value:       1910 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2
Value:       1013 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK_CROSSBOW
Value:       1048 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK_GRENADE
Value:       1034 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE
Value:       1055 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK_PHYSGUN
Value:       1041 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK_PISTOL
Value:       999 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK_REVOLVER
Value:       1923 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK_RPG
Value:       1027 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN
Value:       1020 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK_SLAM
Value:       1062 (int)

Constant:    ACT_HL2MP_GESTURE_RANGE_ATTACK_SMG1
Value:       1006 (int)

Constant:    ACT_HL2MP_GESTURE_RELOAD
Value:       993 (int)

Constant:    ACT_HL2MP_GESTURE_RELOAD_AR2
Value:       1014 (int)

Constant:    ACT_HL2MP_GESTURE_RELOAD_CROSSBOW
Value:       1049 (int)

Constant:    ACT_HL2MP_GESTURE_RELOAD_GRENADE
Value:       1035 (int)

Constant:    ACT_HL2MP_GESTURE_RELOAD_MELEE
Value:       1056 (int)

Constant:    ACT_HL2MP_GESTURE_RELOAD_PHYSGUN
Value:       1042 (int)

Constant:    ACT_HL2MP_GESTURE_RELOAD_PISTOL
Value:       1000 (int)

Constant:    ACT_HL2MP_GESTURE_RELOAD_REVOLVER
Value:       1925 (int)

Constant:    ACT_HL2MP_GESTURE_RELOAD_RPG
Value:       1028 (int)

Constant:    ACT_HL2MP_GESTURE_RELOAD_SHOTGUN
Value:       1021 (int)

Constant:    ACT_HL2MP_GESTURE_RELOAD_SLAM
Value:       1063 (int)

Constant:    ACT_HL2MP_GESTURE_RELOAD_SMG1
Value:       1007 (int)

Constant:    ACT_HL2MP_IDLE
Value:       988 (int)

Constant:    ACT_HL2MP_IDLE_AR2
Value:       1009 (int)

Constant:    ACT_HL2MP_IDLE_CROSSBOW
Value:       1044 (int)

Constant:    ACT_HL2MP_IDLE_CROUCH
Value:       990 (int)

Constant:    ACT_HL2MP_IDLE_CROUCH_AR2
Value:       1011 (int)

Constant:    ACT_HL2MP_IDLE_CROUCH_CROSSBOW
Value:       1046 (int)

Constant:    ACT_HL2MP_IDLE_CROUCH_GRENADE
Value:       1032 (int)

Constant:    ACT_HL2MP_IDLE_CROUCH_MELEE
Value:       1053 (int)

Constant:    ACT_HL2MP_IDLE_CROUCH_PHYSGUN
Value:       1039 (int)

Constant:    ACT_HL2MP_IDLE_CROUCH_PISTOL
Value:       997 (int)

Constant:    ACT_HL2MP_IDLE_CROUCH_REVOLVER
Value:       1921 (int)

Constant:    ACT_HL2MP_IDLE_CROUCH_RPG
Value:       1025 (int)

Constant:    ACT_HL2MP_IDLE_CROUCH_SHOTGUN
Value:       1018 (int)

Constant:    ACT_HL2MP_IDLE_CROUCH_SLAM
Value:       1060 (int)

Constant:    ACT_HL2MP_IDLE_CROUCH_SMG1
Value:       1004 (int)

Constant:    ACT_HL2MP_IDLE_CROUCH_USE
Value:       1930 (int)

Constant:    ACT_HL2MP_IDLE_CROUCH_USE_HEAVY
Value:       1936 (int)

Constant:    ACT_HL2MP_IDLE_GRENADE
Value:       1030 (int)

Constant:    ACT_HL2MP_IDLE_MELEE
Value:       1051 (int)

Constant:    ACT_HL2MP_IDLE_PHYSGUN
Value:       1037 (int)

Constant:    ACT_HL2MP_IDLE_PISTOL
Value:       995 (int)

Constant:    ACT_HL2MP_IDLE_REVOLVER
Value:       1918 (int)

Constant:    ACT_HL2MP_IDLE_RPG
Value:       1023 (int)

Constant:    ACT_HL2MP_IDLE_SHOTGUN
Value:       1016 (int)

Constant:    ACT_HL2MP_IDLE_SLAM
Value:       1058 (int)

Constant:    ACT_HL2MP_IDLE_SMG1
Value:       1002 (int)

Constant:    ACT_HL2MP_IDLE_USE
Value:       1927 (int)

Constant:    ACT_HL2MP_IDLE_USE_HEAVY
Value:       1933 (int)

Constant:    ACT_HL2MP_JUMP
Value:       994 (int)

Constant:    ACT_HL2MP_JUMP_AR2
Value:       1015 (int)

Constant:    ACT_HL2MP_JUMP_CROSSBOW
Value:       1050 (int)

Constant:    ACT_HL2MP_JUMP_GRENADE
Value:       1036 (int)

Constant:    ACT_HL2MP_JUMP_MELEE
Value:       1057 (int)

Constant:    ACT_HL2MP_JUMP_PHYSGUN
Value:       1043 (int)

Constant:    ACT_HL2MP_JUMP_PISTOL
Value:       1001 (int)

Constant:    ACT_HL2MP_JUMP_REVOLVER
Value:       1926 (int)

Constant:    ACT_HL2MP_JUMP_RPG
Value:       1029 (int)

Constant:    ACT_HL2MP_JUMP_SHOTGUN
Value:       1022 (int)

Constant:    ACT_HL2MP_JUMP_SLAM
Value:       1064 (int)

Constant:    ACT_HL2MP_JUMP_SMG1
Value:       1008 (int)

Constant:    ACT_HL2MP_JUMP_USE
Value:       1932 (int)

Constant:    ACT_HL2MP_JUMP_USE_HEAVY
Value:       1938 (int)

Constant:    ACT_HL2MP_RUN
Value:       989 (int)

Constant:    ACT_HL2MP_RUN_AR2
Value:       1010 (int)

Constant:    ACT_HL2MP_RUN_CROSSBOW
Value:       1045 (int)

Constant:    ACT_HL2MP_RUN_GRENADE
Value:       1031 (int)

Constant:    ACT_HL2MP_RUN_MELEE
Value:       1052 (int)

Constant:    ACT_HL2MP_RUN_PHYSGUN
Value:       1038 (int)

Constant:    ACT_HL2MP_RUN_PISTOL
Value:       996 (int)

Constant:    ACT_HL2MP_RUN_REVOLVER
Value:       1919 (int)

Constant:    ACT_HL2MP_RUN_RPG
Value:       1024 (int)

Constant:    ACT_HL2MP_RUN_SHOTGUN
Value:       1017 (int)

Constant:    ACT_HL2MP_RUN_SLAM
Value:       1059 (int)

Constant:    ACT_HL2MP_RUN_SMG1
Value:       1003 (int)

Constant:    ACT_HL2MP_RUN_USE
Value:       1928 (int)

Constant:    ACT_HL2MP_RUN_USE_HEAVY
Value:       1934 (int)

Constant:    ACT_HL2MP_WALK
Value:       1896 (int)

Constant:    ACT_HL2MP_WALK_AR2
Value:       1900 (int)

Constant:    ACT_HL2MP_WALK_CROSSBOW
Value:       1904 (int)

Constant:    ACT_HL2MP_WALK_CROUCH
Value:       991 (int)

Constant:    ACT_HL2MP_WALK_CROUCH_AR2
Value:       1012 (int)

Constant:    ACT_HL2MP_WALK_CROUCH_CROSSBOW
Value:       1047 (int)

Constant:    ACT_HL2MP_WALK_CROUCH_GRENADE
Value:       1033 (int)

Constant:    ACT_HL2MP_WALK_CROUCH_MELEE
Value:       1054 (int)

Constant:    ACT_HL2MP_WALK_CROUCH_PHYSGUN
Value:       1040 (int)

Constant:    ACT_HL2MP_WALK_CROUCH_PISTOL
Value:       998 (int)

Constant:    ACT_HL2MP_WALK_CROUCH_REVOLVER
Value:       1922 (int)

Constant:    ACT_HL2MP_WALK_CROUCH_RPG
Value:       1026 (int)

Constant:    ACT_HL2MP_WALK_CROUCH_SHOTGUN
Value:       1019 (int)

Constant:    ACT_HL2MP_WALK_CROUCH_SLAM
Value:       1061 (int)

Constant:    ACT_HL2MP_WALK_CROUCH_SMG1
Value:       1005 (int)

Constant:    ACT_HL2MP_WALK_CROUCH_USE
Value:       1931 (int)

Constant:    ACT_HL2MP_WALK_CROUCH_USE_HEAVY
Value:       1937 (int)

Constant:    ACT_HL2MP_WALK_GRENADE
Value:       1902 (int)

Constant:    ACT_HL2MP_WALK_MELEE
Value:       1905 (int)

Constant:    ACT_HL2MP_WALK_PHYSGUN
Value:       1901 (int)

Constant:    ACT_HL2MP_WALK_PISTOL
Value:       1897 (int)

Constant:    ACT_HL2MP_WALK_REVOLVER
Value:       1920 (int)

Constant:    ACT_HL2MP_WALK_RPG
Value:       1903 (int)

Constant:    ACT_HL2MP_WALK_SHOTGUN
Value:       1898 (int)

Constant:    ACT_HL2MP_WALK_SLAM
Value:       1906 (int)

Constant:    ACT_HL2MP_WALK_SMG1
Value:       1899 (int)

Constant:    ACT_HL2MP_WALK_USE
Value:       1929 (int)

Constant:    ACT_HL2MP_WALK_USE_HEAVY
Value:       1935 (int)

Constant:    ACT_HOP
Value:       30 (int)

Constant:    ACT_HOVER
Value:       26 (int)

Constant:    ACT_IDLE
Value:       1 (int)

Constant:    ACT_IDLETORUN
Value:       504 (int)

Constant:    ACT_IDLE_AGITATED
Value:       78 (int)

Constant:    ACT_IDLE_AIM_AGITATED
Value:       91 (int)

Constant:    ACT_IDLE_AIM_AR2_STIMULATED
Value:       1755 (int)

Constant:    ACT_IDLE_AIM_CROSSBOW_STIMULATED
Value:       1813 (int)

Constant:    ACT_IDLE_AIM_PISTOL_RELAXED
Value:       1980 (int)

Constant:    ACT_IDLE_AIM_PISTOL_STIMULATED
Value:       1822 (int)

Constant:    ACT_IDLE_AIM_RELAXED
Value:       89 (int)

Constant:    ACT_IDLE_AIM_RIFLE_STIMULATED
Value:       335 (int)

Constant:    ACT_IDLE_AIM_SHOTGUN_STIMULATED
Value:       1838 (int)

Constant:    ACT_IDLE_AIM_STEALTH
Value:       92 (int)

Constant:    ACT_IDLE_AIM_STIMULATED
Value:       90 (int)

Constant:    ACT_IDLE_ANGRY
Value:       75 (int)

Constant:    ACT_IDLE_ANGRY_AR1
Value:       1959 (int)

Constant:    ACT_IDLE_ANGRY_AR2
Value:       1748 (int)

Constant:    ACT_IDLE_ANGRY_CROSSBOW
Value:       1794 (int)

Constant:    ACT_IDLE_ANGRY_MELEE
Value:       346 (int)

Constant:    ACT_IDLE_ANGRY_PISTOL
Value:       322 (int)

Constant:    ACT_IDLE_ANGRY_REVOLVER
Value:       1780 (int)

Constant:    ACT_IDLE_ANGRY_RPG
Value:       349 (int)

Constant:    ACT_IDLE_ANGRY_SHOTGUN
Value:       323 (int)

Constant:    ACT_IDLE_ANGRY_SMG1
Value:       320 (int)

Constant:    ACT_IDLE_ANGRY_SMG2
Value:       1970 (int)

Constant:    ACT_IDLE_AR1
Value:       1958 (int)

Constant:    ACT_IDLE_AR1_RELAXED
Value:       1962 (int)

Constant:    ACT_IDLE_AR1_STIMULATED
Value:       1963 (int)

Constant:    ACT_IDLE_AR2
Value:       1747 (int)

Constant:    ACT_IDLE_AR2_RELAXED
Value:       1749 (int)

Constant:    ACT_IDLE_AR2_STIMULATED
Value:       1750 (int)

Constant:    ACT_IDLE_CARRY
Value:       425 (int)

Constant:    ACT_IDLE_CROSSBOW
Value:       1793 (int)

Constant:    ACT_IDLE_CROSSBOW_RELAXED
Value:       1807 (int)

Constant:    ACT_IDLE_CROSSBOW_STIMULATED
Value:       1808 (int)

Constant:    ACT_IDLE_HURT
Value:       80 (int)

Constant:    ACT_IDLE_MANNEDGUN
Value:       344 (int)

Constant:    ACT_IDLE_MELEE
Value:       345 (int)

Constant:    ACT_IDLE_ON_FIRE
Value:       124 (int)

Constant:    ACT_IDLE_PACKAGE
Value:       325 (int)

Constant:    ACT_IDLE_PISTOL
Value:       321 (int)

Constant:    ACT_IDLE_PISTOL_RELAXED
Value:       1816 (int)

Constant:    ACT_IDLE_PISTOL_STIMULATED
Value:       1817 (int)

Constant:    ACT_IDLE_RELAXED
Value:       76 (int)

Constant:    ACT_IDLE_REVOLVER
Value:       1779 (int)

Constant:    ACT_IDLE_RIFLE
Value:       318 (int)

Constant:    ACT_IDLE_RPG
Value:       348 (int)

Constant:    ACT_IDLE_RPG_RELAXED
Value:       347 (int)

Constant:    ACT_IDLE_SHOTGUN
Value:       1829 (int)

Constant:    ACT_IDLE_SHOTGUN_AGITATED
Value:       340 (int)

Constant:    ACT_IDLE_SHOTGUN_RELAXED
Value:       338 (int)

Constant:    ACT_IDLE_SHOTGUN_STIMULATED
Value:       339 (int)

Constant:    ACT_IDLE_SMG1
Value:       319 (int)

Constant:    ACT_IDLE_SMG1_RELAXED
Value:       329 (int)

Constant:    ACT_IDLE_SMG1_STIMULATED
Value:       330 (int)

Constant:    ACT_IDLE_SMG2
Value:       1969 (int)

Constant:    ACT_IDLE_SMG2_RELAXED
Value:       1973 (int)

Constant:    ACT_IDLE_SMG2_STIMULATED
Value:       1974 (int)

Constant:    ACT_IDLE_STEALTH
Value:       79 (int)

Constant:    ACT_IDLE_STEALTH_PISTOL
Value:       324 (int)

Constant:    ACT_IDLE_STIMULATED
Value:       77 (int)

Constant:    ACT_IDLE_SUITCASE
Value:       327 (int)

Constant:    ACT_ITEM1_ATTACK_CROUCH_POSTFIRE
Value:       1675 (int)

Constant:    ACT_ITEM1_ATTACK_CROUCH_PREFIRE
Value:       1674 (int)

Constant:    ACT_ITEM1_ATTACK_STAND_POSTFIRE
Value:       1672 (int)

Constant:    ACT_ITEM1_ATTACK_STAND_PREFIRE
Value:       1671 (int)

Constant:    ACT_ITEM1_ATTACK_STAND_STARTFIRE
Value:       1673 (int)

Constant:    ACT_ITEM1_ATTACK_SWIM_POSTFIRE
Value:       1677 (int)

Constant:    ACT_ITEM1_ATTACK_SWIM_PREFIRE
Value:       1676 (int)

Constant:    ACT_ITEM1_BACKSTAB_VM_DOWN
Value:       1592 (int)

Constant:    ACT_ITEM1_BACKSTAB_VM_IDLE
Value:       1593 (int)

Constant:    ACT_ITEM1_BACKSTAB_VM_UP
Value:       1591 (int)

Constant:    ACT_ITEM1_RELOAD_FINISH
Value:       1588 (int)

Constant:    ACT_ITEM1_RELOAD_START
Value:       1587 (int)

Constant:    ACT_ITEM1_VM_DRAW
Value:       1575 (int)

Constant:    ACT_ITEM1_VM_DRYFIRE
Value:       1583 (int)

Constant:    ACT_ITEM1_VM_HITCENTER
Value:       1589 (int)

Constant:    ACT_ITEM1_VM_HOLSTER
Value:       1576 (int)

Constant:    ACT_ITEM1_VM_IDLE
Value:       1577 (int)

Constant:    ACT_ITEM1_VM_IDLE_2
Value:       1578 (int)

Constant:    ACT_ITEM1_VM_IDLE_LOWERED
Value:       1585 (int)

Constant:    ACT_ITEM1_VM_IDLE_TO_LOWERED
Value:       1584 (int)

Constant:    ACT_ITEM1_VM_LOWERED_TO_IDLE
Value:       1586 (int)

Constant:    ACT_ITEM1_VM_PRIMARYATTACK
Value:       1580 (int)

Constant:    ACT_ITEM1_VM_PULLBACK
Value:       1579 (int)

Constant:    ACT_ITEM1_VM_RELOAD
Value:       1582 (int)

Constant:    ACT_ITEM1_VM_SECONDARYATTACK
Value:       1581 (int)

Constant:    ACT_ITEM1_VM_SWINGHARD
Value:       1590 (int)

Constant:    ACT_ITEM2_ATTACK_CROUCH_POSTFIRE
Value:       1682 (int)

Constant:    ACT_ITEM2_ATTACK_CROUCH_PREFIRE
Value:       1681 (int)

Constant:    ACT_ITEM2_ATTACK_STAND_POSTFIRE
Value:       1679 (int)

Constant:    ACT_ITEM2_ATTACK_STAND_PREFIRE
Value:       1678 (int)

Constant:    ACT_ITEM2_ATTACK_STAND_STARTFIRE
Value:       1680 (int)

Constant:    ACT_ITEM2_ATTACK_SWIM_POSTFIRE
Value:       1684 (int)

Constant:    ACT_ITEM2_ATTACK_SWIM_PREFIRE
Value:       1683 (int)

Constant:    ACT_ITEM2_BACKSTAB_VM_DOWN
Value:       1613 (int)

Constant:    ACT_ITEM2_BACKSTAB_VM_IDLE
Value:       1614 (int)

Constant:    ACT_ITEM2_BACKSTAB_VM_UP
Value:       1612 (int)

Constant:    ACT_ITEM2_VM_CHARGE
Value:       1606 (int)

Constant:    ACT_ITEM2_VM_CHARGE_IDLE_3
Value:       1609 (int)

Constant:    ACT_ITEM2_VM_DRAW
Value:       1595 (int)

Constant:    ACT_ITEM2_VM_DRYFIRE
Value:       1602 (int)

Constant:    ACT_ITEM2_VM_HITCENTER
Value:       1610 (int)

Constant:    ACT_ITEM2_VM_HOLSTER
Value:       1596 (int)

Constant:    ACT_ITEM2_VM_IDLE
Value:       1597 (int)

Constant:    ACT_ITEM2_VM_IDLE_2
Value:       1607 (int)

Constant:    ACT_ITEM2_VM_IDLE_3
Value:       1608 (int)

Constant:    ACT_ITEM2_VM_IDLE_LOWERED
Value:       1604 (int)

Constant:    ACT_ITEM2_VM_IDLE_TO_LOWERED
Value:       1603 (int)

Constant:    ACT_ITEM2_VM_LOWERED_TO_IDLE
Value:       1605 (int)

Constant:    ACT_ITEM2_VM_PRIMARYATTACK
Value:       1599 (int)

Constant:    ACT_ITEM2_VM_PULLBACK
Value:       1598 (int)

Constant:    ACT_ITEM2_VM_RELOAD
Value:       1601 (int)

Constant:    ACT_ITEM2_VM_SECONDARYATTACK
Value:       1600 (int)

Constant:    ACT_ITEM2_VM_SWINGHARD
Value:       1611 (int)

Constant:    ACT_ITEM3_VM_CHARGE
Value:       1627 (int)

Constant:    ACT_ITEM3_VM_CHARGE_IDLE_3
Value:       1630 (int)

Constant:    ACT_ITEM3_VM_DRAW
Value:       1616 (int)

Constant:    ACT_ITEM3_VM_DRYFIRE
Value:       1623 (int)

Constant:    ACT_ITEM3_VM_HITCENTER
Value:       1631 (int)

Constant:    ACT_ITEM3_VM_HOLSTER
Value:       1617 (int)

Constant:    ACT_ITEM3_VM_IDLE
Value:       1618 (int)

Constant:    ACT_ITEM3_VM_IDLE_2
Value:       1628 (int)

Constant:    ACT_ITEM3_VM_IDLE_3
Value:       1629 (int)

Constant:    ACT_ITEM3_VM_IDLE_LOWERED
Value:       1625 (int)

Constant:    ACT_ITEM3_VM_IDLE_TO_LOWERED
Value:       1624 (int)

Constant:    ACT_ITEM3_VM_LOWERED_TO_IDLE
Value:       1626 (int)

Constant:    ACT_ITEM3_VM_PRIMARYATTACK
Value:       1620 (int)

Constant:    ACT_ITEM3_VM_PULLBACK
Value:       1619 (int)

Constant:    ACT_ITEM3_VM_RELOAD
Value:       1622 (int)

Constant:    ACT_ITEM3_VM_SECONDARYATTACK
Value:       1621 (int)

Constant:    ACT_ITEM3_VM_SWINGHARD
Value:       1632 (int)

Constant:    ACT_JUMP
Value:       29 (int)

Constant:    ACT_LAND
Value:       32 (int)

Constant:    ACT_LEAP
Value:       31 (int)

Constant:    ACT_LOOKBACK_LEFT
Value:       59 (int)

Constant:    ACT_LOOKBACK_RIGHT
Value:       58 (int)

Constant:    ACT_MELEE_ALLCLASS_VM_DRAW
Value:       1702 (int)

Constant:    ACT_MELEE_ALLCLASS_VM_DRYFIRE
Value:       1709 (int)

Constant:    ACT_MELEE_ALLCLASS_VM_HITCENTER
Value:       1714 (int)

Constant:    ACT_MELEE_ALLCLASS_VM_HOLSTER
Value:       1703 (int)

Constant:    ACT_MELEE_ALLCLASS_VM_IDLE
Value:       1704 (int)

Constant:    ACT_MELEE_ALLCLASS_VM_IDLE_LOWERED
Value:       1711 (int)

Constant:    ACT_MELEE_ALLCLASS_VM_IDLE_TO_LOWERED
Value:       1710 (int)

Constant:    ACT_MELEE_ALLCLASS_VM_LOWERED_TO_IDLE
Value:       1712 (int)

Constant:    ACT_MELEE_ALLCLASS_VM_PRIMARYATTACK
Value:       1706 (int)

Constant:    ACT_MELEE_ALLCLASS_VM_PULLBACK
Value:       1705 (int)

Constant:    ACT_MELEE_ALLCLASS_VM_RELOAD
Value:       1708 (int)

Constant:    ACT_MELEE_ALLCLASS_VM_SECONDARYATTACK
Value:       1707 (int)

Constant:    ACT_MELEE_ALLCLASS_VM_STUN
Value:       1713 (int)

Constant:    ACT_MELEE_ALLCLASS_VM_SWINGHARD
Value:       1715 (int)

Constant:    ACT_MELEE_ATTACK1
Value:       63 (int)

Constant:    ACT_MELEE_ATTACK2
Value:       64 (int)

Constant:    ACT_MELEE_ATTACK_CROUCH_POSTFIRE
Value:       1668 (int)

Constant:    ACT_MELEE_ATTACK_CROUCH_PREFIRE
Value:       1667 (int)

Constant:    ACT_MELEE_ATTACK_STAND_POSTFIRE
Value:       1665 (int)

Constant:    ACT_MELEE_ATTACK_STAND_PREFIRE
Value:       1664 (int)

Constant:    ACT_MELEE_ATTACK_STAND_STARTFIRE
Value:       1666 (int)

Constant:    ACT_MELEE_ATTACK_SWIM_POSTFIRE
Value:       1670 (int)

Constant:    ACT_MELEE_ATTACK_SWIM_PREFIRE
Value:       1669 (int)

Constant:    ACT_MELEE_ATTACK_SWING
Value:       295 (int)

Constant:    ACT_MELEE_ATTACK_SWING_GESTURE
Value:       142 (int)

Constant:    ACT_MELEE_VM_DRAW
Value:       1544 (int)

Constant:    ACT_MELEE_VM_DRYFIRE
Value:       1551 (int)

Constant:    ACT_MELEE_VM_HITCENTER
Value:       1556 (int)

Constant:    ACT_MELEE_VM_HOLSTER
Value:       1545 (int)

Constant:    ACT_MELEE_VM_IDLE
Value:       1546 (int)

Constant:    ACT_MELEE_VM_IDLE_LOWERED
Value:       1553 (int)

Constant:    ACT_MELEE_VM_IDLE_TO_LOWERED
Value:       1552 (int)

Constant:    ACT_MELEE_VM_ITEM1_STUN
Value:       1594 (int)

Constant:    ACT_MELEE_VM_ITEM2_STUN
Value:       1615 (int)

Constant:    ACT_MELEE_VM_LOWERED_TO_IDLE
Value:       1554 (int)

Constant:    ACT_MELEE_VM_PRIMARYATTACK
Value:       1548 (int)

Constant:    ACT_MELEE_VM_PULLBACK
Value:       1547 (int)

Constant:    ACT_MELEE_VM_RELOAD
Value:       1550 (int)

Constant:    ACT_MELEE_VM_SECONDARYATTACK
Value:       1549 (int)

Constant:    ACT_MELEE_VM_STUN
Value:       1555 (int)

Constant:    ACT_MELEE_VM_SWINGHARD
Value:       1557 (int)

Constant:    ACT_METROPOLICE_DEPLOY_MANHACK
Value:       1984 (int)

Constant:    ACT_MP_AIRWALK
Value:       1074 (int)

Constant:    ACT_MP_AIRWALK_BUILDING
Value:       1386 (int)

Constant:    ACT_MP_AIRWALK_BUILDING_DEPLOYED
Value:       1405 (int)

Constant:    ACT_MP_AIRWALK_ITEM1
Value:       1271 (int)

Constant:    ACT_MP_AIRWALK_ITEM2
Value:       1294 (int)

Constant:    ACT_MP_AIRWALK_LOSERSTATE
Value:       1437 (int)

Constant:    ACT_MP_AIRWALK_MELEE
Value:       1250 (int)

Constant:    ACT_MP_AIRWALK_MELEE_ALLCLASS
Value:       1689 (int)

Constant:    ACT_MP_AIRWALK_PDA
Value:       1424 (int)

Constant:    ACT_MP_AIRWALK_PRIMARY
Value:       1123 (int)

Constant:    ACT_MP_AIRWALK_SECONDARY
Value:       1188 (int)

Constant:    ACT_MP_AIRWALK_SECONDARY2
Value:       1223 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_BUILDING
Value:       1396 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_BUILDING_DEPLOYED
Value:       1415 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_GRENADE
Value:       1099 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING
Value:       1400 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING_DEPLOYED
Value:       1419 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_GRENADE_ITEM2
Value:       1332 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE
Value:       1266 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY
Value:       1183 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY
Value:       1218 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_ITEM1
Value:       1283 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_ITEM2
Value:       1306 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_MELEE
Value:       1262 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_MELEE_ALLCLASS
Value:       1701 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_PRIMARY
Value:       1139 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE
Value:       1097 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_SECONDARY
Value:       1198 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_SECONDARY2
Value:       1233 (int)

Constant:    ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE
Value:       1098 (int)

Constant:    ACT_MP_ATTACK_CROUCH_BUILDING
Value:       1394 (int)

Constant:    ACT_MP_ATTACK_CROUCH_BUILDING_DEPLOYED
Value:       1413 (int)

Constant:    ACT_MP_ATTACK_CROUCH_GRENADE
Value:       1093 (int)

Constant:    ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING
Value:       1398 (int)

Constant:    ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING_DEPLOYED
Value:       1417 (int)

Constant:    ACT_MP_ATTACK_CROUCH_GRENADE_ITEM2
Value:       1330 (int)

Constant:    ACT_MP_ATTACK_CROUCH_GRENADE_MELEE
Value:       1264 (int)

Constant:    ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY
Value:       1181 (int)

Constant:    ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY
Value:       1216 (int)

Constant:    ACT_MP_ATTACK_CROUCH_HARD_ITEM2
Value:       1308 (int)

Constant:    ACT_MP_ATTACK_CROUCH_ITEM1
Value:       1280 (int)

Constant:    ACT_MP_ATTACK_CROUCH_ITEM1_SECONDARY
Value:       1281 (int)

Constant:    ACT_MP_ATTACK_CROUCH_ITEM2
Value:       1303 (int)

Constant:    ACT_MP_ATTACK_CROUCH_ITEM2_SECONDARY
Value:       1304 (int)

Constant:    ACT_MP_ATTACK_CROUCH_MELEE
Value:       1259 (int)

Constant:    ACT_MP_ATTACK_CROUCH_MELEE_ALLCLASS
Value:       1698 (int)

Constant:    ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY
Value:       1260 (int)

Constant:    ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY_ALLCLASS
Value:       1699 (int)

Constant:    ACT_MP_ATTACK_CROUCH_POSTFIRE
Value:       1116 (int)

Constant:    ACT_MP_ATTACK_CROUCH_PREFIRE
Value:       1115 (int)

Constant:    ACT_MP_ATTACK_CROUCH_PRIMARY
Value:       1136 (int)

Constant:    ACT_MP_ATTACK_CROUCH_PRIMARYFIRE
Value:       1090 (int)

Constant:    ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED
Value:       1091 (int)

Constant:    ACT_MP_ATTACK_CROUCH_PRIMARY_ALT
Value:       1165 (int)

Constant:    ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED
Value:       1137 (int)

Constant:    ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED_ITEM1
Value:       1289 (int)

Constant:    ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED_ITEM2
Value:       1315 (int)

Constant:    ACT_MP_ATTACK_CROUCH_PRIMARY_SUPER
Value:       1178 (int)

Constant:    ACT_MP_ATTACK_CROUCH_SECONDARY
Value:       1196 (int)

Constant:    ACT_MP_ATTACK_CROUCH_SECONDARY2
Value:       1231 (int)

Constant:    ACT_MP_ATTACK_CROUCH_SECONDARYFIRE
Value:       1092 (int)

Constant:    ACT_MP_ATTACK_STAND_BUILDING
Value:       1393 (int)

Constant:    ACT_MP_ATTACK_STAND_BUILDING_DEPLOYED
Value:       1412 (int)

Constant:    ACT_MP_ATTACK_STAND_GRENADE
Value:       1089 (int)

Constant:    ACT_MP_ATTACK_STAND_GRENADE_BUILDING
Value:       1397 (int)

Constant:    ACT_MP_ATTACK_STAND_GRENADE_BUILDING_DEPLOYED
Value:       1416 (int)

Constant:    ACT_MP_ATTACK_STAND_GRENADE_ITEM2
Value:       1329 (int)

Constant:    ACT_MP_ATTACK_STAND_GRENADE_MELEE
Value:       1263 (int)

Constant:    ACT_MP_ATTACK_STAND_GRENADE_PRIMARY
Value:       1180 (int)

Constant:    ACT_MP_ATTACK_STAND_GRENADE_SECONDARY
Value:       1215 (int)

Constant:    ACT_MP_ATTACK_STAND_HARD_ITEM2
Value:       1307 (int)

Constant:    ACT_MP_ATTACK_STAND_ITEM1
Value:       1278 (int)

Constant:    ACT_MP_ATTACK_STAND_ITEM1_SECONDARY
Value:       1279 (int)

Constant:    ACT_MP_ATTACK_STAND_ITEM2
Value:       1301 (int)

Constant:    ACT_MP_ATTACK_STAND_ITEM2_SECONDARY
Value:       1302 (int)

Constant:    ACT_MP_ATTACK_STAND_MELEE
Value:       1257 (int)

Constant:    ACT_MP_ATTACK_STAND_MELEE_ALLCLASS
Value:       1696 (int)

Constant:    ACT_MP_ATTACK_STAND_MELEE_SECONDARY
Value:       1258 (int)

Constant:    ACT_MP_ATTACK_STAND_MELEE_SECONDARY_ALLCLASS
Value:       1697 (int)

Constant:    ACT_MP_ATTACK_STAND_PDA
Value:       1431 (int)

Constant:    ACT_MP_ATTACK_STAND_POSTFIRE
Value:       1113 (int)

Constant:    ACT_MP_ATTACK_STAND_PREFIRE
Value:       1112 (int)

Constant:    ACT_MP_ATTACK_STAND_PRIMARY
Value:       1134 (int)

Constant:    ACT_MP_ATTACK_STAND_PRIMARYFIRE
Value:       1086 (int)

Constant:    ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED
Value:       1087 (int)

Constant:    ACT_MP_ATTACK_STAND_PRIMARY_ALT
Value:       1164 (int)

Constant:    ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED
Value:       1135 (int)

Constant:    ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED_ITEM1
Value:       1288 (int)

Constant:    ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED_ITEM2
Value:       1314 (int)

Constant:    ACT_MP_ATTACK_STAND_PRIMARY_SUPER
Value:       1177 (int)

Constant:    ACT_MP_ATTACK_STAND_SECONDARY
Value:       1195 (int)

Constant:    ACT_MP_ATTACK_STAND_SECONDARY2
Value:       1230 (int)

Constant:    ACT_MP_ATTACK_STAND_SECONDARYFIRE
Value:       1088 (int)

Constant:    ACT_MP_ATTACK_STAND_STARTFIRE
Value:       1114 (int)

Constant:    ACT_MP_ATTACK_SWIM_BUILDING
Value:       1395 (int)

Constant:    ACT_MP_ATTACK_SWIM_BUILDING_DEPLOYED
Value:       1414 (int)

Constant:    ACT_MP_ATTACK_SWIM_GRENADE
Value:       1096 (int)

Constant:    ACT_MP_ATTACK_SWIM_GRENADE_BUILDING
Value:       1399 (int)

Constant:    ACT_MP_ATTACK_SWIM_GRENADE_BUILDING_DEPLOYED
Value:       1418 (int)

Constant:    ACT_MP_ATTACK_SWIM_GRENADE_ITEM2
Value:       1331 (int)

Constant:    ACT_MP_ATTACK_SWIM_GRENADE_MELEE
Value:       1265 (int)

Constant:    ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY
Value:       1182 (int)

Constant:    ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY
Value:       1217 (int)

Constant:    ACT_MP_ATTACK_SWIM_HARD_ITEM2
Value:       1309 (int)

Constant:    ACT_MP_ATTACK_SWIM_ITEM1
Value:       1282 (int)

Constant:    ACT_MP_ATTACK_SWIM_ITEM2
Value:       1305 (int)

Constant:    ACT_MP_ATTACK_SWIM_MELEE
Value:       1261 (int)

Constant:    ACT_MP_ATTACK_SWIM_MELEE_ALLCLASS
Value:       1700 (int)

Constant:    ACT_MP_ATTACK_SWIM_PDA
Value:       1432 (int)

Constant:    ACT_MP_ATTACK_SWIM_POSTFIRE
Value:       1118 (int)

Constant:    ACT_MP_ATTACK_SWIM_PREFIRE
Value:       1117 (int)

Constant:    ACT_MP_ATTACK_SWIM_PRIMARY
Value:       1138 (int)

Constant:    ACT_MP_ATTACK_SWIM_PRIMARYFIRE
Value:       1094 (int)

Constant:    ACT_MP_ATTACK_SWIM_PRIMARY_ALT
Value:       1166 (int)

Constant:    ACT_MP_ATTACK_SWIM_PRIMARY_SUPER
Value:       1179 (int)

Constant:    ACT_MP_ATTACK_SWIM_SECONDARY
Value:       1197 (int)

Constant:    ACT_MP_ATTACK_SWIM_SECONDARY2
Value:       1232 (int)

Constant:    ACT_MP_ATTACK_SWIM_SECONDARYFIRE
Value:       1095 (int)

Constant:    ACT_MP_CROUCHWALK
Value:       1075 (int)

Constant:    ACT_MP_CROUCHWALK_BUILDING
Value:       1387 (int)

Constant:    ACT_MP_CROUCHWALK_BUILDING_DEPLOYED
Value:       1406 (int)

Constant:    ACT_MP_CROUCHWALK_DEPLOYED
Value:       1070 (int)

Constant:    ACT_MP_CROUCHWALK_DEPLOYED_ITEM1
Value:       1286 (int)

Constant:    ACT_MP_CROUCHWALK_DEPLOYED_ITEM2
Value:       1312 (int)

Constant:    ACT_MP_CROUCHWALK_DEPLOYED_PRIMARY
Value:       1132 (int)

Constant:    ACT_MP_CROUCHWALK_ITEM1
Value:       1272 (int)

Constant:    ACT_MP_CROUCHWALK_ITEM2
Value:       1295 (int)

Constant:    ACT_MP_CROUCHWALK_LOSERSTATE
Value:       1438 (int)

Constant:    ACT_MP_CROUCHWALK_MELEE
Value:       1251 (int)

Constant:    ACT_MP_CROUCHWALK_MELEE_ALLCLASS
Value:       1690 (int)

Constant:    ACT_MP_CROUCHWALK_PDA
Value:       1425 (int)

Constant:    ACT_MP_CROUCHWALK_PRIMARY
Value:       1124 (int)

Constant:    ACT_MP_CROUCHWALK_SECONDARY
Value:       1189 (int)

Constant:    ACT_MP_CROUCHWALK_SECONDARY2
Value:       1224 (int)

Constant:    ACT_MP_CROUCH_BUILDING
Value:       1383 (int)

Constant:    ACT_MP_CROUCH_BUILDING_DEPLOYED
Value:       1402 (int)

Constant:    ACT_MP_CROUCH_DEPLOYED
Value:       1069 (int)

Constant:    ACT_MP_CROUCH_DEPLOYED_IDLE
Value:       1068 (int)

Constant:    ACT_MP_CROUCH_DEPLOYED_IDLE_ITEM1
Value:       1287 (int)

Constant:    ACT_MP_CROUCH_DEPLOYED_IDLE_ITEM2
Value:       1313 (int)

Constant:    ACT_MP_CROUCH_DEPLOYED_IDLE_PRIMARY
Value:       1133 (int)

Constant:    ACT_MP_CROUCH_IDLE
Value:       1067 (int)

Constant:    ACT_MP_CROUCH_ITEM1
Value:       1268 (int)

Constant:    ACT_MP_CROUCH_ITEM2
Value:       1291 (int)

Constant:    ACT_MP_CROUCH_LOSERSTATE
Value:       1434 (int)

Constant:    ACT_MP_CROUCH_MELEE
Value:       1247 (int)

Constant:    ACT_MP_CROUCH_MELEE_ALLCLASS
Value:       1686 (int)

Constant:    ACT_MP_CROUCH_PDA
Value:       1421 (int)

Constant:    ACT_MP_CROUCH_PRIMARY
Value:       1120 (int)

Constant:    ACT_MP_CROUCH_SECONDARY
Value:       1185 (int)

Constant:    ACT_MP_CROUCH_SECONDARY2
Value:       1220 (int)

Constant:    ACT_MP_DEPLOYED
Value:       1083 (int)

Constant:    ACT_MP_DEPLOYED_IDLE
Value:       1071 (int)

Constant:    ACT_MP_DEPLOYED_IDLE_ITEM1
Value:       1285 (int)

Constant:    ACT_MP_DEPLOYED_IDLE_ITEM2
Value:       1311 (int)

Constant:    ACT_MP_DEPLOYED_ITEM1
Value:       1284 (int)

Constant:    ACT_MP_DEPLOYED_ITEM2
Value:       1310 (int)

Constant:    ACT_MP_DEPLOYED_PRIMARY
Value:       1130 (int)

Constant:    ACT_MP_DOUBLEJUMP
Value:       1081 (int)

Constant:    ACT_MP_DOUBLEJUMP_CROUCH
Value:       1445 (int)

Constant:    ACT_MP_DOUBLEJUMP_CROUCH_ITEM1
Value:       1449 (int)

Constant:    ACT_MP_DOUBLEJUMP_CROUCH_ITEM2
Value:       1450 (int)

Constant:    ACT_MP_DOUBLEJUMP_CROUCH_LOSERSTATE
Value:       1451 (int)

Constant:    ACT_MP_DOUBLEJUMP_CROUCH_MELEE
Value:       1448 (int)

Constant:    ACT_MP_DOUBLEJUMP_CROUCH_PRIMARY
Value:       1446 (int)

Constant:    ACT_MP_DOUBLEJUMP_CROUCH_SECONDARY
Value:       1447 (int)

Constant:    ACT_MP_DOUBLEJUMP_LOSERSTATE
Value:       1444 (int)

Constant:    ACT_MP_GESTURE_FLINCH
Value:       1333 (int)

Constant:    ACT_MP_GESTURE_FLINCH_CHEST
Value:       1340 (int)

Constant:    ACT_MP_GESTURE_FLINCH_HEAD
Value:       1339 (int)

Constant:    ACT_MP_GESTURE_FLINCH_ITEM1
Value:       1337 (int)

Constant:    ACT_MP_GESTURE_FLINCH_ITEM2
Value:       1338 (int)

Constant:    ACT_MP_GESTURE_FLINCH_LEFTARM
Value:       1342 (int)

Constant:    ACT_MP_GESTURE_FLINCH_LEFTLEG
Value:       1344 (int)

Constant:    ACT_MP_GESTURE_FLINCH_MELEE
Value:       1336 (int)

Constant:    ACT_MP_GESTURE_FLINCH_PRIMARY
Value:       1334 (int)

Constant:    ACT_MP_GESTURE_FLINCH_RIGHTARM
Value:       1343 (int)

Constant:    ACT_MP_GESTURE_FLINCH_RIGHTLEG
Value:       1345 (int)

Constant:    ACT_MP_GESTURE_FLINCH_SECONDARY
Value:       1335 (int)

Constant:    ACT_MP_GESTURE_FLINCH_STOMACH
Value:       1341 (int)

Constant:    ACT_MP_GESTURE_VC_FINGERPOINT
Value:       1453 (int)

Constant:    ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING
Value:       1489 (int)

Constant:    ACT_MP_GESTURE_VC_FINGERPOINT_ITEM1
Value:       1477 (int)

Constant:    ACT_MP_GESTURE_VC_FINGERPOINT_ITEM2
Value:       1483 (int)

Constant:    ACT_MP_GESTURE_VC_FINGERPOINT_MELEE
Value:       1471 (int)

Constant:    ACT_MP_GESTURE_VC_FINGERPOINT_PDA
Value:       1495 (int)

Constant:    ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY
Value:       1459 (int)

Constant:    ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY
Value:       1465 (int)

Constant:    ACT_MP_GESTURE_VC_FISTPUMP
Value:       1454 (int)

Constant:    ACT_MP_GESTURE_VC_FISTPUMP_BUILDING
Value:       1490 (int)

Constant:    ACT_MP_GESTURE_VC_FISTPUMP_ITEM1
Value:       1478 (int)

Constant:    ACT_MP_GESTURE_VC_FISTPUMP_ITEM2
Value:       1484 (int)

Constant:    ACT_MP_GESTURE_VC_FISTPUMP_MELEE
Value:       1472 (int)

Constant:    ACT_MP_GESTURE_VC_FISTPUMP_PDA
Value:       1496 (int)

Constant:    ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY
Value:       1460 (int)

Constant:    ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY
Value:       1466 (int)

Constant:    ACT_MP_GESTURE_VC_HANDMOUTH
Value:       1452 (int)

Constant:    ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING
Value:       1488 (int)

Constant:    ACT_MP_GESTURE_VC_HANDMOUTH_ITEM1
Value:       1476 (int)

Constant:    ACT_MP_GESTURE_VC_HANDMOUTH_ITEM2
Value:       1482 (int)

Constant:    ACT_MP_GESTURE_VC_HANDMOUTH_MELEE
Value:       1470 (int)

Constant:    ACT_MP_GESTURE_VC_HANDMOUTH_PDA
Value:       1494 (int)

Constant:    ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY
Value:       1458 (int)

Constant:    ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY
Value:       1464 (int)

Constant:    ACT_MP_GESTURE_VC_NODNO
Value:       1457 (int)

Constant:    ACT_MP_GESTURE_VC_NODNO_BUILDING
Value:       1493 (int)

Constant:    ACT_MP_GESTURE_VC_NODNO_ITEM1
Value:       1481 (int)

Constant:    ACT_MP_GESTURE_VC_NODNO_ITEM2
Value:       1487 (int)

Constant:    ACT_MP_GESTURE_VC_NODNO_MELEE
Value:       1475 (int)

Constant:    ACT_MP_GESTURE_VC_NODNO_PDA
Value:       1499 (int)

Constant:    ACT_MP_GESTURE_VC_NODNO_PRIMARY
Value:       1463 (int)

Constant:    ACT_MP_GESTURE_VC_NODNO_SECONDARY
Value:       1469 (int)

Constant:    ACT_MP_GESTURE_VC_NODYES
Value:       1456 (int)

Constant:    ACT_MP_GESTURE_VC_NODYES_BUILDING
Value:       1492 (int)

Constant:    ACT_MP_GESTURE_VC_NODYES_ITEM1
Value:       1480 (int)

Constant:    ACT_MP_GESTURE_VC_NODYES_ITEM2
Value:       1486 (int)

Constant:    ACT_MP_GESTURE_VC_NODYES_MELEE
Value:       1474 (int)

Constant:    ACT_MP_GESTURE_VC_NODYES_PDA
Value:       1498 (int)

Constant:    ACT_MP_GESTURE_VC_NODYES_PRIMARY
Value:       1462 (int)

Constant:    ACT_MP_GESTURE_VC_NODYES_SECONDARY
Value:       1468 (int)

Constant:    ACT_MP_GESTURE_VC_THUMBSUP
Value:       1455 (int)

Constant:    ACT_MP_GESTURE_VC_THUMBSUP_BUILDING
Value:       1491 (int)

Constant:    ACT_MP_GESTURE_VC_THUMBSUP_ITEM1
Value:       1479 (int)

Constant:    ACT_MP_GESTURE_VC_THUMBSUP_ITEM2
Value:       1485 (int)

Constant:    ACT_MP_GESTURE_VC_THUMBSUP_MELEE
Value:       1473 (int)

Constant:    ACT_MP_GESTURE_VC_THUMBSUP_PDA
Value:       1497 (int)

Constant:    ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY
Value:       1461 (int)

Constant:    ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY
Value:       1467 (int)

Constant:    ACT_MP_GRENADE1_ATTACK
Value:       1348 (int)

Constant:    ACT_MP_GRENADE1_DRAW
Value:       1346 (int)

Constant:    ACT_MP_GRENADE1_IDLE
Value:       1347 (int)

Constant:    ACT_MP_GRENADE2_ATTACK
Value:       1351 (int)

Constant:    ACT_MP_GRENADE2_DRAW
Value:       1349 (int)

Constant:    ACT_MP_GRENADE2_IDLE
Value:       1350 (int)

Constant:    ACT_MP_ITEM1_GRENADE1_ATTACK
Value:       1372 (int)

Constant:    ACT_MP_ITEM1_GRENADE1_DRAW
Value:       1370 (int)

Constant:    ACT_MP_ITEM1_GRENADE1_IDLE
Value:       1371 (int)

Constant:    ACT_MP_ITEM1_GRENADE2_ATTACK
Value:       1375 (int)

Constant:    ACT_MP_ITEM1_GRENADE2_DRAW
Value:       1373 (int)

Constant:    ACT_MP_ITEM1_GRENADE2_IDLE
Value:       1374 (int)

Constant:    ACT_MP_ITEM2_GRENADE1_ATTACK
Value:       1378 (int)

Constant:    ACT_MP_ITEM2_GRENADE1_DRAW
Value:       1376 (int)

Constant:    ACT_MP_ITEM2_GRENADE1_IDLE
Value:       1377 (int)

Constant:    ACT_MP_ITEM2_GRENADE2_ATTACK
Value:       1381 (int)

Constant:    ACT_MP_ITEM2_GRENADE2_DRAW
Value:       1379 (int)

Constant:    ACT_MP_ITEM2_GRENADE2_IDLE
Value:       1380 (int)

Constant:    ACT_MP_JUMP
Value:       1077 (int)

Constant:    ACT_MP_JUMP_BUILDING
Value:       1388 (int)

Constant:    ACT_MP_JUMP_BUILDING_DEPLOYED
Value:       1407 (int)

Constant:    ACT_MP_JUMP_FLOAT
Value:       1079 (int)

Constant:    ACT_MP_JUMP_FLOAT_BOMB
Value:       1718 (int)

Constant:    ACT_MP_JUMP_FLOAT_BUILDING
Value:       1390 (int)

Constant:    ACT_MP_JUMP_FLOAT_BUILDING_DEPLOYED
Value:       1409 (int)

Constant:    ACT_MP_JUMP_FLOAT_ITEM1
Value:       1275 (int)

Constant:    ACT_MP_JUMP_FLOAT_ITEM2
Value:       1298 (int)

Constant:    ACT_MP_JUMP_FLOAT_LOSERSTATE
Value:       1441 (int)

Constant:    ACT_MP_JUMP_FLOAT_MELEE
Value:       1254 (int)

Constant:    ACT_MP_JUMP_FLOAT_MELEE_ALLCLASS
Value:       1693 (int)

Constant:    ACT_MP_JUMP_FLOAT_PDA
Value:       1428 (int)

Constant:    ACT_MP_JUMP_FLOAT_PRIMARY
Value:       1127 (int)

Constant:    ACT_MP_JUMP_FLOAT_SECONDARY
Value:       1192 (int)

Constant:    ACT_MP_JUMP_FLOAT_SECONDARY2
Value:       1227 (int)

Constant:    ACT_MP_JUMP_ITEM1
Value:       1273 (int)

Constant:    ACT_MP_JUMP_ITEM2
Value:       1296 (int)

Constant:    ACT_MP_JUMP_LAND
Value:       1080 (int)

Constant:    ACT_MP_JUMP_LAND_BOMB
Value:       1719 (int)

Constant:    ACT_MP_JUMP_LAND_BUILDING
Value:       1391 (int)

Constant:    ACT_MP_JUMP_LAND_BUILDING_DEPLOYED
Value:       1410 (int)

Constant:    ACT_MP_JUMP_LAND_ITEM1
Value:       1276 (int)

Constant:    ACT_MP_JUMP_LAND_ITEM2
Value:       1299 (int)

Constant:    ACT_MP_JUMP_LAND_LOSERSTATE
Value:       1442 (int)

Constant:    ACT_MP_JUMP_LAND_MELEE
Value:       1255 (int)

Constant:    ACT_MP_JUMP_LAND_MELEE_ALLCLASS
Value:       1694 (int)

Constant:    ACT_MP_JUMP_LAND_PDA
Value:       1429 (int)

Constant:    ACT_MP_JUMP_LAND_PRIMARY
Value:       1128 (int)

Constant:    ACT_MP_JUMP_LAND_SECONDARY
Value:       1193 (int)

Constant:    ACT_MP_JUMP_LAND_SECONDARY2
Value:       1228 (int)

Constant:    ACT_MP_JUMP_LOSERSTATE
Value:       1439 (int)

Constant:    ACT_MP_JUMP_MELEE
Value:       1252 (int)

Constant:    ACT_MP_JUMP_MELEE_ALLCLASS
Value:       1691 (int)

Constant:    ACT_MP_JUMP_PDA
Value:       1426 (int)

Constant:    ACT_MP_JUMP_PRIMARY
Value:       1125 (int)

Constant:    ACT_MP_JUMP_SECONDARY
Value:       1190 (int)

Constant:    ACT_MP_JUMP_SECONDARY2
Value:       1225 (int)

Constant:    ACT_MP_JUMP_START
Value:       1078 (int)

Constant:    ACT_MP_JUMP_START_BOMB
Value:       1717 (int)

Constant:    ACT_MP_JUMP_START_BUILDING
Value:       1389 (int)

Constant:    ACT_MP_JUMP_START_BUILDING_DEPLOYED
Value:       1408 (int)

Constant:    ACT_MP_JUMP_START_ITEM1
Value:       1274 (int)

Constant:    ACT_MP_JUMP_START_ITEM2
Value:       1297 (int)

Constant:    ACT_MP_JUMP_START_LOSERSTATE
Value:       1440 (int)

Constant:    ACT_MP_JUMP_START_MELEE
Value:       1253 (int)

Constant:    ACT_MP_JUMP_START_MELEE_ALLCLASS
Value:       1692 (int)

Constant:    ACT_MP_JUMP_START_PDA
Value:       1427 (int)

Constant:    ACT_MP_JUMP_START_PRIMARY
Value:       1126 (int)

Constant:    ACT_MP_JUMP_START_SECONDARY
Value:       1191 (int)

Constant:    ACT_MP_JUMP_START_SECONDARY2
Value:       1226 (int)

Constant:    ACT_MP_MELEE_GRENADE1_ATTACK
Value:       1366 (int)

Constant:    ACT_MP_MELEE_GRENADE1_DRAW
Value:       1364 (int)

Constant:    ACT_MP_MELEE_GRENADE1_IDLE
Value:       1365 (int)

Constant:    ACT_MP_MELEE_GRENADE2_ATTACK
Value:       1369 (int)

Constant:    ACT_MP_MELEE_GRENADE2_DRAW
Value:       1367 (int)

Constant:    ACT_MP_MELEE_GRENADE2_IDLE
Value:       1368 (int)

Constant:    ACT_MP_PRIMARY_GRENADE1_ATTACK
Value:       1354 (int)

Constant:    ACT_MP_PRIMARY_GRENADE1_DRAW
Value:       1352 (int)

Constant:    ACT_MP_PRIMARY_GRENADE1_IDLE
Value:       1353 (int)

Constant:    ACT_MP_PRIMARY_GRENADE2_ATTACK
Value:       1357 (int)

Constant:    ACT_MP_PRIMARY_GRENADE2_DRAW
Value:       1355 (int)

Constant:    ACT_MP_PRIMARY_GRENADE2_IDLE
Value:       1356 (int)

Constant:    ACT_MP_RELOAD_AIRWALK
Value:       1109 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_END
Value:       1111 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_ITEM2
Value:       1325 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_ITEM2_END
Value:       1327 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_ITEM2_LOOP
Value:       1326 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_LOOP
Value:       1110 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_PRIMARY
Value:       1149 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_PRIMARY3
Value:       1731 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_PRIMARY3_END
Value:       1737 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_PRIMARY3_LOOP
Value:       1734 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_PRIMARY_2
Value:       1161 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_PRIMARY_ALT
Value:       1169 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_PRIMARY_END
Value:       1151 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_PRIMARY_END_2
Value:       1163 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_PRIMARY_END_ALT
Value:       1175 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP
Value:       1150 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP_2
Value:       1162 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP_ALT
Value:       1172 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_SECONDARY
Value:       1208 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_SECONDARY2
Value:       1243 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_SECONDARY2_END
Value:       1245 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_SECONDARY2_LOOP
Value:       1244 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_SECONDARY_2
Value:       1214 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_SECONDARY_END
Value:       1210 (int)

Constant:    ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP
Value:       1209 (int)

Constant:    ACT_MP_RELOAD_CROUCH
Value:       1103 (int)

Constant:    ACT_MP_RELOAD_CROUCH_END
Value:       1105 (int)

Constant:    ACT_MP_RELOAD_CROUCH_ITEM2
Value:       1319 (int)

Constant:    ACT_MP_RELOAD_CROUCH_ITEM2_END
Value:       1321 (int)

Constant:    ACT_MP_RELOAD_CROUCH_ITEM2_LOOP
Value:       1320 (int)

Constant:    ACT_MP_RELOAD_CROUCH_LOOP
Value:       1104 (int)

Constant:    ACT_MP_RELOAD_CROUCH_PRIMARY
Value:       1143 (int)

Constant:    ACT_MP_RELOAD_CROUCH_PRIMARY3
Value:       1730 (int)

Constant:    ACT_MP_RELOAD_CROUCH_PRIMARY3_END
Value:       1736 (int)

Constant:    ACT_MP_RELOAD_CROUCH_PRIMARY3_LOOP
Value:       1733 (int)

Constant:    ACT_MP_RELOAD_CROUCH_PRIMARY_2
Value:       1155 (int)

Constant:    ACT_MP_RELOAD_CROUCH_PRIMARY_ALT
Value:       1168 (int)

Constant:    ACT_MP_RELOAD_CROUCH_PRIMARY_END
Value:       1145 (int)

Constant:    ACT_MP_RELOAD_CROUCH_PRIMARY_END_2
Value:       1157 (int)

Constant:    ACT_MP_RELOAD_CROUCH_PRIMARY_END_ALT
Value:       1174 (int)

Constant:    ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP
Value:       1144 (int)

Constant:    ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP_2
Value:       1156 (int)

Constant:    ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP_ALT
Value:       1171 (int)

Constant:    ACT_MP_RELOAD_CROUCH_SECONDARY
Value:       1202 (int)

Constant:    ACT_MP_RELOAD_CROUCH_SECONDARY2
Value:       1237 (int)

Constant:    ACT_MP_RELOAD_CROUCH_SECONDARY2_END
Value:       1239 (int)

Constant:    ACT_MP_RELOAD_CROUCH_SECONDARY2_LOOP
Value:       1238 (int)

Constant:    ACT_MP_RELOAD_CROUCH_SECONDARY_2
Value:       1212 (int)

Constant:    ACT_MP_RELOAD_CROUCH_SECONDARY_END
Value:       1204 (int)

Constant:    ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP
Value:       1203 (int)

Constant:    ACT_MP_RELOAD_NO_AMMO_ITEM2
Value:       1328 (int)

Constant:    ACT_MP_RELOAD_STAND
Value:       1100 (int)

Constant:    ACT_MP_RELOAD_STAND_END
Value:       1102 (int)

Constant:    ACT_MP_RELOAD_STAND_ITEM2
Value:       1316 (int)

Constant:    ACT_MP_RELOAD_STAND_ITEM2_END
Value:       1318 (int)

Constant:    ACT_MP_RELOAD_STAND_ITEM2_LOOP
Value:       1317 (int)

Constant:    ACT_MP_RELOAD_STAND_LOOP
Value:       1101 (int)

Constant:    ACT_MP_RELOAD_STAND_PRIMARY
Value:       1140 (int)

Constant:    ACT_MP_RELOAD_STAND_PRIMARY3
Value:       1729 (int)

Constant:    ACT_MP_RELOAD_STAND_PRIMARY3_END
Value:       1735 (int)

Constant:    ACT_MP_RELOAD_STAND_PRIMARY3_LOOP
Value:       1732 (int)

Constant:    ACT_MP_RELOAD_STAND_PRIMARY_2
Value:       1152 (int)

Constant:    ACT_MP_RELOAD_STAND_PRIMARY_ALT
Value:       1167 (int)

Constant:    ACT_MP_RELOAD_STAND_PRIMARY_END
Value:       1142 (int)

Constant:    ACT_MP_RELOAD_STAND_PRIMARY_END_2
Value:       1154 (int)

Constant:    ACT_MP_RELOAD_STAND_PRIMARY_END_ALT
Value:       1173 (int)

Constant:    ACT_MP_RELOAD_STAND_PRIMARY_LOOP
Value:       1141 (int)

Constant:    ACT_MP_RELOAD_STAND_PRIMARY_LOOP_2
Value:       1153 (int)

Constant:    ACT_MP_RELOAD_STAND_PRIMARY_LOOP_ALT
Value:       1170 (int)

Constant:    ACT_MP_RELOAD_STAND_SECONDARY
Value:       1199 (int)

Constant:    ACT_MP_RELOAD_STAND_SECONDARY2
Value:       1234 (int)

Constant:    ACT_MP_RELOAD_STAND_SECONDARY2_END
Value:       1236 (int)

Constant:    ACT_MP_RELOAD_STAND_SECONDARY2_LOOP
Value:       1235 (int)

Constant:    ACT_MP_RELOAD_STAND_SECONDARY_2
Value:       1211 (int)

Constant:    ACT_MP_RELOAD_STAND_SECONDARY_END
Value:       1201 (int)

Constant:    ACT_MP_RELOAD_STAND_SECONDARY_LOOP
Value:       1200 (int)

Constant:    ACT_MP_RELOAD_SWIM
Value:       1106 (int)

Constant:    ACT_MP_RELOAD_SWIM_END
Value:       1108 (int)

Constant:    ACT_MP_RELOAD_SWIM_ITEM2
Value:       1322 (int)

Constant:    ACT_MP_RELOAD_SWIM_ITEM2_END
Value:       1324 (int)

Constant:    ACT_MP_RELOAD_SWIM_ITEM2_LOOP
Value:       1323 (int)

Constant:    ACT_MP_RELOAD_SWIM_LOOP
Value:       1107 (int)

Constant:    ACT_MP_RELOAD_SWIM_PRIMARY
Value:       1146 (int)

Constant:    ACT_MP_RELOAD_SWIM_PRIMARY3
Value:       1738 (int)

Constant:    ACT_MP_RELOAD_SWIM_PRIMARY_2
Value:       1158 (int)

Constant:    ACT_MP_RELOAD_SWIM_PRIMARY_ALT
Value:       1176 (int)

Constant:    ACT_MP_RELOAD_SWIM_PRIMARY_END
Value:       1148 (int)

Constant:    ACT_MP_RELOAD_SWIM_PRIMARY_END_2
Value:       1160 (int)

Constant:    ACT_MP_RELOAD_SWIM_PRIMARY_LOOP
Value:       1147 (int)

Constant:    ACT_MP_RELOAD_SWIM_PRIMARY_LOOP_2
Value:       1159 (int)

Constant:    ACT_MP_RELOAD_SWIM_SECONDARY
Value:       1205 (int)

Constant:    ACT_MP_RELOAD_SWIM_SECONDARY2
Value:       1240 (int)

Constant:    ACT_MP_RELOAD_SWIM_SECONDARY2_END
Value:       1242 (int)

Constant:    ACT_MP_RELOAD_SWIM_SECONDARY2_LOOP
Value:       1241 (int)

Constant:    ACT_MP_RELOAD_SWIM_SECONDARY_2
Value:       1213 (int)

Constant:    ACT_MP_RELOAD_SWIM_SECONDARY_END
Value:       1207 (int)

Constant:    ACT_MP_RELOAD_SWIM_SECONDARY_LOOP
Value:       1206 (int)

Constant:    ACT_MP_RUN
Value:       1072 (int)

Constant:    ACT_MP_RUN_BOMB
Value:       1720 (int)

Constant:    ACT_MP_RUN_BUILDING
Value:       1384 (int)

Constant:    ACT_MP_RUN_BUILDING_DEPLOYED
Value:       1403 (int)

Constant:    ACT_MP_RUN_ITEM1
Value:       1269 (int)

Constant:    ACT_MP_RUN_ITEM2
Value:       1292 (int)

Constant:    ACT_MP_RUN_LOSERSTATE
Value:       1435 (int)

Constant:    ACT_MP_RUN_MELEE
Value:       1248 (int)

Constant:    ACT_MP_RUN_MELEE_ALLCLASS
Value:       1687 (int)

Constant:    ACT_MP_RUN_PDA
Value:       1422 (int)

Constant:    ACT_MP_RUN_PRIMARY
Value:       1121 (int)

Constant:    ACT_MP_RUN_SECONDARY
Value:       1186 (int)

Constant:    ACT_MP_RUN_SECONDARY2
Value:       1221 (int)

Constant:    ACT_MP_SECONDARY_GRENADE1_ATTACK
Value:       1360 (int)

Constant:    ACT_MP_SECONDARY_GRENADE1_DRAW
Value:       1358 (int)

Constant:    ACT_MP_SECONDARY_GRENADE1_IDLE
Value:       1359 (int)

Constant:    ACT_MP_SECONDARY_GRENADE2_ATTACK
Value:       1363 (int)

Constant:    ACT_MP_SECONDARY_GRENADE2_DRAW
Value:       1361 (int)

Constant:    ACT_MP_SECONDARY_GRENADE2_IDLE
Value:       1362 (int)

Constant:    ACT_MP_SPRINT
Value:       1076 (int)

Constant:    ACT_MP_STAND_BOMB
Value:       1716 (int)

Constant:    ACT_MP_STAND_BUILDING
Value:       1382 (int)

Constant:    ACT_MP_STAND_BUILDING_DEPLOYED
Value:       1401 (int)

Constant:    ACT_MP_STAND_IDLE
Value:       1066 (int)

Constant:    ACT_MP_STAND_ITEM1
Value:       1267 (int)

Constant:    ACT_MP_STAND_ITEM2
Value:       1290 (int)

Constant:    ACT_MP_STAND_LOSERSTATE
Value:       1433 (int)

Constant:    ACT_MP_STAND_MELEE
Value:       1246 (int)

Constant:    ACT_MP_STAND_MELEE_ALLCLASS
Value:       1685 (int)

Constant:    ACT_MP_STAND_PDA
Value:       1420 (int)

Constant:    ACT_MP_STAND_PRIMARY
Value:       1119 (int)

Constant:    ACT_MP_STAND_SECONDARY
Value:       1184 (int)

Constant:    ACT_MP_STAND_SECONDARY2
Value:       1219 (int)

Constant:    ACT_MP_STUN_BEGIN
Value:       1500 (int)

Constant:    ACT_MP_STUN_END
Value:       1502 (int)

Constant:    ACT_MP_STUN_MIDDLE
Value:       1501 (int)

Constant:    ACT_MP_SWIM
Value:       1082 (int)

Constant:    ACT_MP_SWIM_BOMB
Value:       1721 (int)

Constant:    ACT_MP_SWIM_BUILDING
Value:       1392 (int)

Constant:    ACT_MP_SWIM_BUILDING_DEPLOYED
Value:       1411 (int)

Constant:    ACT_MP_SWIM_DEPLOYED
Value:       1084 (int)

Constant:    ACT_MP_SWIM_DEPLOYED_PRIMARY
Value:       1131 (int)

Constant:    ACT_MP_SWIM_ITEM1
Value:       1277 (int)

Constant:    ACT_MP_SWIM_ITEM2
Value:       1300 (int)

Constant:    ACT_MP_SWIM_LOSERSTATE
Value:       1443 (int)

Constant:    ACT_MP_SWIM_MELEE
Value:       1256 (int)

Constant:    ACT_MP_SWIM_MELEE_ALLCLASS
Value:       1695 (int)

Constant:    ACT_MP_SWIM_PDA
Value:       1430 (int)

Constant:    ACT_MP_SWIM_PRIMARY
Value:       1129 (int)

Constant:    ACT_MP_SWIM_SECONDARY
Value:       1194 (int)

Constant:    ACT_MP_SWIM_SECONDARY2
Value:       1229 (int)

Constant:    ACT_MP_THROW
Value:       1739 (int)

Constant:    ACT_MP_VCD
Value:       1085 (int)

Constant:    ACT_MP_WALK
Value:       1073 (int)

Constant:    ACT_MP_WALK_BUILDING
Value:       1385 (int)

Constant:    ACT_MP_WALK_BUILDING_DEPLOYED
Value:       1404 (int)

Constant:    ACT_MP_WALK_ITEM1
Value:       1270 (int)

Constant:    ACT_MP_WALK_ITEM2
Value:       1293 (int)

Constant:    ACT_MP_WALK_LOSERSTATE
Value:       1436 (int)

Constant:    ACT_MP_WALK_MELEE
Value:       1249 (int)

Constant:    ACT_MP_WALK_MELEE_ALLCLASS
Value:       1688 (int)

Constant:    ACT_MP_WALK_PDA
Value:       1423 (int)

Constant:    ACT_MP_WALK_PRIMARY
Value:       1122 (int)

Constant:    ACT_MP_WALK_SECONDARY
Value:       1187 (int)

Constant:    ACT_MP_WALK_SECONDARY2
Value:       1222 (int)

Constant:    ACT_NEUTRAL_AR1_RELAXED
Value:       1961 (int)

Constant:    ACT_NEUTRAL_AR2_RELAXED
Value:       1956 (int)

Constant:    ACT_NEUTRAL_CROSSBOW_RELAXED
Value:       1957 (int)

Constant:    ACT_NEUTRAL_SMG1_RELAXED
Value:       1955 (int)

Constant:    ACT_NEUTRAL_SMG2_RELAXED
Value:       1972 (int)

Constant:    ACT_OBJ_ASSEMBLING
Value:       461 (int)

Constant:    ACT_OBJ_DETERIORATING
Value:       467 (int)

Constant:    ACT_OBJ_DISMANTLING
Value:       462 (int)

Constant:    ACT_OBJ_IDLE
Value:       465 (int)

Constant:    ACT_OBJ_PLACING
Value:       466 (int)

Constant:    ACT_OBJ_RUNNING
Value:       464 (int)

Constant:    ACT_OBJ_STARTUP
Value:       463 (int)

Constant:    ACT_OBJ_UPGRADING
Value:       468 (int)

Constant:    ACT_OPEN_DOOR
Value:       410 (int)

Constant:    ACT_OVERLAY_GRENADEIDLE
Value:       440 (int)

Constant:    ACT_OVERLAY_GRENADEREADY
Value:       441 (int)

Constant:    ACT_OVERLAY_PRIMARYATTACK
Value:       442 (int)

Constant:    ACT_OVERLAY_SHIELD_ATTACK
Value:       446 (int)

Constant:    ACT_OVERLAY_SHIELD_DOWN
Value:       444 (int)

Constant:    ACT_OVERLAY_SHIELD_KNOCKBACK
Value:       447 (int)

Constant:    ACT_OVERLAY_SHIELD_UP
Value:       443 (int)

Constant:    ACT_OVERLAY_SHIELD_UP_IDLE
Value:       445 (int)

Constant:    ACT_PDA_VM_DRAW
Value:       1558 (int)

Constant:    ACT_PDA_VM_DRYFIRE
Value:       1565 (int)

Constant:    ACT_PDA_VM_HOLSTER
Value:       1559 (int)

Constant:    ACT_PDA_VM_IDLE
Value:       1560 (int)

Constant:    ACT_PDA_VM_IDLE_LOWERED
Value:       1567 (int)

Constant:    ACT_PDA_VM_IDLE_TO_LOWERED
Value:       1566 (int)

Constant:    ACT_PDA_VM_LOWERED_TO_IDLE
Value:       1568 (int)

Constant:    ACT_PDA_VM_PRIMARYATTACK
Value:       1562 (int)

Constant:    ACT_PDA_VM_PULLBACK
Value:       1561 (int)

Constant:    ACT_PDA_VM_RELOAD
Value:       1564 (int)

Constant:    ACT_PDA_VM_SECONDARYATTACK
Value:       1563 (int)

Constant:    ACT_PHYSCANNON_ANIMATE
Value:       403 (int)

Constant:    ACT_PHYSCANNON_ANIMATE_POST
Value:       405 (int)

Constant:    ACT_PHYSCANNON_ANIMATE_PRE
Value:       404 (int)

Constant:    ACT_PHYSCANNON_DETACH
Value:       402 (int)

Constant:    ACT_PHYSCANNON_UPGRADE
Value:       276 (int)

Constant:    ACT_PICKUP_GROUND
Value:       73 (int)

Constant:    ACT_PICKUP_RACK
Value:       74 (int)

Constant:    ACT_PLAYER_CROUCH_FIRE
Value:       500 (int)

Constant:    ACT_PLAYER_CROUCH_WALK_FIRE
Value:       501 (int)

Constant:    ACT_PLAYER_IDLE_FIRE
Value:       499 (int)

Constant:    ACT_PLAYER_RUN_FIRE
Value:       503 (int)

Constant:    ACT_PLAYER_WALK_FIRE
Value:       502 (int)

Constant:    ACT_POLICE_HARASS1
Value:       342 (int)

Constant:    ACT_POLICE_HARASS2
Value:       343 (int)

Constant:    ACT_PRIMARY_ATTACK_CROUCH_POSTFIRE
Value:       1654 (int)

Constant:    ACT_PRIMARY_ATTACK_CROUCH_PREFIRE
Value:       1653 (int)

Constant:    ACT_PRIMARY_ATTACK_STAND_POSTFIRE
Value:       1651 (int)

Constant:    ACT_PRIMARY_ATTACK_STAND_PREFIRE
Value:       1650 (int)

Constant:    ACT_PRIMARY_ATTACK_STAND_STARTFIRE
Value:       1652 (int)

Constant:    ACT_PRIMARY_ATTACK_SWIM_POSTFIRE
Value:       1656 (int)

Constant:    ACT_PRIMARY_ATTACK_SWIM_PREFIRE
Value:       1655 (int)

Constant:    ACT_PRIMARY_RELOAD_FINISH
Value:       1514 (int)

Constant:    ACT_PRIMARY_RELOAD_FINISH_2
Value:       1521 (int)

Constant:    ACT_PRIMARY_RELOAD_FINISH_3
Value:       1524 (int)

Constant:    ACT_PRIMARY_RELOAD_START
Value:       1513 (int)

Constant:    ACT_PRIMARY_RELOAD_START_2
Value:       1520 (int)

Constant:    ACT_PRIMARY_RELOAD_START_3
Value:       1523 (int)

Constant:    ACT_PRIMARY_VM_DRAW
Value:       1506 (int)

Constant:    ACT_PRIMARY_VM_DRYFIRE
Value:       1515 (int)

Constant:    ACT_PRIMARY_VM_HOLSTER
Value:       1507 (int)

Constant:    ACT_PRIMARY_VM_IDLE
Value:       1508 (int)

Constant:    ACT_PRIMARY_VM_IDLE_LOWERED
Value:       1517 (int)

Constant:    ACT_PRIMARY_VM_IDLE_TO_LOWERED
Value:       1516 (int)

Constant:    ACT_PRIMARY_VM_LOWERED_TO_IDLE
Value:       1518 (int)

Constant:    ACT_PRIMARY_VM_PRIMARYATTACK
Value:       1510 (int)

Constant:    ACT_PRIMARY_VM_PRIMARYATTACK_3
Value:       1525 (int)

Constant:    ACT_PRIMARY_VM_PULLBACK
Value:       1509 (int)

Constant:    ACT_PRIMARY_VM_RELOAD
Value:       1512 (int)

Constant:    ACT_PRIMARY_VM_RELOAD_2
Value:       1519 (int)

Constant:    ACT_PRIMARY_VM_RELOAD_3
Value:       1522 (int)

Constant:    ACT_PRIMARY_VM_SECONDARYATTACK
Value:       1511 (int)

Constant:    ACT_PRONE_FORWARD
Value:       511 (int)

Constant:    ACT_PRONE_IDLE
Value:       512 (int)

Constant:    ACT_RANGE_AIM_AR2_LOW
Value:       299 (int)

Constant:    ACT_RANGE_AIM_AR2_MED
Value:       1877 (int)

Constant:    ACT_RANGE_AIM_CROSSBOW_LOW
Value:       1804 (int)

Constant:    ACT_RANGE_AIM_CROSSBOW_MED
Value:       1883 (int)

Constant:    ACT_RANGE_AIM_LOW
Value:       296 (int)

Constant:    ACT_RANGE_AIM_MED
Value:       1869 (int)

Constant:    ACT_RANGE_AIM_PISTOL_LOW
Value:       298 (int)

Constant:    ACT_RANGE_AIM_PISTOL_MED
Value:       1880 (int)

Constant:    ACT_RANGE_AIM_REVOLVER_LOW
Value:       1790 (int)

Constant:    ACT_RANGE_AIM_REVOLVER_MED
Value:       1882 (int)

Constant:    ACT_RANGE_AIM_RPG_LOW
Value:       1841 (int)

Constant:    ACT_RANGE_AIM_RPG_MED
Value:       1881 (int)

Constant:    ACT_RANGE_AIM_SHOTGUN_LOW
Value:       1833 (int)

Constant:    ACT_RANGE_AIM_SHOTGUN_MED
Value:       1879 (int)

Constant:    ACT_RANGE_AIM_SMG1_LOW
Value:       297 (int)

Constant:    ACT_RANGE_AIM_SMG1_MED
Value:       1878 (int)

Constant:    ACT_RANGE_ATTACK
Value:       1939 (int)

Constant:    ACT_RANGE_ATTACK1
Value:       16 (int)

Constant:    ACT_RANGE_ATTACK1_LOW
Value:       18 (int)

Constant:    ACT_RANGE_ATTACK1_MED
Value:       1867 (int)

Constant:    ACT_RANGE_ATTACK2
Value:       17 (int)

Constant:    ACT_RANGE_ATTACK2_LOW
Value:       19 (int)

Constant:    ACT_RANGE_ATTACK2_MED
Value:       1868 (int)

Constant:    ACT_RANGE_ATTACK_ANNABELLE
Value:       1844 (int)

Constant:    ACT_RANGE_ATTACK_ANNABELLE_LOW
Value:       1845 (int)

Constant:    ACT_RANGE_ATTACK_AR1
Value:       277 (int)

Constant:    ACT_RANGE_ATTACK_AR2
Value:       278 (int)

Constant:    ACT_RANGE_ATTACK_AR2_GRENADE
Value:       280 (int)

Constant:    ACT_RANGE_ATTACK_AR2_LOW
Value:       279 (int)

Constant:    ACT_RANGE_ATTACK_AR2_MED
Value:       1870 (int)

Constant:    ACT_RANGE_ATTACK_CROSSBOW
Value:       1799 (int)

Constant:    ACT_RANGE_ATTACK_CROSSBOW_LOW
Value:       1801 (int)

Constant:    ACT_RANGE_ATTACK_CROSSBOW_MED
Value:       1876 (int)

Constant:    ACT_RANGE_ATTACK_HMG1
Value:       281 (int)

Constant:    ACT_RANGE_ATTACK_ML
Value:       282 (int)

Constant:    ACT_RANGE_ATTACK_PISTOL
Value:       288 (int)

Constant:    ACT_RANGE_ATTACK_PISTOL_LOW
Value:       289 (int)

Constant:    ACT_RANGE_ATTACK_PISTOL_MED
Value:       1873 (int)

Constant:    ACT_RANGE_ATTACK_REVOLVER
Value:       1785 (int)

Constant:    ACT_RANGE_ATTACK_REVOLVER_LOW
Value:       1787 (int)

Constant:    ACT_RANGE_ATTACK_REVOLVER_MED
Value:       1875 (int)

Constant:    ACT_RANGE_ATTACK_RPG
Value:       294 (int)

Constant:    ACT_RANGE_ATTACK_RPG_LOW
Value:       1842 (int)

Constant:    ACT_RANGE_ATTACK_RPG_MED
Value:       1874 (int)

Constant:    ACT_RANGE_ATTACK_SHOTGUN
Value:       286 (int)

Constant:    ACT_RANGE_ATTACK_SHOTGUN_LOW
Value:       287 (int)

Constant:    ACT_RANGE_ATTACK_SHOTGUN_MED
Value:       1872 (int)

Constant:    ACT_RANGE_ATTACK_SLAM
Value:       290 (int)

Constant:    ACT_RANGE_ATTACK_SMG1
Value:       283 (int)

Constant:    ACT_RANGE_ATTACK_SMG1_LOW
Value:       284 (int)

Constant:    ACT_RANGE_ATTACK_SMG1_MED
Value:       1871 (int)

Constant:    ACT_RANGE_ATTACK_SMG2
Value:       285 (int)

Constant:    ACT_RANGE_ATTACK_SNIPER_RIFLE
Value:       293 (int)

Constant:    ACT_RANGE_ATTACK_THROW
Value:       292 (int)

Constant:    ACT_RANGE_ATTACK_TRIPWIRE
Value:       291 (int)

Constant:    ACT_RAPPEL_LAND
Value:       1983 (int)

Constant:    ACT_RAPPEL_LOOP
Value:       127 (int)

Constant:    ACT_READINESS_AGITATED_TO_STIMULATED
Value:       419 (int)

Constant:    ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED
Value:       423 (int)

Constant:    ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED
Value:       421 (int)

Constant:    ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK
Value:       422 (int)

Constant:    ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED
Value:       424 (int)

Constant:    ACT_READINESS_RELAXED_TO_STIMULATED
Value:       417 (int)

Constant:    ACT_READINESS_RELAXED_TO_STIMULATED_WALK
Value:       418 (int)

Constant:    ACT_READINESS_STIMULATED_TO_RELAXED
Value:       420 (int)

Constant:    ACT_RELOAD
Value:       65 (int)

Constant:    ACT_RELOAD_ANNABELLE
Value:       1847 (int)

Constant:    ACT_RELOAD_ANNABELLE_LOW
Value:       1848 (int)

Constant:    ACT_RELOAD_AR1
Value:       1960 (int)

Constant:    ACT_RELOAD_AR2
Value:       1762 (int)

Constant:    ACT_RELOAD_AR2_LOW
Value:       1763 (int)

Constant:    ACT_RELOAD_CROSSBOW
Value:       1800 (int)

Constant:    ACT_RELOAD_CROSSBOW_LOW
Value:       1802 (int)

Constant:    ACT_RELOAD_FINISH
Value:       67 (int)

Constant:    ACT_RELOAD_LOW
Value:       68 (int)

Constant:    ACT_RELOAD_PISTOL
Value:       375 (int)

Constant:    ACT_RELOAD_PISTOL_LOW
Value:       376 (int)

Constant:    ACT_RELOAD_REVOLVER
Value:       1786 (int)

Constant:    ACT_RELOAD_REVOLVER_LOW
Value:       1788 (int)

Constant:    ACT_RELOAD_SHOTGUN
Value:       379 (int)

Constant:    ACT_RELOAD_SHOTGUN_LOW
Value:       380 (int)

Constant:    ACT_RELOAD_SMG1
Value:       377 (int)

Constant:    ACT_RELOAD_SMG1_LOW
Value:       378 (int)

Constant:    ACT_RELOAD_SMG2
Value:       1971 (int)

Constant:    ACT_RELOAD_START
Value:       66 (int)

Constant:    ACT_RESET
Value:       0 (int)

Constant:    ACT_RIDE_MANNED_GUN
Value:       430 (int)

Constant:    ACT_ROLL_LEFT
Value:       40 (int)

Constant:    ACT_ROLL_RIGHT
Value:       41 (int)

Constant:    ACT_RPG_DRAW_UNLOADED
Value:       481 (int)

Constant:    ACT_RPG_FIDGET_UNLOADED
Value:       484 (int)

Constant:    ACT_RPG_HOLSTER_UNLOADED
Value:       482 (int)

Constant:    ACT_RPG_IDLE_UNLOADED
Value:       483 (int)

Constant:    ACT_RUN
Value:       10 (int)

Constant:    ACT_RUNTOIDLE
Value:       505 (int)

Constant:    ACT_RUN_AGITATED
Value:       87 (int)

Constant:    ACT_RUN_AIM
Value:       11 (int)

Constant:    ACT_RUN_AIM_AGITATED
Value:       99 (int)

Constant:    ACT_RUN_AIM_AR2
Value:       1761 (int)

Constant:    ACT_RUN_AIM_AR2_STIMULATED
Value:       1757 (int)

Constant:    ACT_RUN_AIM_CROSSBOW
Value:       1798 (int)

Constant:    ACT_RUN_AIM_CROSSBOW_STIMULATED
Value:       1815 (int)

Constant:    ACT_RUN_AIM_PISTOL
Value:       371 (int)

Constant:    ACT_RUN_AIM_PISTOL_RELAXED
Value:       1982 (int)

Constant:    ACT_RUN_AIM_PISTOL_STIMULATED
Value:       1824 (int)

Constant:    ACT_RUN_AIM_RELAXED
Value:       97 (int)

Constant:    ACT_RUN_AIM_REVOLVER
Value:       1784 (int)

Constant:    ACT_RUN_AIM_RIFLE
Value:       362 (int)

Constant:    ACT_RUN_AIM_RIFLE_STIMULATED
Value:       337 (int)

Constant:    ACT_RUN_AIM_SHOTGUN
Value:       367 (int)

Constant:    ACT_RUN_AIM_SHOTGUN_STIMULATED
Value:       1840 (int)

Constant:    ACT_RUN_AIM_STEALTH
Value:       100 (int)

Constant:    ACT_RUN_AIM_STEALTH_PISTOL
Value:       374 (int)

Constant:    ACT_RUN_AIM_STIMULATED
Value:       98 (int)

Constant:    ACT_RUN_AR1_RELAXED
Value:       1965 (int)

Constant:    ACT_RUN_AR1_STIMULATED
Value:       1968 (int)

Constant:    ACT_RUN_AR2
Value:       1760 (int)

Constant:    ACT_RUN_AR2_RELAXED
Value:       1752 (int)

Constant:    ACT_RUN_AR2_STIMULATED
Value:       1754 (int)

Constant:    ACT_RUN_CROSSBOW
Value:       1796 (int)

Constant:    ACT_RUN_CROSSBOW_RELAXED
Value:       1810 (int)

Constant:    ACT_RUN_CROSSBOW_STIMULATED
Value:       1812 (int)

Constant:    ACT_RUN_CROUCH
Value:       12 (int)

Constant:    ACT_RUN_CROUCH_AIM
Value:       13 (int)

Constant:    ACT_RUN_CROUCH_AIM_PISTOL
Value:       1828 (int)

Constant:    ACT_RUN_CROUCH_AIM_RIFLE
Value:       364 (int)

Constant:    ACT_RUN_CROUCH_PISTOL
Value:       1827 (int)

Constant:    ACT_RUN_CROUCH_RIFLE
Value:       363 (int)

Constant:    ACT_RUN_CROUCH_RPG
Value:       354 (int)

Constant:    ACT_RUN_HURT
Value:       105 (int)

Constant:    ACT_RUN_MELEE
Value:       1851 (int)

Constant:    ACT_RUN_ON_FIRE
Value:       126 (int)

Constant:    ACT_RUN_PACKAGE
Value:       1852 (int)

Constant:    ACT_RUN_PANICKED
Value:       1950 (int)

Constant:    ACT_RUN_PISTOL
Value:       369 (int)

Constant:    ACT_RUN_PISTOL_RELAXED
Value:       1820 (int)

Constant:    ACT_RUN_PISTOL_STIMULATED
Value:       1821 (int)

Constant:    ACT_RUN_PROTECTED
Value:       14 (int)

Constant:    ACT_RUN_RELAXED
Value:       85 (int)

Constant:    ACT_RUN_REVOLVER
Value:       1782 (int)

Constant:    ACT_RUN_RIFLE
Value:       361 (int)

Constant:    ACT_RUN_RIFLE_RELAXED
Value:       332 (int)

Constant:    ACT_RUN_RIFLE_STIMULATED
Value:       334 (int)

Constant:    ACT_RUN_RPG
Value:       352 (int)

Constant:    ACT_RUN_RPG_RELAXED
Value:       356 (int)

Constant:    ACT_RUN_SCARED
Value:       110 (int)

Constant:    ACT_RUN_SHOTGUN
Value:       1831 (int)

Constant:    ACT_RUN_SHOTGUN_RELAXED
Value:       1836 (int)

Constant:    ACT_RUN_SHOTGUN_STIMULATED
Value:       1837 (int)

Constant:    ACT_RUN_SMG2_RELAXED
Value:       1976 (int)

Constant:    ACT_RUN_SMG2_STIMULATED
Value:       1979 (int)

Constant:    ACT_RUN_STEALTH
Value:       88 (int)

Constant:    ACT_RUN_STEALTH_PISTOL
Value:       365 (int)

Constant:    ACT_RUN_STIMULATED
Value:       86 (int)

Constant:    ACT_RUN_SUITCASE
Value:       1853 (int)

Constant:    ACT_SCRIPT_CUSTOM_MOVE
Value:       15 (int)

Constant:    ACT_SECONDARY2_RELOAD_FINISH
Value:       1641 (int)

Constant:    ACT_SECONDARY2_RELOAD_START
Value:       1640 (int)

Constant:    ACT_SECONDARY2_VM_DRAW
Value:       1633 (int)

Constant:    ACT_SECONDARY2_VM_DRYFIRE
Value:       1643 (int)

Constant:    ACT_SECONDARY2_VM_HOLSTER
Value:       1634 (int)

Constant:    ACT_SECONDARY2_VM_IDLE
Value:       1635 (int)

Constant:    ACT_SECONDARY2_VM_IDLE_LOWERED
Value:       1645 (int)

Constant:    ACT_SECONDARY2_VM_IDLE_TO_LOWERED
Value:       1644 (int)

Constant:    ACT_SECONDARY2_VM_LOWERED_TO_IDLE
Value:       1646 (int)

Constant:    ACT_SECONDARY2_VM_PRIMARYATTACK
Value:       1637 (int)

Constant:    ACT_SECONDARY2_VM_PULLBACK
Value:       1636 (int)

Constant:    ACT_SECONDARY2_VM_RELOAD
Value:       1639 (int)

Constant:    ACT_SECONDARY2_VM_RELOAD2
Value:       1642 (int)

Constant:    ACT_SECONDARY2_VM_SECONDARY2ATTACK
Value:       1638 (int)

Constant:    ACT_SECONDARY_ATTACK_CROUCH_POSTFIRE
Value:       1661 (int)

Constant:    ACT_SECONDARY_ATTACK_CROUCH_PREFIRE
Value:       1660 (int)

Constant:    ACT_SECONDARY_ATTACK_STAND_POSTFIRE
Value:       1658 (int)

Constant:    ACT_SECONDARY_ATTACK_STAND_PREFIRE
Value:       1657 (int)

Constant:    ACT_SECONDARY_ATTACK_STAND_STARTFIRE
Value:       1659 (int)

Constant:    ACT_SECONDARY_ATTACK_SWIM_POSTFIRE
Value:       1663 (int)

Constant:    ACT_SECONDARY_ATTACK_SWIM_PREFIRE
Value:       1662 (int)

Constant:    ACT_SECONDARY_RELOAD_FINISH
Value:       1534 (int)

Constant:    ACT_SECONDARY_RELOAD_START
Value:       1533 (int)

Constant:    ACT_SECONDARY_VM_DRAW
Value:       1526 (int)

Constant:    ACT_SECONDARY_VM_DRAW_2
Value:       1540 (int)

Constant:    ACT_SECONDARY_VM_DRYFIRE
Value:       1536 (int)

Constant:    ACT_SECONDARY_VM_HOLSTER
Value:       1527 (int)

Constant:    ACT_SECONDARY_VM_IDLE
Value:       1528 (int)

Constant:    ACT_SECONDARY_VM_IDLE_2
Value:       1541 (int)

Constant:    ACT_SECONDARY_VM_IDLE_LOWERED
Value:       1538 (int)

Constant:    ACT_SECONDARY_VM_IDLE_TO_LOWERED
Value:       1537 (int)

Constant:    ACT_SECONDARY_VM_LOWERED_TO_IDLE
Value:       1539 (int)

Constant:    ACT_SECONDARY_VM_PRIMARYATTACK
Value:       1530 (int)

Constant:    ACT_SECONDARY_VM_PRIMARYATTACK_2
Value:       1542 (int)

Constant:    ACT_SECONDARY_VM_PULLBACK
Value:       1529 (int)

Constant:    ACT_SECONDARY_VM_RELOAD
Value:       1532 (int)

Constant:    ACT_SECONDARY_VM_RELOAD2
Value:       1535 (int)

Constant:    ACT_SECONDARY_VM_RELOAD_2
Value:       1543 (int)

Constant:    ACT_SECONDARY_VM_SECONDARYATTACK
Value:       1531 (int)

Constant:    ACT_SHIELD_ATTACK
Value:       451 (int)

Constant:    ACT_SHIELD_DOWN
Value:       449 (int)

Constant:    ACT_SHIELD_KNOCKBACK
Value:       452 (int)

Constant:    ACT_SHIELD_UP
Value:       448 (int)

Constant:    ACT_SHIELD_UP_IDLE
Value:       450 (int)

Constant:    ACT_SHIPLADDER_DOWN
Value:       37 (int)

Constant:    ACT_SHIPLADDER_UP
Value:       36 (int)

Constant:    ACT_SHOTGUN_IDLE4
Value:       478 (int)

Constant:    ACT_SHOTGUN_IDLE_DEEP
Value:       477 (int)

Constant:    ACT_SHOTGUN_PUMP
Value:       268 (int)

Constant:    ACT_SHOTGUN_RELOAD_FINISH
Value:       267 (int)

Constant:    ACT_SHOTGUN_RELOAD_START
Value:       266 (int)

Constant:    ACT_SIGNAL1
Value:       48 (int)

Constant:    ACT_SIGNAL2
Value:       49 (int)

Constant:    ACT_SIGNAL3
Value:       50 (int)

Constant:    ACT_SIGNAL_ADVANCE
Value:       51 (int)

Constant:    ACT_SIGNAL_FORWARD
Value:       52 (int)

Constant:    ACT_SIGNAL_GROUP
Value:       53 (int)

Constant:    ACT_SIGNAL_HALT
Value:       54 (int)

Constant:    ACT_SIGNAL_LEFT
Value:       55 (int)

Constant:    ACT_SIGNAL_RIGHT
Value:       56 (int)

Constant:    ACT_SIGNAL_TAKECOVER
Value:       57 (int)

Constant:    ACT_SLAM_DETONATOR_DETONATE
Value:       262 (int)

Constant:    ACT_SLAM_DETONATOR_DRAW
Value:       261 (int)

Constant:    ACT_SLAM_DETONATOR_HOLSTER
Value:       263 (int)

Constant:    ACT_SLAM_DETONATOR_IDLE
Value:       260 (int)

Constant:    ACT_SLAM_DETONATOR_STICKWALL_DRAW
Value:       264 (int)

Constant:    ACT_SLAM_DETONATOR_THROW_DRAW
Value:       265 (int)

Constant:    ACT_SLAM_STICKWALL_ATTACH
Value:       230 (int)

Constant:    ACT_SLAM_STICKWALL_ATTACH2
Value:       231 (int)

Constant:    ACT_SLAM_STICKWALL_DETONATE
Value:       234 (int)

Constant:    ACT_SLAM_STICKWALL_DETONATOR_HOLSTER
Value:       235 (int)

Constant:    ACT_SLAM_STICKWALL_DRAW
Value:       236 (int)

Constant:    ACT_SLAM_STICKWALL_IDLE
Value:       228 (int)

Constant:    ACT_SLAM_STICKWALL_ND_ATTACH
Value:       232 (int)

Constant:    ACT_SLAM_STICKWALL_ND_ATTACH2
Value:       233 (int)

Constant:    ACT_SLAM_STICKWALL_ND_DRAW
Value:       237 (int)

Constant:    ACT_SLAM_STICKWALL_ND_IDLE
Value:       229 (int)

Constant:    ACT_SLAM_STICKWALL_TO_THROW
Value:       238 (int)

Constant:    ACT_SLAM_STICKWALL_TO_THROW_ND
Value:       239 (int)

Constant:    ACT_SLAM_STICKWALL_TO_TRIPMINE_ND
Value:       240 (int)

Constant:    ACT_SLAM_THROW_DETONATE
Value:       251 (int)

Constant:    ACT_SLAM_THROW_DETONATOR_HOLSTER
Value:       252 (int)

Constant:    ACT_SLAM_THROW_DRAW
Value:       247 (int)

Constant:    ACT_SLAM_THROW_IDLE
Value:       241 (int)

Constant:    ACT_SLAM_THROW_ND_DRAW
Value:       248 (int)

Constant:    ACT_SLAM_THROW_ND_IDLE
Value:       242 (int)

Constant:    ACT_SLAM_THROW_THROW
Value:       243 (int)

Constant:    ACT_SLAM_THROW_THROW2
Value:       244 (int)

Constant:    ACT_SLAM_THROW_THROW_ND
Value:       245 (int)

Constant:    ACT_SLAM_THROW_THROW_ND2
Value:       246 (int)

Constant:    ACT_SLAM_THROW_TO_STICKWALL
Value:       249 (int)

Constant:    ACT_SLAM_THROW_TO_STICKWALL_ND
Value:       250 (int)

Constant:    ACT_SLAM_THROW_TO_TRIPMINE_ND
Value:       253 (int)

Constant:    ACT_SLAM_TRIPMINE_ATTACH
Value:       256 (int)

Constant:    ACT_SLAM_TRIPMINE_ATTACH2
Value:       257 (int)

Constant:    ACT_SLAM_TRIPMINE_DRAW
Value:       255 (int)

Constant:    ACT_SLAM_TRIPMINE_IDLE
Value:       254 (int)

Constant:    ACT_SLAM_TRIPMINE_TO_STICKWALL_ND
Value:       258 (int)

Constant:    ACT_SLAM_TRIPMINE_TO_THROW_ND
Value:       259 (int)

Constant:    ACT_SMALL_FLINCH
Value:       61 (int)

Constant:    ACT_SMG2_DRAW2
Value:       271 (int)

Constant:    ACT_SMG2_DRYFIRE2
Value:       273 (int)

Constant:    ACT_SMG2_FIRE2
Value:       270 (int)

Constant:    ACT_SMG2_IDLE2
Value:       269 (int)

Constant:    ACT_SMG2_RELOAD2
Value:       272 (int)

Constant:    ACT_SMG2_TOAUTO
Value:       274 (int)

Constant:    ACT_SMG2_TOBURST
Value:       275 (int)

Constant:    ACT_SPECIAL_ATTACK1
Value:       106 (int)

Constant:    ACT_SPECIAL_ATTACK2
Value:       107 (int)

Constant:    ACT_SPELL_VM_ARM
Value:       1745 (int)

Constant:    ACT_SPELL_VM_DRAW
Value:       1743 (int)

Constant:    ACT_SPELL_VM_FIRE
Value:       1746 (int)

Constant:    ACT_SPELL_VM_IDLE
Value:       1744 (int)

Constant:    ACT_SPRINT
Value:       506 (int)

Constant:    ACT_STAND
Value:       46 (int)

Constant:    ACT_STARTDYING
Value:       427 (int)

Constant:    ACT_STEP_BACK
Value:       134 (int)

Constant:    ACT_STEP_FORE
Value:       135 (int)

Constant:    ACT_STEP_LEFT
Value:       132 (int)

Constant:    ACT_STEP_RIGHT
Value:       133 (int)

Constant:    ACT_STRAFE_LEFT
Value:       38 (int)

Constant:    ACT_STRAFE_RIGHT
Value:       39 (int)

Constant:    ACT_SWIM
Value:       28 (int)

Constant:    ACT_THROWABLE_VM_DRAW
Value:       1740 (int)

Constant:    ACT_THROWABLE_VM_FIRE
Value:       1742 (int)

Constant:    ACT_THROWABLE_VM_IDLE
Value:       1741 (int)

Constant:    ACT_TRANSITION
Value:       2 (int)

Constant:    ACT_TRIPMINE_GROUND
Value:       490 (int)

Constant:    ACT_TRIPMINE_WORLD
Value:       491 (int)

Constant:    ACT_TURN
Value:       460 (int)

Constant:    ACT_TURNLEFT45
Value:       459 (int)

Constant:    ACT_TURNRIGHT45
Value:       458 (int)

Constant:    ACT_TURN_LEFT
Value:       42 (int)

Constant:    ACT_TURN_RIGHT
Value:       43 (int)

Constant:    ACT_UNDEPLOY
Value:       471 (int)

Constant:    ACT_USE
Value:       47 (int)

Constant:    ACT_VICTORY_DANCE
Value:       111 (int)

Constant:    ACT_VM_ATTACH_SILENCER
Value:       210 (int)

Constant:    ACT_VM_DEPLOY
Value:       552 (int)

Constant:    ACT_VM_DEPLOY_1
Value:       560 (int)

Constant:    ACT_VM_DEPLOY_2
Value:       559 (int)

Constant:    ACT_VM_DEPLOY_3
Value:       558 (int)

Constant:    ACT_VM_DEPLOY_4
Value:       557 (int)

Constant:    ACT_VM_DEPLOY_5
Value:       556 (int)

Constant:    ACT_VM_DEPLOY_6
Value:       555 (int)

Constant:    ACT_VM_DEPLOY_7
Value:       554 (int)

Constant:    ACT_VM_DEPLOY_8
Value:       553 (int)

Constant:    ACT_VM_DEPLOY_EMPTY
Value:       561 (int)

Constant:    ACT_VM_DETACH_SILENCER
Value:       211 (int)

Constant:    ACT_VM_DRAW
Value:       171 (int)

Constant:    ACT_VM_DRAW_DEPLOYED
Value:       519 (int)

Constant:    ACT_VM_DRAW_EMPTY
Value:       520 (int)

Constant:    ACT_VM_DRAW_QRL
Value:       1722 (int)

Constant:    ACT_VM_DRAW_SILENCED
Value:       496 (int)

Constant:    ACT_VM_DRAW_SPECIAL
Value:       212 (int)

Constant:    ACT_VM_DRYFIRE
Value:       185 (int)

Constant:    ACT_VM_DRYFIRE_LEFT
Value:       498 (int)

Constant:    ACT_VM_DRYFIRE_SILENCED
Value:       494 (int)

Constant:    ACT_VM_FIDGET
Value:       174 (int)

Constant:    ACT_VM_FIZZLE
Value:       1065 (int)

Constant:    ACT_VM_HAULBACK
Value:       198 (int)

Constant:    ACT_VM_HITCENTER
Value:       190 (int)

Constant:    ACT_VM_HITCENTER2
Value:       191 (int)

Constant:    ACT_VM_HITCENTER_SPECIAL
Value:       218 (int)

Constant:    ACT_VM_HITKILL
Value:       1940 (int)

Constant:    ACT_VM_HITLEFT
Value:       186 (int)

Constant:    ACT_VM_HITLEFT2
Value:       187 (int)

Constant:    ACT_VM_HITRIGHT
Value:       188 (int)

Constant:    ACT_VM_HITRIGHT2
Value:       189 (int)

Constant:    ACT_VM_HOLSTER
Value:       172 (int)

Constant:    ACT_VM_HOLSTER_SPECIAL
Value:       213 (int)

Constant:    ACT_VM_IDLE
Value:       173 (int)

Constant:    ACT_VM_IDLE_1
Value:       532 (int)

Constant:    ACT_VM_IDLE_2
Value:       531 (int)

Constant:    ACT_VM_IDLE_3
Value:       530 (int)

Constant:    ACT_VM_IDLE_4
Value:       529 (int)

Constant:    ACT_VM_IDLE_5
Value:       528 (int)

Constant:    ACT_VM_IDLE_6
Value:       527 (int)

Constant:    ACT_VM_IDLE_7
Value:       526 (int)

Constant:    ACT_VM_IDLE_8
Value:       525 (int)

Constant:    ACT_VM_IDLE_DEPLOYED
Value:       533 (int)

Constant:    ACT_VM_IDLE_DEPLOYED_1
Value:       541 (int)

Constant:    ACT_VM_IDLE_DEPLOYED_2
Value:       540 (int)

Constant:    ACT_VM_IDLE_DEPLOYED_3
Value:       539 (int)

Constant:    ACT_VM_IDLE_DEPLOYED_4
Value:       538 (int)

Constant:    ACT_VM_IDLE_DEPLOYED_5
Value:       537 (int)

Constant:    ACT_VM_IDLE_DEPLOYED_6
Value:       536 (int)

Constant:    ACT_VM_IDLE_DEPLOYED_7
Value:       535 (int)

Constant:    ACT_VM_IDLE_DEPLOYED_8
Value:       534 (int)

Constant:    ACT_VM_IDLE_DEPLOYED_EMPTY
Value:       524 (int)

Constant:    ACT_VM_IDLE_EMPTY
Value:       523 (int)

Constant:    ACT_VM_IDLE_EMPTY_LEFT
Value:       497 (int)

Constant:    ACT_VM_IDLE_LOWERED
Value:       203 (int)

Constant:    ACT_VM_IDLE_LOWERED_SPECIAL
Value:       221 (int)

Constant:    ACT_VM_IDLE_QRL
Value:       1723 (int)

Constant:    ACT_VM_IDLE_SILENCED
Value:       495 (int)

Constant:    ACT_VM_IDLE_SPECIAL
Value:       214 (int)

Constant:    ACT_VM_IDLE_TO_LOWERED
Value:       202 (int)

Constant:    ACT_VM_IDLE_TO_LOWERED_SPECIAL
Value:       220 (int)

Constant:    ACT_VM_LOWERED_TO_IDLE
Value:       204 (int)

Constant:    ACT_VM_LOWERED_TO_IDLE_SPECIAL
Value:       222 (int)

Constant:    ACT_VM_MISSCENTER
Value:       196 (int)

Constant:    ACT_VM_MISSCENTER2
Value:       197 (int)

Constant:    ACT_VM_MISSLEFT
Value:       192 (int)

Constant:    ACT_VM_MISSLEFT2
Value:       193 (int)

Constant:    ACT_VM_MISSRIGHT
Value:       194 (int)

Constant:    ACT_VM_MISSRIGHT2
Value:       195 (int)

Constant:    ACT_VM_PICKUP
Value:       208 (int)

Constant:    ACT_VM_PRIMARYATTACK
Value:       180 (int)

Constant:    ACT_VM_PRIMARYATTACK_1
Value:       569 (int)

Constant:    ACT_VM_PRIMARYATTACK_2
Value:       568 (int)

Constant:    ACT_VM_PRIMARYATTACK_3
Value:       567 (int)

Constant:    ACT_VM_PRIMARYATTACK_4
Value:       566 (int)

Constant:    ACT_VM_PRIMARYATTACK_5
Value:       565 (int)

Constant:    ACT_VM_PRIMARYATTACK_6
Value:       564 (int)

Constant:    ACT_VM_PRIMARYATTACK_7
Value:       563 (int)

Constant:    ACT_VM_PRIMARYATTACK_8
Value:       562 (int)

Constant:    ACT_VM_PRIMARYATTACK_DEPLOYED
Value:       570 (int)

Constant:    ACT_VM_PRIMARYATTACK_DEPLOYED_1
Value:       578 (int)

Constant:    ACT_VM_PRIMARYATTACK_DEPLOYED_2
Value:       577 (int)

Constant:    ACT_VM_PRIMARYATTACK_DEPLOYED_3
Value:       576 (int)

Constant:    ACT_VM_PRIMARYATTACK_DEPLOYED_4
Value:       575 (int)

Constant:    ACT_VM_PRIMARYATTACK_DEPLOYED_5
Value:       574 (int)

Constant:    ACT_VM_PRIMARYATTACK_DEPLOYED_6
Value:       573 (int)

Constant:    ACT_VM_PRIMARYATTACK_DEPLOYED_7
Value:       572 (int)

Constant:    ACT_VM_PRIMARYATTACK_DEPLOYED_8
Value:       571 (int)

Constant:    ACT_VM_PRIMARYATTACK_DEPLOYED_EMPTY
Value:       579 (int)

Constant:    ACT_VM_PRIMARYATTACK_EMPTY
Value:       521 (int)

Constant:    ACT_VM_PRIMARYATTACK_QRL
Value:       1725 (int)

Constant:    ACT_VM_PRIMARYATTACK_SILENCED
Value:       492 (int)

Constant:    ACT_VM_PRIMARYATTACK_SPECIAL
Value:       216 (int)

Constant:    ACT_VM_PULLBACK
Value:       175 (int)

Constant:    ACT_VM_PULLBACK_HIGH
Value:       176 (int)

Constant:    ACT_VM_PULLBACK_LOW
Value:       177 (int)

Constant:    ACT_VM_PULLBACK_QRL
Value:       1724 (int)

Constant:    ACT_VM_PULLBACK_SPECIAL
Value:       215 (int)

Constant:    ACT_VM_PULLPIN
Value:       179 (int)

Constant:    ACT_VM_RECOIL1
Value:       205 (int)

Constant:    ACT_VM_RECOIL2
Value:       206 (int)

Constant:    ACT_VM_RECOIL3
Value:       207 (int)

Constant:    ACT_VM_RELEASE
Value:       209 (int)

Constant:    ACT_VM_RELOAD
Value:       182 (int)

Constant:    ACT_VM_RELOAD_DEPLOYED
Value:       517 (int)

Constant:    ACT_VM_RELOAD_EMPTY
Value:       522 (int)

Constant:    ACT_VM_RELOAD_FINISH
Value:       184 (int)

Constant:    ACT_VM_RELOAD_FINISH_QRL
Value:       1728 (int)

Constant:    ACT_VM_RELOAD_IDLE
Value:       518 (int)

Constant:    ACT_VM_RELOAD_QRL
Value:       1726 (int)

Constant:    ACT_VM_RELOAD_SILENCED
Value:       493 (int)

Constant:    ACT_VM_RELOAD_START
Value:       183 (int)

Constant:    ACT_VM_RELOAD_START_QRL
Value:       1727 (int)

Constant:    ACT_VM_SECONDARYATTACK
Value:       181 (int)

Constant:    ACT_VM_SECONDARYATTACK_SPECIAL
Value:       217 (int)

Constant:    ACT_VM_SPRINT_ENTER
Value:       431 (int)

Constant:    ACT_VM_SPRINT_IDLE
Value:       432 (int)

Constant:    ACT_VM_SPRINT_LEAVE
Value:       433 (int)

Constant:    ACT_VM_SWINGHARD
Value:       199 (int)

Constant:    ACT_VM_SWINGHARD_SPECIAL
Value:       219 (int)

Constant:    ACT_VM_SWINGHIT
Value:       201 (int)

Constant:    ACT_VM_SWINGMISS
Value:       200 (int)

Constant:    ACT_VM_THROW
Value:       178 (int)

Constant:    ACT_VM_UNDEPLOY
Value:       542 (int)

Constant:    ACT_VM_UNDEPLOY_1
Value:       550 (int)

Constant:    ACT_VM_UNDEPLOY_2
Value:       549 (int)

Constant:    ACT_VM_UNDEPLOY_3
Value:       548 (int)

Constant:    ACT_VM_UNDEPLOY_4
Value:       547 (int)

Constant:    ACT_VM_UNDEPLOY_5
Value:       546 (int)

Constant:    ACT_VM_UNDEPLOY_6
Value:       545 (int)

Constant:    ACT_VM_UNDEPLOY_7
Value:       544 (int)

Constant:    ACT_VM_UNDEPLOY_8
Value:       543 (int)

Constant:    ACT_VM_UNDEPLOY_EMPTY
Value:       551 (int)

Constant:    ACT_VM_UNUSABLE
Value:       1503 (int)

Constant:    ACT_VM_UNUSABLE_TO_USABLE
Value:       1504 (int)

Constant:    ACT_VM_USABLE_TO_UNUSABLE
Value:       1505 (int)

Constant:    ACT_WALK
Value:       6 (int)

Constant:    ACT_WALK_AGITATED
Value:       83 (int)

Constant:    ACT_WALK_AIM
Value:       7 (int)

Constant:    ACT_WALK_AIM_AGITATED
Value:       95 (int)

Constant:    ACT_WALK_AIM_AR2
Value:       1759 (int)

Constant:    ACT_WALK_AIM_AR2_STIMULATED
Value:       1756 (int)

Constant:    ACT_WALK_AIM_CROSSBOW
Value:       1797 (int)

Constant:    ACT_WALK_AIM_CROSSBOW_STIMULATED
Value:       1814 (int)

Constant:    ACT_WALK_AIM_PISTOL
Value:       370 (int)

Constant:    ACT_WALK_AIM_PISTOL_RELAXED
Value:       1981 (int)

Constant:    ACT_WALK_AIM_PISTOL_STIMULATED
Value:       1823 (int)

Constant:    ACT_WALK_AIM_RELAXED
Value:       93 (int)

Constant:    ACT_WALK_AIM_REVOLVER
Value:       1783 (int)

Constant:    ACT_WALK_AIM_RIFLE
Value:       358 (int)

Constant:    ACT_WALK_AIM_RIFLE_STIMULATED
Value:       336 (int)

Constant:    ACT_WALK_AIM_SHOTGUN
Value:       366 (int)

Constant:    ACT_WALK_AIM_SHOTGUN_STIMULATED
Value:       1839 (int)

Constant:    ACT_WALK_AIM_STEALTH
Value:       96 (int)

Constant:    ACT_WALK_AIM_STEALTH_PISTOL
Value:       373 (int)

Constant:    ACT_WALK_AIM_STIMULATED
Value:       94 (int)

Constant:    ACT_WALK_ANGRY
Value:       341 (int)

Constant:    ACT_WALK_AR1
Value:       1966 (int)

Constant:    ACT_WALK_AR1_RELAXED
Value:       1964 (int)

Constant:    ACT_WALK_AR1_STIMULATED
Value:       1967 (int)

Constant:    ACT_WALK_AR2
Value:       1758 (int)

Constant:    ACT_WALK_AR2_RELAXED
Value:       1751 (int)

Constant:    ACT_WALK_AR2_STIMULATED
Value:       1753 (int)

Constant:    ACT_WALK_CARRY
Value:       426 (int)

Constant:    ACT_WALK_CROSSBOW
Value:       1795 (int)

Constant:    ACT_WALK_CROSSBOW_RELAXED
Value:       1809 (int)

Constant:    ACT_WALK_CROSSBOW_STIMULATED
Value:       1811 (int)

Constant:    ACT_WALK_CROUCH
Value:       8 (int)

Constant:    ACT_WALK_CROUCH_AIM
Value:       9 (int)

Constant:    ACT_WALK_CROUCH_AIM_PISTOL
Value:       1826 (int)

Constant:    ACT_WALK_CROUCH_AIM_RIFLE
Value:       360 (int)

Constant:    ACT_WALK_CROUCH_PISTOL
Value:       1825 (int)

Constant:    ACT_WALK_CROUCH_RIFLE
Value:       359 (int)

Constant:    ACT_WALK_CROUCH_RPG
Value:       353 (int)

Constant:    ACT_WALK_HURT
Value:       104 (int)

Constant:    ACT_WALK_MELEE
Value:       1850 (int)

Constant:    ACT_WALK_ON_FIRE
Value:       125 (int)

Constant:    ACT_WALK_PACKAGE
Value:       326 (int)

Constant:    ACT_WALK_PANICKED
Value:       1951 (int)

Constant:    ACT_WALK_PISTOL
Value:       368 (int)

Constant:    ACT_WALK_PISTOL_RELAXED
Value:       1818 (int)

Constant:    ACT_WALK_PISTOL_STIMULATED
Value:       1819 (int)

Constant:    ACT_WALK_RELAXED
Value:       81 (int)

Constant:    ACT_WALK_REVOLVER
Value:       1781 (int)

Constant:    ACT_WALK_RIFLE
Value:       357 (int)

Constant:    ACT_WALK_RIFLE_RELAXED
Value:       331 (int)

Constant:    ACT_WALK_RIFLE_STIMULATED
Value:       333 (int)

Constant:    ACT_WALK_RPG
Value:       351 (int)

Constant:    ACT_WALK_RPG_RELAXED
Value:       355 (int)

Constant:    ACT_WALK_SCARED
Value:       109 (int)

Constant:    ACT_WALK_SHOTGUN
Value:       1830 (int)

Constant:    ACT_WALK_SHOTGUN_RELAXED
Value:       1834 (int)

Constant:    ACT_WALK_SHOTGUN_STIMULATED
Value:       1835 (int)

Constant:    ACT_WALK_SMG2
Value:       1977 (int)

Constant:    ACT_WALK_SMG2_RELAXED
Value:       1975 (int)

Constant:    ACT_WALK_SMG2_STIMULATED
Value:       1978 (int)

Constant:    ACT_WALK_STEALTH
Value:       84 (int)

Constant:    ACT_WALK_STEALTH_PISTOL
Value:       372 (int)

Constant:    ACT_WALK_STIMULATED
Value:       82 (int)

Constant:    ACT_WALK_SUITCASE
Value:       328 (int)

Constant:    AE_TYPE_CLIENT
Value:       16 (int)
Description: Animation event flag which indicates an event is supposed to be clientside only.

Constant:    AE_TYPE_FACEPOSER
Value:       32 (int)
Description: Animation event flag with an unknown purpose. Presumably related to Faceposer.

Constant:    AE_TYPE_NEWEVENTSYSTEM
Value:       1024 (int)
Description: Animation event flag which indicates an event is using the new system. This is often used by class-specific events from NPCs.

Constant:    AE_TYPE_SCRIPTED
Value:       2 (int)
Description: Animation event flag with an unknown purpose.

Constant:    AE_TYPE_SERVER
Value:       1 (int)
Description: Animation event flag which indicates an event is supposed to be serverside only.

Constant:    AE_TYPE_SHARED
Value:       4 (int)
Description: Animation event flag which indicates an event is supposed to be shared between the server and client.

Constant:    AE_TYPE_WEAPON
Value:       8 (int)
Description: Animation event flag which indicates an event is part of a weapon.

Constant:    AISS_AWAKE
Value:       0 (int)
Description: NPC is awake. (NPC sleep state used in Get/SetSleepState())

Constant:    AISS_WAITING_FOR_INPUT
Value:       3 (int)
Description: NPC is asleep and will only awaken upon receiving the Wake input. (NPC sleep state used in Get/SetSleepState())

Constant:    AISS_WAITING_FOR_PVS
Value:       2 (int)
Description: NPC is asleep and will awaken upon entering a player's PVS. (NPC sleep state used in Get/SetSleepState())

Constant:    AISS_WAITING_FOR_THREAT
Value:       1 (int)
Description: NPC is asleep and will awaken upon seeing an enemy. (NPC sleep state used in Get/SetSleepState())

Constant:    AI_SLEEP_FLAGS_NONE
Value:       0 (int)
Description: No sleep flags. (NPC sleep flag used in Add/Remove/HasSleepFlags())

Constant:    AI_SLEEP_FLAG_AUTO_PVS
Value:       1 (int)
Description: Indicates a NPC will sleep upon exiting PVS. (NPC sleep flag used in Add/Remove/HasSleepFlags())

Constant:    AI_SLEEP_FLAG_AUTO_PVS_AFTER_PVS
Value:       2 (int)
Description: Indicates a NPC will sleep upon exiting PVS after entering PVS for the first time(?) (NPC sleep flag used in Add/Remove/HasSleepFlags())

Constant:    ALL_CONTEXTS
Value:       -1048576 (int)
Description: All sound contexts useable in QueryHearSound hooks, etc.

Constant:    ALL_SCENTS
Value:       224 (int)
Description: All "scent" sound types useable in QueryHearSound hooks, etc.

Constant:    ALL_SOUNDS
Value:       1048351 (int)
Description: All sound types useable in QueryHearSound hooks, etc.

Constant:    ALL_VISIBLE_CONTENTS
Value:       255 (int)
Description: Contains all visible spatial content flags.

Constant:    AUTOAIM_10DEGREES
Value:       0.173648 (float)
Description: 10-degree autoaim cone.

Constant:    AUTOAIM_20DEGREES
Value:       0.349066 (float)
Description: 20-degree autoaim cone.

Constant:    AUTOAIM_2DEGREES
Value:       0.034899 (float)
Description: 2-degree autoaim cone.

Constant:    AUTOAIM_5DEGREES
Value:       0.087156 (float)
Description: 5-degree autoaim cone.

Constant:    AUTOAIM_8DEGREES
Value:       0.139173 (float)
Description: 8-degree autoaim cone.

Constant:    AUTOAIM_SCALE_DEFAULT
Value:       1.000000 (float)
Description: Indicates default auto aim scale.

Constant:    AUTOAIM_SCALE_DIRECT_ONLY
Value:       0.000000 (float)
Description: Indicates auto aim should not be used except for direct hits.

Constant:    CHAN_AUTO
Value:       0 (int)
Description: The default generic sound channel.

Constant:    CHAN_BODY
Value:       4 (int)
Description: The sound channel used for clothing, ragdoll impacts, footsteps, knocking/pounding/punching etc.

Constant:    CHAN_ITEM
Value:       3 (int)
Description: The sound channel used for generic physics impact sounds, health/suit chargers, +use sounds.

Constant:    CHAN_REPLACE
Value:       -1 (int)
Description: The sound channel used when playing sounds through console commands.

Constant:    CHAN_STATIC
Value:       6 (int)
Description: The sound channel for constant/background sound that doesn't require any reaction.

Constant:    CHAN_STREAM
Value:       5 (int)
Description: The sound channel for sounds that can be delayed by an async load, i.e. aren't responses to particular events.

Constant:    CHAN_VOICE
Value:       2 (int)
Description: The sound channel used for dialogue, voice lines, etc.

Constant:    CHAN_VOICE2
Value:       7 (int)
Description: An additional sound channel for voices. Used in TF2 for the announcer.

Constant:    CHAN_VOICE_BASE
Value:       8 (int)
Description: The sound channel used for network voice data (online voice communications).

Constant:    CHAN_WEAPON
Value:       1 (int)
Description: The sound channel for player and NPC weapons.

Constant:    CLASS_ANTLION
Value:       4 (int)
Description: Used by antlions, antlion guards, etc.

Constant:    CLASS_BARNACLE
Value:       5 (int)
Description: Used by barnacles.

Constant:    CLASS_BULLSEYE
Value:       6 (int)
Description: Used by npc_bullseye.

Constant:    CLASS_CITIZEN_PASSIVE
Value:       7 (int)
Description: Used by citizens when the "gordon_precriminal" or "citizens_passive" states are enabled.

Constant:    CLASS_CITIZEN_REBEL
Value:       8 (int)
Description: UNUSED IN HL2. Rebels normally use CLASS_PLAYER_ALLY.

Constant:    CLASS_COMBINE
Value:       9 (int)
Description: Used by Combine soldiers, Combine turrets, and other misc. Combine NPCs.

Constant:    CLASS_COMBINE_GUNSHIP
Value:       10 (int)
Description: Used by Combine gunships, helicopters, etc.

Constant:    CLASS_COMBINE_HUNTER
Value:       25 (int)
Description: Used by Combine hunters.

Constant:    CLASS_CONSCRIPT
Value:       11 (int)
Description: UNUSED IN HL2. Would've been used by conscripts.

Constant:    CLASS_EARTH_FAUNA
Value:       23 (int)
Description: Used by birds and other terrestrial animals.

Constant:    CLASS_FLARE
Value:       22 (int)
Description: Used by env_flares.

Constant:    CLASS_HACKED_ROLLERMINE
Value:       24 (int)
Description: Used by rollermines which were hacked by Alyx.

Constant:    CLASS_HEADCRAB
Value:       12 (int)
Description: Used by headcrabs.

Constant:    CLASS_MANHACK
Value:       13 (int)
Description: Used by Combine manhacks.

Constant:    CLASS_METROPOLICE
Value:       14 (int)
Description: Used by Combine metrocops.

Constant:    CLASS_MILITARY
Value:       15 (int)
Description: In HL2, this is only used by npc_combinecamera and func_guntarget. This appears to be recognized as a Combine class.

Constant:    CLASS_MISSILE
Value:       21 (int)
Description: Used by RPG and APC missiles.

Constant:    CLASS_NONE
Value:       0 (int)
Description: No class.

Constant:    CLASS_PLAYER
Value:       1 (int)
Description: Used by players.

Constant:    CLASS_PLAYER_ALLY
Value:       2 (int)
Description: Used by citizens, hacked manhacks, and other misc. allies.

Constant:    CLASS_PLAYER_ALLY_VITAL
Value:       3 (int)
Description: Used by Alyx, Barney, and other allies vital to HL2.

Constant:    CLASS_PROTOSNIPER
Value:       20 (int)
Description: Used by Combine snipers.

Constant:    CLASS_SCANNER
Value:       16 (int)
Description: Used by Combine city scanners and claw scanners.

Constant:    CLASS_STALKER
Value:       17 (int)
Description: Used by Combine stalkers.

Constant:    CLASS_VORTIGAUNT
Value:       18 (int)
Description: Used by vortigaunts.

Constant:    CLASS_ZOMBIE
Value:       19 (int)
Description: Used by zombies.

Constant:    CLIENT_DLL
Value:       0 (int)

Constant:    COLLISION_GROUP_BREAKABLE_GLASS
Value:       6 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_DEBRIS
Value:       1 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_DEBRIS_TRIGGER
Value:       2 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_DISSOLVING
Value:       16 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_DOOR_BLOCKER
Value:       14 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_INTERACTIVE
Value:       4 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_INTERACTIVE_DEBRIS
Value:       3 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_IN_VEHICLE
Value:       10 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_NONE
Value:       0 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_NPC
Value:       9 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_NPC_ACTOR
Value:       18 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_NPC_SCRIPTED
Value:       19 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_PASSABLE_DOOR
Value:       15 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_PLAYER
Value:       5 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_PLAYER_MOVEMENT
Value:       8 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_PROJECTILE
Value:       13 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_PUSHAWAY
Value:       17 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_VEHICLE
Value:       7 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_VEHICLE_CLIP
Value:       12 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_WEAPON
Value:       11 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    CONTENTS_AREAPORTAL
Value:       32768 (int)
Description: Spatial content flags.

Constant:    CONTENTS_AUX
Value:       4 (int)
Description: Spatial content flags.

Constant:    CONTENTS_BLOCKLOS
Value:       64 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_0
Value:       262144 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_180
Value:       1048576 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_270
Value:       2097152 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_90
Value:       524288 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_DOWN
Value:       8388608 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_UP
Value:       4194304 (int)
Description: Spatial content flags.

Constant:    CONTENTS_DEBRIS
Value:       67108864 (int)
Description: Spatial content flags.

Constant:    CONTENTS_DETAIL
Value:       134217728 (int)
Description: Spatial content flags.

Constant:    CONTENTS_EMPTY
Value:       0 (int)
Description: Spatial content flags.

Constant:    CONTENTS_GRATE
Value:       8 (int)
Description: Spatial content flags.

Constant:    CONTENTS_HITBOX
Value:       1073741824 (int)
Description: Spatial content flags.

Constant:    CONTENTS_IGNORE_NODRAW_OPAQUE
Value:       8192 (int)
Description: Spatial content flags.

Constant:    CONTENTS_LADDER
Value:       536870912 (int)
Description: Spatial content flags.

Constant:    CONTENTS_MONSTER
Value:       33554432 (int)
Description: Spatial content flags.

Constant:    CONTENTS_MONSTERCLIP
Value:       131072 (int)
Description: Spatial content flags.

Constant:    CONTENTS_MOVEABLE
Value:       16384 (int)
Description: Spatial content flags.

Constant:    CONTENTS_OPAQUE
Value:       128 (int)
Description: Spatial content flags.

Constant:    CONTENTS_ORIGIN
Value:       16777216 (int)
Description: Spatial content flags.

Constant:    CONTENTS_PLAYERCLIP
Value:       65536 (int)
Description: Spatial content flags.

Constant:    CONTENTS_SLIME
Value:       16 (int)
Description: Spatial content flags.

Constant:    CONTENTS_SOLID
Value:       1 (int)
Description: Spatial content flags.

Constant:    CONTENTS_TEAM1
Value:       2048 (int)
Description: Spatial content flags.

Constant:    CONTENTS_TEAM2
Value:       4096 (int)
Description: Spatial content flags.

Constant:    CONTENTS_TESTFOGVOLUME
Value:       256 (int)
Description: Spatial content flags.

Constant:    CONTENTS_TRANSLUCENT
Value:       268435456 (int)
Description: Spatial content flags.

Constant:    CONTENTS_WATER
Value:       32 (int)
Description: Spatial content flags.

Constant:    CONTENTS_WINDOW
Value:       2 (int)
Description: Spatial content flags.

Constant:    DAMAGE_AIM
Value:       3 (int)
Description: (Use with GetTakeDamage/SetTakeDamage)

Constant:    DAMAGE_EVENTS_ONLY
Value:       1 (int)
Description: Call damage functions, but don't modify health (Use with GetTakeDamage/SetTakeDamage)

Constant:    DAMAGE_NO
Value:       0 (int)
Description: Don't take damage (Use with GetTakeDamage/SetTakeDamage)

Constant:    DAMAGE_YES
Value:       2 (int)
Description: Allow damage to be taken (Use with GetTakeDamage/SetTakeDamage)

Constant:    DEG2RAD
Value:       0.017453 (float)

Constant:    DMG_ACID
Value:       1048576 (int)
Description: Damage type used in damage information.

Constant:    DMG_AIRBOAT
Value:       33554432 (int)
Description: Damage type used in damage information.

Constant:    DMG_ALWAYSGIB
Value:       8192 (int)
Description: Damage type used in damage information.

Constant:    DMG_BLAST
Value:       64 (int)
Description: Damage type used in damage information.

Constant:    DMG_BLAST_SURFACE
Value:       134217728 (int)
Description: Damage type used in damage information.

Constant:    DMG_BUCKSHOT
Value:       536870912 (int)
Description: Damage type used in damage information.

Constant:    DMG_BULLET
Value:       2 (int)
Description: Damage type used in damage information.

Constant:    DMG_BURN
Value:       8 (int)
Description: Damage type used in damage information.

Constant:    DMG_CLUB
Value:       128 (int)
Description: Damage type used in damage information.

Constant:    DMG_CRUSH
Value:       1 (int)
Description: Damage type used in damage information.

Constant:    DMG_DIRECT
Value:       268435456 (int)
Description: Damage type used in damage information.

Constant:    DMG_DISSOLVE
Value:       67108864 (int)
Description: Damage type used in damage information.

Constant:    DMG_DROWN
Value:       16384 (int)
Description: Damage type used in damage information.

Constant:    DMG_DROWNRECOVER
Value:       524288 (int)
Description: Damage type used in damage information.

Constant:    DMG_ENERGYBEAM
Value:       1024 (int)
Description: Damage type used in damage information.

Constant:    DMG_FALL
Value:       32 (int)
Description: Damage type used in damage information.

Constant:    DMG_GENERIC
Value:       0 (int)
Description: Damage type used in damage information.

Constant:    DMG_NERVEGAS
Value:       65536 (int)
Description: Damage type used in damage information.

Constant:    DMG_NEVERGIB
Value:       4096 (int)
Description: Damage type used in damage information.

Constant:    DMG_PARALYZE
Value:       32768 (int)
Description: Damage type used in damage information.

Constant:    DMG_PHYSGUN
Value:       8388608 (int)
Description: Damage type used in damage information.

Constant:    DMG_PLASMA
Value:       16777216 (int)
Description: Damage type used in damage information.

Constant:    DMG_POISON
Value:       131072 (int)
Description: Damage type used in damage information.

Constant:    DMG_PREVENT_PHYSICS_FORCE
Value:       2048 (int)
Description: Damage type used in damage information.

Constant:    DMG_RADIATION
Value:       262144 (int)
Description: Damage type used in damage information.

Constant:    DMG_REMOVENORAGDOLL
Value:       4194304 (int)
Description: Damage type used in damage information.

Constant:    DMG_SHOCK
Value:       256 (int)
Description: Damage type used in damage information.

Constant:    DMG_SLASH
Value:       4 (int)
Description: Damage type used in damage information.

Constant:    DMG_SLOWBURN
Value:       2097152 (int)
Description: Damage type used in damage information.

Constant:    DMG_SONIC
Value:       512 (int)
Description: Damage type used in damage information.

Constant:    DMG_VEHICLE
Value:       16 (int)
Description: Damage type used in damage information.

Constant:    D_ER
Value:       0 (int)
Description: 'Error' relationship definition. Used by NPCs and players for relationship disposition.

Constant:    D_FR
Value:       2 (int)
Description: Denotes a 'Fear' relationship. Used by NPCs and players for relationship disposition.

Constant:    D_HT
Value:       1 (int)
Description: Denotes a 'Hate' relationship. Used by NPCs and players for relationship disposition.

Constant:    D_LI
Value:       3 (int)
Description: Denotes a 'Like' relationship. Used by NPCs and players for relationship disposition.

Constant:    D_NU
Value:       4 (int)
Description: Denotes a 'Neutral' relationship. Used by NPCs and players for relationship disposition.

Constant:    EFL_BOT_FROZEN
Value:       256 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_CHECK_UNTOUCH
Value:       16777216 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_ABSANGVELOCITY
Value:       8192 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_ABSTRANSFORM
Value:       2048 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_ABSVELOCITY
Value:       4096 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_SHADOWUPDATE
Value:       32 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_SPATIAL_PARTITION
Value:       32768 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS
Value:       16384 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DONTBLOCKLOS
Value:       33554432 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DONTWALKON
Value:       67108864 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DORMANT
Value:       2 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_FORCE_CHECK_TRANSMIT
Value:       128 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_HAS_PLAYER_CHILD
Value:       16 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_IN_SKYBOX
Value:       131072 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_IS_BEING_LIFTED_BY_BARNACLE
Value:       1048576 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_KEEP_ON_RECREATE_ENTITIES
Value:       16 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_KILLME
Value:       1 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NOCLIP_ACTIVE
Value:       4 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NOTIFY
Value:       64 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_AUTO_EDICT_ATTACH
Value:       1024 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_DAMAGE_FORCES
Value:       -2147483648 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_DISSOLVE
Value:       134217728 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_GAME_PHYSICS_SIMULATION
Value:       8388608 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_MEGAPHYSCANNON_RAGDOLL
Value:       268435456 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_PHYSCANNON_INTERACTION
Value:       1073741824 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_ROTORWASH_PUSH
Value:       2097152 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_THINK_FUNCTION
Value:       4194304 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_WATER_VELOCITY_CHANGE
Value:       536870912 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_PLUGIN_BASED_BOT
Value:       65536 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_SERVER_ONLY
Value:       512 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_SETTING_UP_BONES
Value:       8 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_TOUCHING_FLUID
Value:       524288 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_USE_PARTITION_WHEN_NOT_SOLID
Value:       262144 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EF_BONEMERGE
Value:       1 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_BONEMERGE_FASTCULL
Value:       128 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_BRIGHTLIGHT
Value:       2 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_DIMLIGHT
Value:       4 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_ITEM_BLINK
Value:       256 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_NODRAW
Value:       32 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_NOINTERP
Value:       8 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_NORECEIVESHADOW
Value:       64 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_NOSHADOW
Value:       16 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_PARENT_ANIMATES
Value:       512 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    FCVAR_ACCESSIBLE_FROM_THREADS
Value:       33554432 (int)
Description: If this convar flag is set, it will be accessible from the material system thread.

Constant:    FCVAR_ARCHIVE
Value:       128 (int)
Description: If this convar flag is set, its value will be saved when the game is exited.

Constant:    FCVAR_ARCHIVE_XBOX
Value:       16777216 (int)
Description: If this convar flag is set, it will be archived on the Xbox config.

Constant:    FCVAR_CHEAT
Value:       16384 (int)
Description: Only useable in singleplayer / debug / multiplayer & sv_cheats

Constant:    FCVAR_CLIENTCMD_CAN_EXECUTE
Value:       1073741824 (int)
Description: If this convar flag is set, any client will be allowed to execute this command.

Constant:    FCVAR_CLIENTDLL
Value:       8 (int)
Description: This convar flag is defined in client DLL convars.

Constant:    FCVAR_DEMO
Value:       65536 (int)
Description: If this convar flag is set, it will be recorded when starting a demo file.

Constant:    FCVAR_DEVELOPMENTONLY
Value:       2 (int)
Description: If this convar flag is set, it's hidden in "retail" DLLs.

Constant:    FCVAR_DONTRECORD
Value:       131072 (int)
Description: If this convar flag is set, it will NOT be recorded when starting a demo file.

Constant:    FCVAR_GAMEDLL
Value:       4 (int)
Description: This convar flag is defined in server DLL convars.

Constant:    FCVAR_HIDDEN
Value:       16 (int)
Description: If this convar flag is set, it doesn't appear in the console or any searching tools, but it can still be set.

Constant:    FCVAR_MATERIAL_SYSTEM_THREAD
Value:       8388608 (int)
Description: This convar flag indicates it's read from the material system thread.

Constant:    FCVAR_NEVER_AS_STRING
Value:       4096 (int)
Description: If this convar flag is set, it will never be printed as a string.

Constant:    FCVAR_NONE
Value:       0 (int)
Description: Empty convar flag.

Constant:    FCVAR_NOTIFY
Value:       256 (int)
Description: If this convar flag is set, it will notify players when it is changed.

Constant:    FCVAR_NOT_CONNECTED
Value:       4194304 (int)
Description: If this convar flag is set, it cannot be changed by a client connected to the server.

Constant:    FCVAR_PRINTABLEONLY
Value:       1024 (int)
Description: If this convar flag is set, it cannot contain unprintable characters. Used for player name cvars, etc.

Constant:    FCVAR_PROTECTED
Value:       32 (int)
Description: This convar flag prevents convars with secure data (e.g. passwords) from sending full data to clients, only sending 1 if non-zero and 0 otherwise.

Constant:    FCVAR_RELOAD_MATERIALS
Value:       1048576 (int)
Description: If this convar flag is set, it will force a material reload when it changes.

Constant:    FCVAR_RELOAD_TEXTURES
Value:       2097152 (int)
Description: If this convar flag is set, it will force a texture reload when it changes.

Constant:    FCVAR_REPLICATED
Value:       8192 (int)
Description: If this convar flag is set, it will enforce a serverside value on any clientside counterparts. (also known as FCVAR_SERVER)

Constant:    FCVAR_SERVER_CANNOT_QUERY
Value:       536870912 (int)
Description: If this convar flag is set, the server will not be allowed to query its value.

Constant:    FCVAR_SERVER_CAN_EXECUTE
Value:       268435456 (int)
Description: If this convar flag is set, the server will be allowed to execute it as a client command.

Constant:    FCVAR_SPONLY
Value:       64 (int)
Description: If this convar flag is set, it can't be changed by clients connected to a multiplayer server.

Constant:    FCVAR_UNLOGGED
Value:       2048 (int)
Description: If this convar flag is set, it will not log its changes if a log is being created.

Constant:    FCVAR_UNREGISTERED
Value:       1 (int)
Description: If this convar flag is set, it isn't added to linked list, etc.

Constant:    FCVAR_USERINFO
Value:       512 (int)
Description: If this convar flag is set, it will be marked as info which plays a part in how the server identifies a client.

Constant:    FL_AIMTARGET
Value:       65536 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_ATCONTROLS
Value:       64 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_BASEVELOCITY
Value:       8388608 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_CLIENT
Value:       128 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_CONVEYOR
Value:       4096 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_DISSOLVING
Value:       268435456 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_DONTTOUCH
Value:       4194304 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_DUCKING
Value:       2 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_FAKECLIENT
Value:       256 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_FLY
Value:       1024 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_FROZEN
Value:       32 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_GODMODE
Value:       16384 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_GRAPHED
Value:       524288 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_GRENADE
Value:       1048576 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_INRAIN
Value:       16 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_INWATER
Value:       512 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_KILLME
Value:       67108864 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_NOTARGET
Value:       32768 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_NPC
Value:       8192 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_OBJECT
Value:       33554432 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_ONFIRE
Value:       134217728 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_ONGROUND
Value:       1 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_ONTRAIN
Value:       8 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_PARTIALGROUND
Value:       131072 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_STATICPROP
Value:       262144 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_STEPMOVEMENT
Value:       2097152 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_SWIM
Value:       2048 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_TRANSRAGDOLL
Value:       536870912 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_UNBLOCKABLE_BY_PLAYER
Value:       1073741824 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_WATERJUMP
Value:       4 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_WORLDBRUSH
Value:       16777216 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FSOLID_COLLIDE_WITH_OWNER
Value:       1024 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_CUSTOMBOXTEST
Value:       2 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_CUSTOMRAYTEST
Value:       1 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_FORCE_WORLD_ALIGNED
Value:       64 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_NOT_SOLID
Value:       4 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_NOT_STANDABLE
Value:       16 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_ROOT_PARENT_ALIGNED
Value:       256 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_TRIGGER
Value:       8 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_TRIGGER_TOUCH_DEBRIS
Value:       512 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_USE_TRIGGER_BOUNDS
Value:       128 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_VOLUME_CONTENTS
Value:       32 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    GENDER_FEMALE
Value:       2 (int)
Description: A standard value used to represent female gender. Usually used for sounds.

Constant:    GENDER_MALE
Value:       1 (int)
Description: A standard value used to represent male gender. Usually used for sounds.

Constant:    GENDER_NONE
Value:       0 (int)
Description: A standard value used to represent no specific gender. Usually used for sounds.

Constant:    GLOBAL_DEAD
Value:       2 (int)
Description: Global state used by the Globals singleton.

Constant:    GLOBAL_OFF
Value:       0 (int)
Description: Global state used by the Globals singleton.

Constant:    GLOBAL_ON
Value:       1 (int)
Description: Global state used by the Globals singleton.

Constant:    Hitgroup.Chest
Value:       2 (int)

Constant:    Hitgroup.Gear
Value:       10 (int)

Constant:    Hitgroup.Generic
Value:       0 (int)

Constant:    Hitgroup.Head
Value:       1 (int)

Constant:    Hitgroup.LeftArm
Value:       4 (int)

Constant:    Hitgroup.LeftLeg
Value:       6 (int)

Constant:    Hitgroup.RightArm
Value:       5 (int)

Constant:    Hitgroup.RightLeg
Value:       7 (int)

Constant:    Hitgroup.Stomach
Value:       3 (int)

Constant:    IN.ALT1
Value:       16384 (int)
Description: Button for +alt1

Constant:    IN.ALT2
Value:       32768 (int)
Description: Button for +alt2

Constant:    IN.ATTACK
Value:       1 (int)
Description: Button for +attack

Constant:    IN.ATTACK2
Value:       2048 (int)
Description: Button for +attack2

Constant:    IN.ATTACK3
Value:       33554432 (int)
Description: Button for +attack3

Constant:    IN.BACK
Value:       16 (int)
Description: Button for +back

Constant:    IN.BULLRUSH
Value:       4194304 (int)
Description: Unused button

Constant:    IN.CANCEL
Value:       64 (int)
Description: Special button flag for attack cancel

Constant:    IN.DUCK
Value:       4 (int)
Description: Button for +duck

Constant:    IN.FORWARD
Value:       8 (int)
Description: Button for +forward

Constant:    IN.GRENADE1
Value:       8388608 (int)
Description: Button for +grenade1

Constant:    IN.GRENADE2
Value:       16777216 (int)
Description: Button for +grenade2

Constant:    IN.JUMP
Value:       2 (int)
Description: Button for +jump

Constant:    IN.LEFT
Value:       128 (int)
Description: Button for +left

Constant:    IN.MOVELEFT
Value:       512 (int)
Description: Button for +moveleft

Constant:    IN.MOVERIGHT
Value:       1024 (int)
Description: Button for +moveright

Constant:    IN.RELOAD
Value:       8192 (int)
Description: Button for +reload

Constant:    IN.RIGHT
Value:       256 (int)
Description: Button for +right

Constant:    IN.RUN
Value:       4096 (int)
Description: Unused button (see IN.SPEED for sprint)

Constant:    IN.SCORE
Value:       65536 (int)
Description: Button for +score

Constant:    IN.SPEED
Value:       131072 (int)
Description: Button for +speed

Constant:    IN.USE
Value:       32 (int)
Description: Button for +use

Constant:    IN.WALK
Value:       262144 (int)
Description: Button for +walk

Constant:    IN.WEAPON1
Value:       1048576 (int)
Description: Special button used by weapons themselves

Constant:    IN.WEAPON2
Value:       2097152 (int)
Description: Special button used by weapons themselves

Constant:    IN.ZOOM
Value:       524288 (int)
Description: Button for +zoom

Constant:    LAST_VISIBLE_CONTENTS
Value:       128 (int)
Description: Contains last visible spatial content flags.

Constant:    MAPBASE_VERSION
Value:       "7.1" (string)
Description: The current Mapbase version according to when the VScript library was last compiled.

Constant:    MAPBASE_VER_INT
Value:       7100 (int)
Description: The current Mapbase version integer according to when the VScript library was last compiled.

Constant:    MASK_BLOCKLOS
Value:       16449 (int)
Description: Spatial content mask representing objects which block LOS for AI (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_BLOCKLOS)

Constant:    MASK_BLOCKLOS_AND_NPCS
Value:       33570881 (int)
Description: Spatial content mask equivalent to MASK_BLOCKLOS, but also including NPCs (MASK_BLOCKLOS|CONTENTS_MONSTER)

Constant:    MASK_NPCSOLID
Value:       33701899 (int)
Description: Spatial content mask representing objects solid to NPCs, including NPC clips (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_MONSTERCLIP|CONTENTS_WINDOW|CONTENTS_MONSTER|CONTENTS_GRATE)

Constant:    MASK_NPCSOLID_BRUSHONLY
Value:       147467 (int)
Description: Spatial content mask equivalent to MASK_NPCSOLID, but without NPCs (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_MONSTERCLIP|CONTENTS_GRATE)

Constant:    MASK_NPCWORLDSTATIC
Value:       131083 (int)
Description: Spatial content mask representing objects static to NPCs, used for nodegraph rebuilding (CONTENTS_SOLID|CONTENTS_WINDOW|CONTENTS_MONSTERCLIP|CONTENTS_GRATE)

Constant:    MASK_OPAQUE
Value:       16513 (int)
Description: Spatial content mask representing objects which block lighting (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_OPAQUE)

Constant:    MASK_OPAQUE_AND_NPCS
Value:       33570945 (int)
Description: Spatial content mask equivalent to MASK_OPAQUE, but also including NPCs (MASK_OPAQUE|CONTENTS_MONSTER)

Constant:    MASK_PLAYERSOLID
Value:       33636363 (int)
Description: Spatial content mask representing objects solid to the player, including player clips (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_PLAYERCLIP|CONTENTS_WINDOW|CONTENTS_MONSTER|CONTENTS_GRATE)

Constant:    MASK_PLAYERSOLID_BRUSHONLY
Value:       81931 (int)
Description: Spatial content mask equivalent to MASK_PLAYERSOLID, but without NPCs (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_PLAYERCLIP|CONTENTS_GRATE)

Constant:    MASK_SHOT
Value:       1174421507 (int)
Description: Spatial content mask representing objects solid to bullets (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_MONSTER|CONTENTS_WINDOW|CONTENTS_DEBRIS|CONTENTS_HITBOX)

Constant:    MASK_SHOT_HULL
Value:       100679691 (int)
Description: Spatial content mask representing objects solid to non-raycasted weapons, including grates (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_MONSTER|CONTENTS_WINDOW|CONTENTS_DEBRIS|CONTENTS_GRATE)

Constant:    MASK_SHOT_PORTAL
Value:       33570819 (int)
Description: Spatial content mask equivalent to MASK_SHOT, but excluding debris and not using expensive hitbox calculations (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_MONSTER)

Constant:    MASK_SOLID
Value:       33570827 (int)
Description: Spatial content mask representing solid objects (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_MONSTER|CONTENTS_GRATE)

Constant:    MASK_SOLID_BRUSHONLY
Value:       16395 (int)
Description: Spatial content mask equivalent to MASK_SOLID, but without NPCs (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_GRATE)

Constant:    MASK_SPLITAREAPORTAL
Value:       48 (int)
Description: Spatial content mask representing objects which can split areaportals (CONTENTS_WATER|CONTENTS_SLIME)

Constant:    MASK_VISIBLE
Value:       24705 (int)
Description: Spatial content mask representing objects which block LOS for players (MASK_OPAQUE|CONTENTS_IGNORE_NODRAW_OPAQUE)

Constant:    MASK_VISIBLE_AND_NPCS
Value:       33579137 (int)
Description: Spatial content mask equivalent to MASK_VISIBLE, but also including NPCs (MASK_OPAQUE_AND_NPCS|CONTENTS_IGNORE_NODRAW_OPAQUE)

Constant:    MASK_WATER
Value:       16432 (int)
Description: Spatial content mask representing water and slime solids (CONTENTS_WATER|CONTENTS_MOVEABLE|CONTENTS_SLIME)

Constant:    MAX_COORD_FLOAT
Value:       16384.000000 (float)
Description: Maximum float coordinate.

Constant:    MAX_TRACE_LENGTH
Value:       56755.839844 (float)
Description: Maximum traceable distance (assumes cubic world and trace from one corner to opposite).

Constant:    MOVETYPE_CUSTOM
Value:       11 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_FLY
Value:       4 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_FLYGRAVITY
Value:       5 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_ISOMETRIC
Value:       1 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_LADDER
Value:       9 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_NOCLIP
Value:       8 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_NONE
Value:       0 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_OBSERVER
Value:       10 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_PUSH
Value:       7 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_STEP
Value:       3 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_VPHYSICS
Value:       6 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_WALK
Value:       2 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MapLoad.Background
Value:       3 (int)
Description: Map was loaded as a background map

Constant:    MapLoad.LoadGame
Value:       1 (int)
Description: Map was loaded from a save file

Constant:    MapLoad.NewGame
Value:       0 (int)
Description: Map was loaded from a new game

Constant:    MapLoad.Transition
Value:       2 (int)
Description: Map was loaded from a level transition

Constant:    NPC_STATE_ALERT
Value:       2 (int)
Description: NPC state type used in GetNPCState(), etc.

Constant:    NPC_STATE_COMBAT
Value:       3 (int)
Description: NPC state type used in GetNPCState(), etc.

Constant:    NPC_STATE_DEAD
Value:       7 (int)
Description: NPC state type used in GetNPCState(), etc.

Constant:    NPC_STATE_IDLE
Value:       1 (int)
Description: NPC state type used in GetNPCState(), etc.

Constant:    NPC_STATE_INVALID
Value:       -1 (int)
Description: NPC state type used in GetNPCState(), etc.

Constant:    NPC_STATE_NONE
Value:       0 (int)
Description: NPC state type used in GetNPCState(), etc.

Constant:    NPC_STATE_PLAYDEAD
Value:       5 (int)
Description: NPC state type used in GetNPCState(), etc.

Constant:    NPC_STATE_PRONE
Value:       6 (int)
Description: When in clutches of barnacle (NPC state type used in GetNPCState(), etc.)

Constant:    NPC_STATE_SCRIPT
Value:       4 (int)
Description: NPC state type used in GetNPCState(), etc.

Constant:    NUM_AI_CLASSES
Value:       26 (int)
Description: Number of AI classes.

Constant:    PITCH_HIGH
Value:       120 (int)
Description: The standard high pitch value.

Constant:    PITCH_LOW
Value:       95 (int)
Description: The standard low pitch value.

Constant:    PITCH_NORM
Value:       100 (int)
Description: The standard pitch value.

Constant:    RAD2DEG
Value:       57.295780 (float)

Constant:    ROPE_BARBED
Value:       2 (int)
Description: Hack option to draw like a barbed wire. (for use in rope flags)

Constant:    ROPE_BREAKABLE
Value:       16 (int)
Description: Can the endpoints detach? (for use in rope flags)

Constant:    ROPE_COLLIDE
Value:       4 (int)
Description: Collide with the world. (for use in rope flags)

Constant:    ROPE_GRAVITY
Value:       Vector( 0.000000, 0.000000, -1500.000000 ) (Vector)
Description: Default rope gravity vector.

Constant:    ROPE_INITIAL_HANG
Value:       64 (int)
Description: By default, ropes will simulate for a bit internally when they are created so they sag, but dynamically created ropes for things like harpoons don't want this. (for use in rope flags)

Constant:    ROPE_NO_GRAVITY
Value:       256 (int)
Description: Disable gravity on this rope. (for use in rope flags)

Constant:    ROPE_NUMFLAGS
Value:       9 (int)
Description: The number of rope flags recognized by the game.

Constant:    ROPE_PLAYER_WPN_ATTACH
Value:       128 (int)
Description: If this flag is set, then the second attachment must be a player. The rope will attach to "buff_attach" on the player's active weapon. This is a flag because it requires special code on the client to find the weapon. (for use in rope flags)

Constant:    ROPE_RESIZE
Value:       1 (int)
Description: Try to keep the rope dangling the same amount even as the rope length changes. (for use in rope flags)

Constant:    ROPE_SIMULATE
Value:       8 (int)
Description: Is the rope valid? (for use in rope flags)

Constant:    ROPE_USE_WIND
Value:       32 (int)
Description: Wind simulation on this rope. (for use in rope flags)

Constant:    RenderMode.Additive
Value:       5 (int)

Constant:    RenderMode.AdditiveFractionalFrame
Value:       7 (int)

Constant:    RenderMode.AlphaAdd
Value:       8 (int)

Constant:    RenderMode.Color
Value:       1 (int)

Constant:    RenderMode.Environmental
Value:       6 (int)

Constant:    RenderMode.Glow
Value:       3 (int)

Constant:    RenderMode.None
Value:       10 (int)

Constant:    RenderMode.Normal
Value:       0 (int)

Constant:    RenderMode.Solid
Value:       4 (int)

Constant:    RenderMode.Texture
Value:       2 (int)

Constant:    RenderMode.WorldSpaceGlow
Value:       9 (int)

Constant:    SCRIPT_CLEANUP
Value:       3 (int)
Description: Cancelling the script / cleaning up.

Constant:    SCRIPT_PLAYING
Value:       0 (int)
Description: Moving to the scripted sequence position while playing a custom movement animation.

Constant:    SCRIPT_POST_IDLE
Value:       2 (int)
Description: Playing the post idle animation after playing the action animation.

Constant:    SCRIPT_RUN_TO_MARK
Value:       5 (int)
Description: Running to the scripted sequence position.

Constant:    SCRIPT_WAIT
Value:       1 (int)
Description: Waiting on everyone in the script to be ready. Plays the pre idle animation if there is one.

Constant:    SCRIPT_WALK_TO_MARK
Value:       4 (int)
Description: Walking to the scripted sequence position.

Constant:    SERVER_DLL
Value:       1 (int)

Constant:    SNDLVL_100dB
Value:       100 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_105dB
Value:       105 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_110dB
Value:       110 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_120dB
Value:       120 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_130dB
Value:       130 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_140dB
Value:       140 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_150dB
Value:       150 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_180dB
Value:       180 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_20dB
Value:       20 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_25dB
Value:       25 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_30dB
Value:       30 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_35dB
Value:       35 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_40dB
Value:       40 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_45dB
Value:       45 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_50dB
Value:       50 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_55dB
Value:       55 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_60dB
Value:       60 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_65dB
Value:       65 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_70dB
Value:       70 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_75dB
Value:       75 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_80dB
Value:       80 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_85dB
Value:       85 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_90dB
Value:       90 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_95dB
Value:       95 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_GUNFIRE
Value:       140 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_IDLE
Value:       60 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_NONE
Value:       0 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_NORM
Value:       75 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_STATIC
Value:       66 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_TALKING
Value:       80 (int)
Description: A standard value used for a sound's sound level.

Constant:    SND_CHANGE_PITCH
Value:       2 (int)
Description: Indicates a sound is a pitch change to an already-playing sound.

Constant:    SND_CHANGE_VOL
Value:       1 (int)
Description: Indicates a sound is a volume change to an already-playing sound.

Constant:    SND_DELAY
Value:       16 (int)
Description: Indicates a sound has an initial delay.

Constant:    SND_DO_NOT_OVERWRITE_EXISTING_ON_CHANNEL
Value:       1024 (int)
Description: Prevents a sound from interrupting other sounds on a channel (if the channel supports interruption).

Constant:    SND_IGNORE_NAME
Value:       512 (int)
Description: Used to change all sounds emitted by an entity, regardless of name.

Constant:    SND_IGNORE_PHONEMES
Value:       256 (int)
Description: Prevents the entity emitting this sound from using its phonemes (no lip-syncing).

Constant:    SND_SHOULDPAUSE
Value:       128 (int)
Description: Forces a sound to pause if the game is paused.

Constant:    SND_SPAWNING
Value:       8 (int)
Description: Indicates a sound is spawning, used in some cases for ambients. Not networked.

Constant:    SND_SPEAKER
Value:       64 (int)
Description: Indicates a sound is being played again by a microphone through a speaker.

Constant:    SND_STOP
Value:       4 (int)
Description: Indicates a sound is stopping an already-playing sound.

Constant:    SND_STOP_LOOPING
Value:       32 (int)
Description: Stops all looping sounds on an entity.

Constant:    SOUNDENT_CHANNEL_BULLET_IMPACT
Value:       6 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_INJURY
Value:       5 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_NPC_FOOTSTEP
Value:       7 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_REPEATED_DANGER
Value:       2 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_REPEATED_PHYSICS_DANGER
Value:       3 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_REPEATING
Value:       1 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_SPOOKY_NOISE
Value:       8 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_UNSPECIFIED
Value:       0 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_WEAPON
Value:       4 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_CHANNEL_ZOMBINE_GRENADE
Value:       9 (int)
Description: Sound channel used in QueryHearSound hooks, etc.

Constant:    SOUNDENT_VOLUME_MACHINEGUN
Value:       1500 (int)
Description: Sound volume preset for use in InsertAISound, etc.

Constant:    SOUNDENT_VOLUME_PISTOL
Value:       500 (int)
Description: Sound volume preset for use in InsertAISound, etc.

Constant:    SOUNDENT_VOLUME_SHOTGUN
Value:       1500 (int)
Description: Sound volume preset for use in InsertAISound, etc.

Constant:    SOUND_BUGBAIT
Value:       512 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_BULLET_IMPACT
Value:       16 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_CARCASS
Value:       32 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_COMBAT
Value:       1 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_ALLIES_ONLY
Value:       268435456 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_COMBINE_ONLY
Value:       8388608 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_DANGER_APPROACH
Value:       134217728 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_EXCLUDE_COMBINE
Value:       67108864 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_EXPLOSION
Value:       33554432 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_FROM_SNIPER
Value:       1048576 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_GUNFIRE
Value:       2097152 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_MORTAR
Value:       4194304 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_OWNER_ALLIES
Value:       1073741824 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_PLAYER_VEHICLE
Value:       536870912 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_CONTEXT_REACT_TO_SOURCE
Value:       16777216 (int)
Description: Sound context used in QueryHearSound hooks, etc.

Constant:    SOUND_DANGER
Value:       8 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_DANGER_SNIPERONLY
Value:       2048 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_GARBAGE
Value:       128 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_MEAT
Value:       64 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_MOVE_AWAY
Value:       4096 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_NONE
Value:       0 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_PHYSICS_DANGER
Value:       1024 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_PLAYER
Value:       4 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_PLAYER_VEHICLE
Value:       8192 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_READINESS_HIGH
Value:       65536 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_READINESS_LOW
Value:       16384 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_READINESS_MEDIUM
Value:       32768 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_THUMPER
Value:       256 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    SOUND_WORLD
Value:       2 (int)
Description: Sound type used in QueryHearSound hooks, etc.

Constant:    VECTOR_CONE_10DEGREES
Value:       Vector( 0.087160, 0.087160, 0.087160 ) (Vector)
Description: 10-degree weapon vector cone.

Constant:    VECTOR_CONE_15DEGREES
Value:       Vector( 0.130530, 0.130530, 0.130530 ) (Vector)
Description: 15-degree weapon vector cone.

Constant:    VECTOR_CONE_1DEGREES
Value:       Vector( 0.008730, 0.008730, 0.008730 ) (Vector)
Description: 1-degree weapon vector cone.

Constant:    VECTOR_CONE_20DEGREES
Value:       Vector( 0.173650, 0.173650, 0.173650 ) (Vector)
Description: 20-degree weapon vector cone.

Constant:    VECTOR_CONE_2DEGREES
Value:       Vector( 0.017450, 0.017450, 0.017450 ) (Vector)
Description: 2-degree weapon vector cone.

Constant:    VECTOR_CONE_3DEGREES
Value:       Vector( 0.026180, 0.026180, 0.026180 ) (Vector)
Description: 3-degree weapon vector cone.

Constant:    VECTOR_CONE_4DEGREES
Value:       Vector( 0.034900, 0.034900, 0.034900 ) (Vector)
Description: 4-degree weapon vector cone.

Constant:    VECTOR_CONE_5DEGREES
Value:       Vector( 0.043620, 0.043620, 0.043620 ) (Vector)
Description: 5-degree weapon vector cone.

Constant:    VECTOR_CONE_6DEGREES
Value:       Vector( 0.052340, 0.052340, 0.052340 ) (Vector)
Description: 6-degree weapon vector cone.

Constant:    VECTOR_CONE_7DEGREES
Value:       Vector( 0.061050, 0.061050, 0.061050 ) (Vector)
Description: 7-degree weapon vector cone.

Constant:    VECTOR_CONE_8DEGREES
Value:       Vector( 0.069760, 0.069760, 0.069760 ) (Vector)
Description: 8-degree weapon vector cone.

Constant:    VECTOR_CONE_9DEGREES
Value:       Vector( 0.078460, 0.078460, 0.078460 ) (Vector)
Description: 9-degree weapon vector cone.

Constant:    VECTOR_CONE_PRECALCULATED
Value:       Vector( 0.000000, 0.000000, 0.000000 ) (Vector)
Description: This is just a zero vector, but it adds some context indicating that the person writing the code is not allowing FireBullets() to modify the direction of the shot because the shot direction being passed into the function has already been modified by another piece of code and should be fired as specified.

Constant:    VOL_NORM
Value:       1.000000 (float)
Description: The standard volume value.

Constant:    WEAPON_PROFICIENCY_AVERAGE
Value:       1 (int)
Description: Average weapon proficiency. Causes average accuracy.

Constant:    WEAPON_PROFICIENCY_GOOD
Value:       2 (int)
Description: Good weapon proficiency. Causes good accuracy.

Constant:    WEAPON_PROFICIENCY_INVALID
Value:       -1 (int)
Description: Invalid weapon proficiency.

Constant:    WEAPON_PROFICIENCY_PERFECT
Value:       4 (int)
Description: Perfect weapon proficiency. Causes perfect accuracy.

Constant:    WEAPON_PROFICIENCY_POOR
Value:       0 (int)
Description: Poor weapon proficiency. Causes low accuracy.

Constant:    WEAPON_PROFICIENCY_VERY_GOOD
Value:       3 (int)
Description: Very good weapon proficiency. Causes very good accuracy.

Constant:    WEPCLASS_HANDGUN
Value:       1 (int)
Description: Weapon class for pistols, revolvers, etc.

Constant:    WEPCLASS_HEAVY
Value:       4 (int)
Description: Weapon class for RPGs, etc.

Constant:    WEPCLASS_INVALID
Value:       0 (int)
Description: Invalid weapon class.

Constant:    WEPCLASS_MELEE
Value:       5 (int)
Description: Weapon class for melee weapons.

Constant:    WEPCLASS_RIFLE
Value:       2 (int)
Description: Weapon class for (assault) rifles, SMGs, etc.

Constant:    WEPCLASS_SHOTGUN
Value:       3 (int)
Description: Weapon class for shotguns.

Constant:    WeaponSound.BURST
Value:       5 (int)

Constant:    WeaponSound.DEPLOY
Value:       15 (int)

Constant:    WeaponSound.DOUBLE_NPC
Value:       4 (int)

Constant:    WeaponSound.EMPTY
Value:       0 (int)

Constant:    WeaponSound.MELEE_HIT
Value:       9 (int)

Constant:    WeaponSound.MELEE_HIT_WORLD
Value:       10 (int)

Constant:    WeaponSound.MELEE_MISS
Value:       8 (int)

Constant:    WeaponSound.NUM_SHOOT_SOUND_TYPES
Value:       16 (int)

Constant:    WeaponSound.RELOAD
Value:       6 (int)

Constant:    WeaponSound.RELOAD_NPC
Value:       7 (int)

Constant:    WeaponSound.SINGLE
Value:       1 (int)

Constant:    WeaponSound.SINGLE_NPC
Value:       2 (int)

Constant:    WeaponSound.SPECIAL1
Value:       11 (int)

Constant:    WeaponSound.SPECIAL2
Value:       12 (int)

Constant:    WeaponSound.SPECIAL3
Value:       13 (int)

Constant:    WeaponSound.TAUNT
Value:       14 (int)

Constant:    WeaponSound.WPN_DOUBLE
Value:       3 (int)

Constant:    bits_CAP_AIM_GUN
Value:       536870912 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_ANIMATEDFACE
Value:       8388608 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_AUTO_DOORS
Value:       1024 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_DOORS_GROUP
Value:       3072 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_DUCK
Value:       134217728 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_FRIENDLY_DMG_IMMUNE
Value:       33554432 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_INNATE_MELEE_ATTACK1
Value:       524288 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_INNATE_MELEE_ATTACK2
Value:       1048576 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_INNATE_RANGE_ATTACK1
Value:       131072 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_INNATE_RANGE_ATTACK2
Value:       262144 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_MELEE_ATTACK_GROUP
Value:       98304 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_MOVE_CLIMB
Value:       8 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_MOVE_CRAWL
Value:       32 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_MOVE_FLY
Value:       4 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_MOVE_GROUND
Value:       1 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_MOVE_JUMP
Value:       2 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_MOVE_SHOOT
Value:       64 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_MOVE_SWIM
Value:       16 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_NO_HIT_PLAYER
Value:       268435456 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_NO_HIT_SQUADMATES
Value:       1073741824 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_OPEN_DOORS
Value:       2048 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_RANGE_ATTACK_GROUP
Value:       24576 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_SIMPLE_RADIUS_DAMAGE
Value:       -2147483648 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_SKIP_NAV_GROUND_CHECK
Value:       128 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_SQUAD
Value:       67108864 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_TURN_HEAD
Value:       4096 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_USE
Value:       256 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_USE_SHOT_REGULATOR
Value:       16777216 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_USE_WEAPONS
Value:       2097152 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_WEAPON_MELEE_ATTACK1
Value:       32768 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_WEAPON_MELEE_ATTACK2
Value:       65536 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_WEAPON_RANGE_ATTACK1
Value:       8192 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    bits_CAP_WEAPON_RANGE_ATTACK2
Value:       16384 (int)
Description: NPC/player/weapon capability used in GetCapabilities(), etc.

Constant:    g_interactionHitByPlayerThrownPhysObj
Value:       1 (int)
Description: An interaction which could be used with HandleInteraction or DispatchInteraction. NOTE: These are usually only initialized by certain types of NPCs when an instance of one spawns in the level for the first time!!! (the fact you're seeing this one means there was an NPC in the level which initialized it)

Constant:    g_interactionPlayerPuntedHeavyObject
Value:       2 (int)
Description: An interaction which could be used with HandleInteraction or DispatchInteraction. NOTE: These are usually only initialized by certain types of NPCs when an instance of one spawns in the level for the first time!!! (the fact you're seeing this one means there was an NPC in the level which initialized it)

=====================================
Class:       AI_EnemyInfo_t
Base:
Description: Accessor for information about an enemy.
=====================================

=====================================
Class:       CAI_ActBusyGoal
Base:        CAI_GoalEntity
Description: A goal entity which makes NPCs act busy.
=====================================

=====================================
Class:       CAI_BaseActor
Base:        CAI_BaseNPC
Description: The base class for NPCs which act in complex choreo scenes.
=====================================

=====================================
Class:       CAI_BaseNPC
Base:        CBaseCombatCharacter
Description: The base class all NPCs derive from.
=====================================

=====================================
Class:       CAI_Expresser
Base:
Description: Expresser class for complex speech.
=====================================

=====================================
Class:       CAI_GoalEntity
Base:        CBaseEntity
Description: The base class for goal entities used to control NPC behavior.
=====================================

=====================================
Class:       CAI_Hint
Base:        CBaseEntity
Description: An entity which gives contextual pointers for NPCs.
=====================================

=====================================
Class:       CAI_Network
Base:
Description: The global list of AI nodes.
=====================================

=====================================
Class:       CAI_Squad
Base:
Description: NPC squads used for schedule coordination, sharing information about enemies, etc.
=====================================

=====================================
Class:       CAI_SquadManager
Base:
Description: Manager for NPC squads.
=====================================

=====================================
Class:       CAmmoDef
Base:
Description: The ammo type definition manager.
=====================================

=====================================
Class:       CBaseAnimating
Base:        CBaseEntity
Description: Animating models
=====================================

=====================================
Class:       CBaseAnimatingOverlay
Base:        CBaseAnimating
Description: Animating models which support dynamic animation layers/overlays.
=====================================

=====================================
Class:       CBaseCombatCharacter
Base:        CBaseFlex
Description: The base class shared by players and NPCs.
=====================================

=====================================
Class:       CBaseCombatWeapon
Base:        CBaseAnimating
Description: The base class for all equippable weapons.
=====================================

=====================================
Class:       CBaseEntity
Base:
Description: Root class of all server-side entities
=====================================

=====================================
Class:       CBaseFilter
Base:        CBaseEntity
Description: All entities which could be used as filters.
=====================================

=====================================
Class:       CBaseFlex
Base:        CBaseAnimatingOverlay
Description: Animated characters who have vertex flex capability.
=====================================

=====================================
Class:       CBaseGrenade
Base:        CBaseAnimating
Description: The base class for grenades.
=====================================

=====================================
Class:       CBasePlayer
Base:        CBaseCombatCharacter
Description: The player entity.
=====================================

=====================================
Class:       CBaseTrigger
Base:        CBaseEntity
Description: Trigger entity
=====================================

=====================================
Class:       CConvars
Base:
Description: Provides an interface to convars.
=====================================

=====================================
Class:       CDebugOverlayScriptHelper
Base:
Description: CDebugOverlayScriptHelper
=====================================

=====================================
Class:       CEntities
Base:
Description: The global list of entities
=====================================

=====================================
Class:       CEnvEntityMaker
Base:        CBaseEntity
Description: env_entity_maker
=====================================

=====================================
Class:       CFilterScript
Base:        CBaseFilter
Description: The filter_script entity which allows VScript functions to hook onto filter methods.
=====================================

=====================================
Class:       CFourWheelVehiclePhysics
Base:
Description: Handler for four-wheel vehicle physics.
=====================================

=====================================
Class:       CGameRules
Base:
Description: The container of the game's rules, handling behavior which could be different on a game-by-game basis.
=====================================

=====================================
Class:       CGameTrace
Base:
Description: trace_t
=====================================

=====================================
Class:       CGlobalState
Base:
Description: Global state system.
=====================================

=====================================
Class:       CGlobalSys
Base:
Description: GlobalSys
=====================================

=====================================
Class:       CHL2_Player
Base:        CBasePlayer
Description: The HL2 player entity.
=====================================

=====================================
Class:       CLocalize
Base:
Description: Accesses functions related to localization strings.
=====================================

=====================================
Class:       CLogicExternalData
Base:        CBaseEntity
Description: An entity which loads keyvalues from an external data file.
=====================================

=====================================
Class:       CMapbaseSystem
Base:
Description: All-purpose Mapbase system primarily used for map-specific files.
=====================================

=====================================
Class:       CNPC_Citizen
Base:        CAI_BaseActor
Description: npc_citizen from Half-Life 2
=====================================

=====================================
Class:       CNetMsg
Base:
Description: Network messages
=====================================

=====================================
Class:       CNetPropManager
Base:
Description: Allows reading and updating the network properties of an entity.
=====================================

=====================================
Class:       CPointCommentaryNode
Base:        CBaseAnimating
Description: Commentary nodes which play commentary in commentary mode.
=====================================

=====================================
Class:       CPropVehicle
Base:        CBaseAnimating
Description: The base class for four-wheel physics vehicles.
=====================================

=====================================
Class:       CPropVehicleDriveable
Base:        CPropVehicle
Description: The base class for driveable vehicles.
=====================================

=====================================
Class:       CProtoSniper
Base:        CAI_BaseNPC
Description: Combine sniper NPC.
=====================================

=====================================
Class:       CRagdollProp
Base:        CBaseAnimating
Description: Ragdoll physics prop.
=====================================

=====================================
Class:       CSceneEntity
Base:        CBaseEntity
Description: Choreographed scene which controls animation and/or dialog on one or more actors.
=====================================

=====================================
Class:       CSceneListManager
Base:        CBaseEntity
Description: Stores choreo scenes and cleans them up when a later scene in the list begins playing.
=====================================

=====================================
Class:       CScriptKeyValues
Base:
Description: Wrapper class over KeyValues instance
=====================================

=====================================
Class:       CSound
Base:
Description: A sound NPCs can hear.
=====================================

=====================================
Class:       CTakeDamageInfo
Base:
Description: Damage information handler.
=====================================

=====================================
Class:       CTriggerCamera
Base:        CBaseEntity
Description: Server-side camera entity
=====================================

=====================================
Class:       CUserCmd
Base:
=====================================

=====================================
Class:       CWeaponCustomScripted
Base:        CBaseCombatWeapon
Description: Special weapon class with tons of hooks
=====================================

=====================================
Class:       Color
Base:
=====================================

=====================================
Class:       EmitSound_t
Base:
=====================================

=====================================
Class:       FireBulletsInfo_t
Base:
=====================================

=====================================
Class:       IPhysicsObject
Base:
Description: VPhysics object class.
=====================================

=====================================
Class:       Quaternion
Base:
Description: A quaternion.
=====================================

=====================================
Class:       Vector
Base:
Description: Basic 3-float Vector class.
=====================================

=====================================
Class:       cplane_t
Base:
=====================================

=====================================
Class:       csurface_t
Base:
=====================================

=====================================
Class:       matrix3x4_t
Base:
Description: A 3x4 matrix transform.
=====================================

=====================================
Class:       scriptanimevent_t
Base:
=====================================

=====================================
Class:       surfacedata_t
Base:
=====================================

Function:    AI_EnemyInfo_t::DangerMemory
Signature:   bool AI_EnemyInfo_t::DangerMemory()
Description: Get the memory of danger position w/o enemy pointer.

Function:    AI_EnemyInfo_t::EludedMe
Signature:   bool AI_EnemyInfo_t::EludedMe()
Description: Get whether the enemy is not at the last known location.

Function:    AI_EnemyInfo_t::Enemy
Signature:   handle AI_EnemyInfo_t::Enemy()

Function:    AI_EnemyInfo_t::LastKnownLocation
Signature:   Vector AI_EnemyInfo_t::LastKnownLocation()
Description: Get

Function:    AI_EnemyInfo_t::LastSeenLocation
Signature:   Vector AI_EnemyInfo_t::LastSeenLocation()
Description: Get

Function:    AI_EnemyInfo_t::MobbedMe
Signature:   bool AI_EnemyInfo_t::MobbedMe()
Description: Get whether the enemy was part of a mob at some point.

Function:    AI_EnemyInfo_t::SetDangerMemory
Signature:   void AI_EnemyInfo_t::SetDangerMemory(bool)
Description: Set the memory of danger position w/o enemy pointer.

Function:    AI_EnemyInfo_t::SetEludedMe
Signature:   void AI_EnemyInfo_t::SetEludedMe(bool)
Description: Set whether the enemy is not at the last known location.

Function:    AI_EnemyInfo_t::SetEnemy
Signature:   void AI_EnemyInfo_t::SetEnemy(handle)

Function:    AI_EnemyInfo_t::SetLastKnownLocation
Signature:   void AI_EnemyInfo_t::SetLastKnownLocation(Vector)
Description: Set

Function:    AI_EnemyInfo_t::SetLastSeenLocation
Signature:   void AI_EnemyInfo_t::SetLastSeenLocation(Vector)
Description: Set

Function:    AI_EnemyInfo_t::SetMobbedMe
Signature:   void AI_EnemyInfo_t::SetMobbedMe(bool)
Description: Set whether the enemy was part of a mob at some point.

Function:    AI_EnemyInfo_t::SetTimeAtFirstHand
Signature:   void AI_EnemyInfo_t::SetTimeAtFirstHand(float)
Description: Set the time at which the enemy was seen firsthand.

Function:    AI_EnemyInfo_t::SetTimeFirstSeen
Signature:   void AI_EnemyInfo_t::SetTimeFirstSeen(float)
Description: Set

Function:    AI_EnemyInfo_t::SetTimeLastReacquired
Signature:   void AI_EnemyInfo_t::SetTimeLastReacquired(float)
Description: Set

Function:    AI_EnemyInfo_t::SetTimeLastReceivedDamageFrom
Signature:   void AI_EnemyInfo_t::SetTimeLastReceivedDamageFrom(float)
Description: Set the last time damage was received from this enemy.

Function:    AI_EnemyInfo_t::SetTimeLastSeen
Signature:   void AI_EnemyInfo_t::SetTimeLastSeen(float)
Description: Set

Function:    AI_EnemyInfo_t::SetTimeValidEnemy
Signature:   void AI_EnemyInfo_t::SetTimeValidEnemy(float)
Description: Set the time at which the enemy can be selected (reaction delay).

Function:    AI_EnemyInfo_t::SetUnforgettable
Signature:   void AI_EnemyInfo_t::SetUnforgettable(bool)
Description: Set

Function:    AI_EnemyInfo_t::TimeAtFirstHand
Signature:   float AI_EnemyInfo_t::TimeAtFirstHand()
Description: Get the time at which the enemy was seen firsthand.

Function:    AI_EnemyInfo_t::TimeFirstSeen
Signature:   float AI_EnemyInfo_t::TimeFirstSeen()
Description: Get

Function:    AI_EnemyInfo_t::TimeLastReacquired
Signature:   float AI_EnemyInfo_t::TimeLastReacquired()
Description: Get

Function:    AI_EnemyInfo_t::TimeLastReceivedDamageFrom
Signature:   float AI_EnemyInfo_t::TimeLastReceivedDamageFrom()
Description: Get the last time damage was received from this enemy.

Function:    AI_EnemyInfo_t::TimeLastSeen
Signature:   float AI_EnemyInfo_t::TimeLastSeen()
Description: Get

Function:    AI_EnemyInfo_t::TimeValidEnemy
Signature:   float AI_EnemyInfo_t::TimeValidEnemy()
Description: Get the time at which the enemy can be selected (reaction delay).

Function:    AI_EnemyInfo_t::Unforgettable
Signature:   bool AI_EnemyInfo_t::Unforgettable()
Description: Get

Function:    AddPhysVelocity
Signature:   void AddPhysVelocity(handle, Vector, Vector)
Description: Adds physics velocity for the given VPhysics object

Function:    AddThinkToEnt
Signature:   void AddThinkToEnt(handle, string)
Description: This will put a think function onto an entity, or pass null to remove it. This is NOT chained, so be careful.

Function:    AngleDiff
Signature:   float AngleDiff(float, float)
Description: Returns the degrees difference between two yaw angles.

Function:    AngleDistance
Signature:   float AngleDistance(float, float)

Function:    AngleIMatrix
Signature:   void AngleIMatrix(Vector, Vector, handle)
Description: Sets the inverted angles and position of a matrix.

Function:    AngleMatrix
Signature:   void AngleMatrix(Vector, Vector, handle)
Description: Sets the angles and position of a matrix.

Function:    AngleNormalize
Signature:   float AngleNormalize(float)
Description: Clamps an angle to be in between -360 and 360.

Function:    AngleNormalizePositive
Signature:   float AngleNormalizePositive(float)
Description: Clamps an angle to be in between 0 and 360.

Function:    AngleVectors
Signature:   Vector AngleVectors(Vector)
Description: Turns an angle into a direction vector.

Function:    AnglesAreEqual
Signature:   bool AnglesAreEqual(float, float, float)
Description: Checks if two angles are equal based on a given tolerance value.

Function:    AppearsToBeANumber
Signature:   bool AppearsToBeANumber(string)
Description: Checks if the given string appears to be a number.

Function:    Approach
Signature:   float Approach(float, float, float)

Function:    ApproachAngle
Signature:   float ApproachAngle(float, float, float)
Description: Returns an angle which approaches the target angle from the input angle with the specified speed.

Function:    Bias
Signature:   float Bias(float, float)
Description: The curve is biased towards 0 or 1 based on biasAmt, which is between 0 and 1.

Function:    CAI_ActBusyGoal::ForceBusy
Signature:   void CAI_ActBusyGoal::ForceBusy(handle, handle, bool)
Description: Force a NPC to act busy.

Function:    CAI_ActBusyGoal::ForceBusyComplex
Signature:   void CAI_ActBusyGoal::ForceBusyComplex(handle, handle, bool, bool, bool, float, int, handle)
Description: Force a NPC to act busy with additional parameters.

Function:    CAI_ActBusyGoal::StopBusy
Signature:   void CAI_ActBusyGoal::StopBusy(handle)
Description: Force a NPC to stop busying.

Function:    CAI_BaseActor::AddLookTarget
Signature:   void CAI_BaseActor::AddLookTarget(handle, float, float, float)
Description: Add a potential look target for this actor with the specified importance, duration, and ramp.

Function:    CAI_BaseActor::AddLookTargetPos
Signature:   void CAI_BaseActor::AddLookTargetPos(Vector, float, float, float)
Description: Add a potential look target position for this actor with the specified importance, duration, and ramp.

Function:    CAI_BaseNPC::AddSleepFlags
Signature:   void CAI_BaseNPC::AddSleepFlags(int)
Description: Add to the NPC's sleep flags. (see AI_SLEEP_ set of constants)

Function:    CAI_BaseNPC::CapabilitiesAdd
Signature:   int CAI_BaseNPC::CapabilitiesAdd(int)
Description: Add capabilities to the NPC.

Function:    CAI_BaseNPC::CapabilitiesClear
Signature:   void CAI_BaseNPC::CapabilitiesClear()
Description: Clear capabilities for the NPC.

Function:    CAI_BaseNPC::CapabilitiesGet
Signature:   int CAI_BaseNPC::CapabilitiesGet()
Description: Get the capabilities the NPC currently possesses.

Function:    CAI_BaseNPC::CapabilitiesRemove
Signature:   int CAI_BaseNPC::CapabilitiesRemove(int)
Description: Remove capabilities from the NPC.

Function:    CAI_BaseNPC::ClearCondition
Signature:   void CAI_BaseNPC::ClearCondition(string)
Description: Clear a condition on the NPC.

Function:    CAI_BaseNPC::ClearConditionID
Signature:   void CAI_BaseNPC::ClearConditionID(int)
Description: Clear a condition on the NPC by ID.

Function:    CAI_BaseNPC::ClearSchedule
Signature:   void CAI_BaseNPC::ClearSchedule(string)
Description: Clear the NPC's current schedule for the specified reason.

Function:    CAI_BaseNPC::Crouch
Signature:   bool CAI_BaseNPC::Crouch()
Description: Tells the NPC to crouch.

Function:    CAI_BaseNPC::FindEnemyMemory
Signature:   handle CAI_BaseNPC::FindEnemyMemory(handle)
Description: Get information about the NPC's current enemy.

Function:    CAI_BaseNPC::GetActivity
Signature:   string CAI_BaseNPC::GetActivity()
Description: Get the NPC's current activity.

Function:    CAI_BaseNPC::GetActivityID
Signature:   int CAI_BaseNPC::GetActivityID()
Description: Get the NPC's current activity ID.

Function:    CAI_BaseNPC::GetCine
Signature:   handle CAI_BaseNPC::GetCine()
Description: Get the NPC's currently running scripted sequence if it has one.

Function:    CAI_BaseNPC::GetEnemy
Signature:   handle CAI_BaseNPC::GetEnemy()
Description: Get the NPC's current enemy.

Function:    CAI_BaseNPC::GetEnemyLKP
Signature:   Vector CAI_BaseNPC::GetEnemyLKP()
Description: Get the last known position of the NPC's current enemy.

Function:    CAI_BaseNPC::GetExpresser
Signature:   handle CAI_BaseNPC::GetExpresser()
Description: Get a handle for this NPC's expresser.

Function:    CAI_BaseNPC::GetGestureVersionOfActivity
Signature:   string CAI_BaseNPC::GetGestureVersionOfActivity(string)
Description: Get the gesture activity counterpart of the specified sequence activity, if one exists.

Function:    CAI_BaseNPC::GetGestureVersionOfActivityID
Signature:   int CAI_BaseNPC::GetGestureVersionOfActivityID(int)
Description: Get the gesture activity ID counterpart of the specified sequence activity ID, if one exists.

Function:    CAI_BaseNPC::GetHintGroup
Signature:   string CAI_BaseNPC::GetHintGroup()
Description: Get the name of the NPC's hint group.

Function:    CAI_BaseNPC::GetHintNode
Signature:   handle CAI_BaseNPC::GetHintNode()
Description: Get the NPC's current AI hint.

Function:    CAI_BaseNPC::GetLastAttackTime
Signature:   float CAI_BaseNPC::GetLastAttackTime()
Description: Get the last time the NPC has used an attack (e.g. fired a bullet from a gun).

Function:    CAI_BaseNPC::GetLastDamageTime
Signature:   float CAI_BaseNPC::GetLastDamageTime()
Description: Get the last time the NPC has been damaged.

Function:    CAI_BaseNPC::GetLastEnemyTime
Signature:   float CAI_BaseNPC::GetLastEnemyTime()
Description: Get the last time the NPC has seen an enemy.

Function:    CAI_BaseNPC::GetLastPlayerDamageTime
Signature:   float CAI_BaseNPC::GetLastPlayerDamageTime()
Description: Get the last time the NPC has been damaged by a player.

Function:    CAI_BaseNPC::GetNPCState
Signature:   int CAI_BaseNPC::GetNPCState()
Description: Get the NPC's current state.

Function:    CAI_BaseNPC::GetSchedule
Signature:   string CAI_BaseNPC::GetSchedule()
Description: Get the NPC's current schedule.

Function:    CAI_BaseNPC::GetScheduleID
Signature:   int CAI_BaseNPC::GetScheduleID()
Description: Get the NPC's current schedule ID.

Function:    CAI_BaseNPC::GetScriptState
Signature:   int CAI_BaseNPC::GetScriptState()
Description: Get the NPC's current scripted sequence state.

Function:    CAI_BaseNPC::GetSequenceVersionOfGesture
Signature:   string CAI_BaseNPC::GetSequenceVersionOfGesture(string)
Description: Get the sequence activity counterpart of the specified gesture activity, if one exists.

Function:    CAI_BaseNPC::GetSequenceVersionOfGestureID
Signature:   int CAI_BaseNPC::GetSequenceVersionOfGestureID(int)
Description: Get the sequence activity ID counterpart of the specified gesture activity ID, if one exists.

Function:    CAI_BaseNPC::GetSleepState
Signature:   int CAI_BaseNPC::GetSleepState()
Description: Get the NPC's sleep state. (see AISS_ set of constants)

Function:    CAI_BaseNPC::GetSquad
Signature:   handle CAI_BaseNPC::GetSquad()
Description: Get the NPC's squad if it has one.

Function:    CAI_BaseNPC::GetTask
Signature:   string CAI_BaseNPC::GetTask()
Description: Get the NPC's current task.

Function:    CAI_BaseNPC::GetTaskID
Signature:   int CAI_BaseNPC::GetTaskID()
Description: Get the NPC's current task ID.

Function:    CAI_BaseNPC::HasCondition
Signature:   bool CAI_BaseNPC::HasCondition(string)
Description: Get whether the NPC has a condition.

Function:    CAI_BaseNPC::HasConditionID
Signature:   bool CAI_BaseNPC::HasConditionID(int)
Description: Get whether the NPC has a condition ID.

Function:    CAI_BaseNPC::HasSleepFlags
Signature:   bool CAI_BaseNPC::HasSleepFlags(int)
Description: Return true if the NPC has the specified sleep flags. (see AI_SLEEP_ set of constants)

Function:    CAI_BaseNPC::IsCommandable
Signature:   bool CAI_BaseNPC::IsCommandable()
Description: Check if the NPC is commandable.

Function:    CAI_BaseNPC::IsCrouching
Signature:   bool CAI_BaseNPC::IsCrouching()
Description: Returns true if the NPC is crouching.

Function:    CAI_BaseNPC::IsInPlayerSquad
Signature:   bool CAI_BaseNPC::IsInPlayerSquad()
Description: Check if the NPC is in the player's squad.

Function:    CAI_BaseNPC::IsInSquad
Signature:   bool CAI_BaseNPC::IsInSquad()
Description: Returns true if the NPC is in a squad.

Function:    CAI_BaseNPC::IsMoving
Signature:   bool CAI_BaseNPC::IsMoving()
Description: Check if the NPC is moving.

Function:    CAI_BaseNPC::NumWeaponsInSquad
Signature:   int CAI_BaseNPC::NumWeaponsInSquad(string)
Description: Get the number of weapons in a squad.

Function:    CAI_BaseNPC::RemoveSleepFlags
Signature:   void CAI_BaseNPC::RemoveSleepFlags(int)
Description: Remove from NPC's sleep flags. (see AI_SLEEP_ set of constants)

Function:    CAI_BaseNPC::ResetActivity
Signature:   void CAI_BaseNPC::ResetActivity()
Description: Reset the NPC's current activity.

Function:    CAI_BaseNPC::SetActivity
Signature:   void CAI_BaseNPC::SetActivity(string)
Description: Set the NPC's current activity.

Function:    CAI_BaseNPC::SetActivityID
Signature:   void CAI_BaseNPC::SetActivityID(int)
Description: Set the NPC's current activity ID.

Function:    CAI_BaseNPC::SetCondition
Signature:   void CAI_BaseNPC::SetCondition(string)
Description: Set a condition on the NPC.

Function:    CAI_BaseNPC::SetConditionID
Signature:   void CAI_BaseNPC::SetConditionID(int)
Description: Set a condition on the NPC by ID.

Function:    CAI_BaseNPC::SetEnemy
Signature:   void CAI_BaseNPC::SetEnemy(handle)
Description: Set the NPC's current enemy.

Function:    CAI_BaseNPC::SetSchedule
Signature:   void CAI_BaseNPC::SetSchedule(string)
Description: Set the NPC's current schedule.

Function:    CAI_BaseNPC::SetScheduleID
Signature:   void CAI_BaseNPC::SetScheduleID(int)
Description: Set the NPC's current schedule ID.

Function:    CAI_BaseNPC::SetSleepState
Signature:   void CAI_BaseNPC::SetSleepState(int)
Description: Set the NPC's sleep state. (see AISS_ set of constants)

Function:    CAI_BaseNPC::Sleep
Signature:   void CAI_BaseNPC::Sleep()
Description: Puts the NPC into a sleeping state.

Function:    CAI_BaseNPC::Stand
Signature:   bool CAI_BaseNPC::Stand()
Description: Tells the NPC to stand if it is crouching.

Function:    CAI_BaseNPC::TranslateActivity
Signature:   int CAI_BaseNPC::TranslateActivity(string)
Description: Translates the specified activity string and returns the translated activity ID.

Function:    CAI_BaseNPC::TranslateActivityID
Signature:   int CAI_BaseNPC::TranslateActivityID(int)
Description: Translates the specified activity ID and returns the translated activity ID.

Function:    CAI_BaseNPC::Wake
Signature:   void CAI_BaseNPC::Wake(handle)
Description: Awakens the NPC if it is currently asleep.

Function:    CAI_Expresser::BlockSpeechUntil
Signature:   void CAI_Expresser::BlockSpeechUntil(float)
Description: Block speech for a certain amount of time. This is stored in curtime.

Function:    CAI_Expresser::CanSpeak
Signature:   bool CAI_Expresser::CanSpeak()
Description: Check if the actor can speak.

Function:    CAI_Expresser::ForceNotSpeaking
Signature:   void CAI_Expresser::ForceNotSpeaking()
Description: If the actor is speaking, force the system to recognize them as not speaking.

Function:    CAI_Expresser::GetVoicePitch
Signature:   int CAI_Expresser::GetVoicePitch()
Description: Get the actor's voice pitch. Used in sentences.

Function:    CAI_Expresser::IsSpeaking
Signature:   bool CAI_Expresser::IsSpeaking()
Description: Check if the actor is speaking.

Function:    CAI_Expresser::SetVoicePitch
Signature:   void CAI_Expresser::SetVoicePitch(int)
Description: Set the actor's voice pitch. Used in sentences.

Function:    CAI_Expresser::Speak
Signature:   bool CAI_Expresser::Speak(string, string)
Description: Speak a response concept with the specified modifiers.

Function:    CAI_Expresser::SpeakAutoGeneratedScene
Signature:   bool CAI_Expresser::SpeakAutoGeneratedScene(string, float)
Description: Speak an automatically generated, instanced VCD scene for this sound as though it were played through the Response System. Return whether the scene successfully plays.

Function:    CAI_Expresser::SpeakRawScene
Signature:   bool CAI_Expresser::SpeakRawScene(string, float)
Description: Speak a raw, instanced VCD scene as though it were played through the Response System. Return whether the scene successfully plays.

Function:    CAI_Expresser::SpeakRawSentence
Signature:   int CAI_Expresser::SpeakRawSentence(string, float)
Description: Speak a raw sentence as though it were played through the Response System. Return the sentence's index; -1 if not successfully played.

Function:    CAI_GoalEntity::IsActive
Signature:   bool CAI_GoalEntity::IsActive()
Description: Check if the goal entity is active.

Function:    CAI_GoalEntity::NumActors
Signature:   int CAI_GoalEntity::NumActors()
Description: Get the number of actors using this goal entity.

Function:    CAI_Hint::GetDirection
Signature:   Vector CAI_Hint::GetDirection()
Description: Get the hint's direction.

Function:    CAI_Hint::GetHintActivity
Signature:   string CAI_Hint::GetHintActivity()
Description: Get the name of the hint activity.

Function:    CAI_Hint::GetHintGroup
Signature:   string CAI_Hint::GetHintGroup()
Description: Get the name of the hint's group.

Function:    CAI_Hint::GetHintType
Signature:   int CAI_Hint::GetHintType()
Description: Get the hint's type ID.

Function:    CAI_Hint::GetNodeId
Signature:   int CAI_Hint::GetNodeId()
Description: Get the hint's node ID.

Function:    CAI_Hint::GetUser
Signature:   handle CAI_Hint::GetUser()
Description: Get the hint's current user.

Function:    CAI_Hint::IsDisabled
Signature:   bool CAI_Hint::IsDisabled()
Description: Check if the hint is disabled.

Function:    CAI_Hint::IsLocked
Signature:   bool CAI_Hint::IsLocked()
Description: Check if the hint is locked.

Function:    CAI_Hint::Yaw
Signature:   float CAI_Hint::Yaw()
Description: Get the hint's yaw.

Function:    CAI_Network::GetNodeHint
Signature:   handle CAI_Network::GetNodeHint(int)
Description: Get a node's hint

Function:    CAI_Network::GetNodePosition
Signature:   Vector CAI_Network::GetNodePosition(int)
Description: Get position of node using a generic human hull

Function:    CAI_Network::GetNodePositionWithHull
Signature:   Vector CAI_Network::GetNodePositionWithHull(int, int)
Description: Get position of node using the specified hull

Function:    CAI_Network::GetNodeType
Signature:   int CAI_Network::GetNodeType(int)
Description: Get a node's type

Function:    CAI_Network::GetNodeYaw
Signature:   float CAI_Network::GetNodeYaw(int)
Description: Get yaw of node

Function:    CAI_Network::NearestNodeToPoint
Signature:   int CAI_Network::NearestNodeToPoint(Vector, bool)
Description: Get ID of nearest node

Function:    CAI_Network::NearestNodeToPointForNPC
Signature:   int CAI_Network::NearestNodeToPointForNPC(handle, Vector, bool)
Description: Get ID of nearest node using the specified NPC's properties

Function:    CAI_Network::NumNodes
Signature:   int CAI_Network::NumNodes()
Description: Number of nodes in the level

Function:    CAI_Squad::AddToSquad
Signature:   void CAI_Squad::AddToSquad(handle)
Description: Adds a NPC to the squad.

Function:    CAI_Squad::GetAnyMember
Signature:   handle CAI_Squad::GetAnyMember()
Description: Randomly get any one of the squad's members.

Function:    CAI_Squad::GetFirstMember
Signature:   handle CAI_Squad::GetFirstMember(bool)
Description: Get the squad's first member. The parameter is for whether to ignore silent members (see CAI_Squad::IsSilentMember() for more info).

Function:    CAI_Squad::GetLeader
Signature:   handle CAI_Squad::GetLeader()
Description: Get the squad's leader.

Function:    CAI_Squad::GetMember
Signature:   handle CAI_Squad::GetMember(int)
Description: Get one of the squad's members by their index.

Function:    CAI_Squad::GetName
Signature:   string CAI_Squad::GetName()
Description: Get the squad's name.

Function:    CAI_Squad::GetSquadData
Signature:   string CAI_Squad::GetSquadData(int)
Description: Get the squad data in the specified slot.

Function:    CAI_Squad::GetSquadIndex
Signature:   int CAI_Squad::GetSquadIndex(handle)
Description: Get the index of the specified NPC in the squad.

Function:    CAI_Squad::GetSquadMemberNearestTo
Signature:   handle CAI_Squad::GetSquadMemberNearestTo(Vector)
Description: Get the squad member nearest to a point.

Function:    CAI_Squad::GetVisibleSquadMembers
Signature:   int CAI_Squad::GetVisibleSquadMembers(handle)
Description: Get the number of squad members visible to the specified member.

Function:    CAI_Squad::IsLeader
Signature:   bool CAI_Squad::IsLeader(handle)
Description: Returns true if the specified NPC is the squad's leader.

Function:    CAI_Squad::IsMember
Signature:   bool CAI_Squad::IsMember(handle)
Description: Returns true if the specified NPC is a member of the squad.

Function:    CAI_Squad::IsSilentMember
Signature:   bool CAI_Squad::IsSilentMember(handle)
Description: Returns true if the specified NPC is a "silent squad member", which means it's only in squads for enemy information purposes and does not actually participate in any tactics. For example, this is used for npc_enemyfinder and vital allies (e.g. Alyx) in the player's squad. Please note that this does not check if the NPC is in the squad first.

Function:    CAI_Squad::NearestSquadMember
Signature:   handle CAI_Squad::NearestSquadMember(handle)
Description: Get the squad member nearest to the specified member.

Function:    CAI_Squad::NumMembers
Signature:   int CAI_Squad::NumMembers(bool)
Description: Get the squad's number of members. The parameter is for whether to ignore silent members (see CAI_Squad::IsSilentMember() for more info).

Function:    CAI_Squad::RemoveFromSquad
Signature:   void CAI_Squad::RemoveFromSquad(handle)
Description: Removes a NPC from the squad.

Function:    CAI_Squad::SetSquadData
Signature:   void CAI_Squad::SetSquadData(int, string)
Description: Set the squad data in the specified slot.

Function:    CAI_Squad::SquadMemberInRange
Signature:   handle CAI_Squad::SquadMemberInRange(Vector, float)
Description: Get the first squad member found around the specified position in the specified range.

Function:    CAI_Squad::UpdateEnemyMemory
Signature:   void CAI_Squad::UpdateEnemyMemory(handle, handle, Vector)
Description: Updates the squad's memory of an enemy. The first parameter is the updater, the second parameter is the enemy, and the third parameter is the position.

Function:    CAI_SquadManager::FindCreateSquad
Signature:   handle CAI_SquadManager::FindCreateSquad(string)
Description: Find the specified squad in the squad list or create it if it doesn't exist.

Function:    CAI_SquadManager::FindSquad
Signature:   handle CAI_SquadManager::FindSquad(string)
Description: Find the specified squad in the squad list. Returns null if none found.

Function:    CAI_SquadManager::GetFirstSquad
Signature:   handle CAI_SquadManager::GetFirstSquad()
Description: Get the first squad in the squad list.

Function:    CAI_SquadManager::GetNextSquad
Signature:   handle CAI_SquadManager::GetNextSquad(handle)
Description: Get the next squad in the squad list starting from the specified squad.

Function:    CAI_SquadManager::NumSquads
Signature:   int CAI_SquadManager::NumSquads()
Description: Get the number of squads in the list.

Function:    CAmmoDef::DamageForce
Signature:   float CAmmoDef::DamageForce(int)
Description: Gets the amount of force this ammo type deals.

Function:    CAmmoDef::DamageType
Signature:   int CAmmoDef::DamageType(int)
Description: Gets the type of damage this ammo type deals.

Function:    CAmmoDef::Flags
Signature:   int CAmmoDef::Flags(int)
Description: Gets the flags this ammo type uses.

Function:    CAmmoDef::GetNumAmmoTypes
Signature:   int CAmmoDef::GetNumAmmoTypes()
Description: Gets the number of ammo types which currently exist.

Function:    CAmmoDef::Index
Signature:   int CAmmoDef::Index(string)
Description: Gets the index of the specified ammo type name.

Function:    CAmmoDef::MaxCarry
Signature:   int CAmmoDef::MaxCarry(int)
Description: Gets the maximum amount of this ammo type which players should be able to carry.

Function:    CAmmoDef::MaxSplashSize
Signature:   int CAmmoDef::MaxSplashSize(int)
Description: Gets the maximum size of water splashes caused by impacts from this ammo type.

Function:    CAmmoDef::MinSplashSize
Signature:   int CAmmoDef::MinSplashSize(int)
Description: Gets the minimum size of water splashes caused by impacts from this ammo type.

Function:    CAmmoDef::NPCDamage
Signature:   int CAmmoDef::NPCDamage(int)
Description: Gets the damage NPCs deal for the specified ammo type.

Function:    CAmmoDef::Name
Signature:   string CAmmoDef::Name(int)
Description: Gets the name of the specified ammo type index.

Function:    CAmmoDef::PlrDamage
Signature:   int CAmmoDef::PlrDamage(int)
Description: Gets the damage players deal for the specified ammo type.

Function:    CAmmoDef::TracerType
Signature:   int CAmmoDef::TracerType(int)
Description: Gets the type of tracer this ammo type uses.

Function:    CBaseAnimating::BecomeRagdollOnClient
Signature:   bool CBaseAnimating::BecomeRagdollOnClient(Vector)

Function:    CBaseAnimating::CanBecomeRagdoll
Signature:   bool CBaseAnimating::CanBecomeRagdoll()

Function:    CBaseAnimating::Dissolve
Signature:   bool CBaseAnimating::Dissolve(string, float, bool, int, Vector, int)
Description: Use 'sprites/blueglow1.vmt' for the default material, Time() for the default start time, false for npcOnly if you don't want it to check if the entity is a NPC first, 0 for the default dissolve type, Vector(0,0,0) for the default dissolver origin, and 0 for the default magnitude.

Function:    CBaseAnimating::FindBodygroupByName
Signature:   int CBaseAnimating::FindBodygroupByName(string)
Description: Finds a bodygroup by name

Function:    CBaseAnimating::GetAttachmentAngles
Signature:   Vector CBaseAnimating::GetAttachmentAngles(int)
Description: Get the attachement id's angles as a p,y,r vector

Function:    CBaseAnimating::GetAttachmentMatrix
Signature:   handle CBaseAnimating::GetAttachmentMatrix(int)
Description: Get the attachement id's matrix transform

Function:    CBaseAnimating::GetAttachmentOrigin
Signature:   Vector CBaseAnimating::GetAttachmentOrigin(int)
Description: Get the attachement id's origin vector

Function:    CBaseAnimating::GetBodygroup
Signature:   int CBaseAnimating::GetBodygroup(int)
Description: Gets a bodygroup

Function:    CBaseAnimating::GetBodygroupCount
Signature:   int CBaseAnimating::GetBodygroupCount(int)
Description: Gets the number of models in a bodygroup

Function:    CBaseAnimating::GetBodygroupName
Signature:   string CBaseAnimating::GetBodygroupName(int)
Description: Gets a bodygroup name

Function:    CBaseAnimating::GetBoneTransform
Signature:   void CBaseAnimating::GetBoneTransform(int, handle)
Description: Get the transform for the specified bone

Function:    CBaseAnimating::GetCycle
Signature:   float CBaseAnimating::GetCycle()

Function:    CBaseAnimating::GetNumBodyGroups
Signature:   int CBaseAnimating::GetNumBodyGroups()
Description: Gets the number of bodygroups

Function:    CBaseAnimating::GetNumBones
Signature:   int CBaseAnimating::GetNumBones()
Description: Get the number of bones

Function:    CBaseAnimating::GetPhysicsBone
Signature:   int CBaseAnimating::GetPhysicsBone(int)
Description: Get physics bone from bone index

Function:    CBaseAnimating::GetPlaybackRate
Signature:   float CBaseAnimating::GetPlaybackRate()

Function:    CBaseAnimating::GetPoseParameter
Signature:   float CBaseAnimating::GetPoseParameter(string)
Description: Get the specified pose parameter's value

Function:    CBaseAnimating::GetSequence
Signature:   int CBaseAnimating::GetSequence()
Description: Gets the current sequence

Function:    CBaseAnimating::GetSequenceActivity
Signature:   int CBaseAnimating::GetSequenceActivity(int)
Description: Gets the activity ID of the specified sequence index

Function:    CBaseAnimating::GetSequenceActivityName
Signature:   string CBaseAnimating::GetSequenceActivityName(int)
Description: Gets the activity name of the specified sequence index

Function:    CBaseAnimating::GetSequenceKeyValues
Signature:   handle CBaseAnimating::GetSequenceKeyValues(int)
Description: Get a KeyValue class instance on the specified sequence. WARNING: This uses the same KeyValue pointer as GetModelKeyValues!

Function:    CBaseAnimating::GetSequenceMoveDist
Signature:   float CBaseAnimating::GetSequenceMoveDist(int)
Description: Gets the move distance of the specified sequence

Function:    CBaseAnimating::GetSequenceMoveYaw
Signature:   float CBaseAnimating::GetSequenceMoveYaw(int)
Description: Gets the move yaw of the specified sequence

Function:    CBaseAnimating::GetSequenceName
Signature:   string CBaseAnimating::GetSequenceName(int)
Description: Gets the name of the specified sequence index

Function:    CBaseAnimating::GetSkin
Signature:   int CBaseAnimating::GetSkin()
Description: Gets the model's skin

Function:    CBaseAnimating::Ignite
Signature:   void CBaseAnimating::Ignite(float, bool, float, bool)
Description: 'NPCOnly' only lets this fall through if the entity is a NPC and 'CalledByLevelDesigner' determines whether to treat this like the Ignite input or just an internal ignition call.

Function:    CBaseAnimating::IsRagdoll
Signature:   bool CBaseAnimating::IsRagdoll()

Function:    CBaseAnimating::IsSequenceFinished
Signature:   bool CBaseAnimating::IsSequenceFinished()
Description: Ask whether the main sequence is done playing

Function:    CBaseAnimating::LookupActivity
Signature:   int CBaseAnimating::LookupActivity(string)
Description: Gets the ID of the specified activity name

Function:    CBaseAnimating::LookupAttachment
Signature:   int CBaseAnimating::LookupAttachment(string)
Description: Get the named attachement id

Function:    CBaseAnimating::LookupBone
Signature:   int CBaseAnimating::LookupBone(string)
Description: Get the named bone id

Function:    CBaseAnimating::LookupSequence
Signature:   int CBaseAnimating::LookupSequence(string)
Description: Gets the index of the specified sequence name

Function:    CBaseAnimating::ResetSequenceInfo
Signature:   void CBaseAnimating::ResetSequenceInfo()

Function:    CBaseAnimating::Scorch
Signature:   void CBaseAnimating::Scorch(int, int)
Description: Makes the entity darker from scorching

Function:    CBaseAnimating::SelectHeaviestSequence
Signature:   int CBaseAnimating::SelectHeaviestSequence(int)
Description: Selects the sequence with the heaviest weight for the specified activity ID

Function:    CBaseAnimating::SelectWeightedSequence
Signature:   int CBaseAnimating::SelectWeightedSequence(int, int)
Description: Selects a sequence for the specified activity ID

Function:    CBaseAnimating::SequenceDuration
Signature:   float CBaseAnimating::SequenceDuration(int)
Description: Get the specified sequence duration

Function:    CBaseAnimating::SequenceHasMovement
Signature:   bool CBaseAnimating::SequenceHasMovement(int)
Description: Checks if the specified sequence has movement

Function:    CBaseAnimating::SequenceLoops
Signature:   bool CBaseAnimating::SequenceLoops()
Description: Does the current sequence loop?

Function:    CBaseAnimating::SetBodygroup
Signature:   void CBaseAnimating::SetBodygroup(int, int)
Description: Sets a bodygroup

Function:    CBaseAnimating::SetCycle
Signature:   void CBaseAnimating::SetCycle(float)

Function:    CBaseAnimating::SetPlaybackRate
Signature:   void CBaseAnimating::SetPlaybackRate(float)

Function:    CBaseAnimating::SetPoseParameter
Signature:   void CBaseAnimating::SetPoseParameter(string, float)
Description: Set the specified pose parameter to the specified value

Function:    CBaseAnimating::SetSequence
Signature:   void CBaseAnimating::SetSequence(int)
Description: Sets the current sequence

Function:    CBaseAnimating::SetSkin
Signature:   void CBaseAnimating::SetSkin(int)
Description: Sets the model's skin

Function:    CBaseAnimating::StudioFrameAdvance
Signature:   void CBaseAnimating::StudioFrameAdvance()

Function:    CBaseAnimatingOverlay::AddGesture
Signature:   int CBaseAnimatingOverlay::AddGesture(string, bool)
Description: Adds a new animation layer using the specified activity name.

Function:    CBaseAnimatingOverlay::AddGestureID
Signature:   int CBaseAnimatingOverlay::AddGestureID(int, bool)
Description: Adds a new animation layer using the specified activity index.

Function:    CBaseAnimatingOverlay::AddGestureSequence
Signature:   int CBaseAnimatingOverlay::AddGestureSequence(string, bool)
Description: Adds a new animation layer using the specified activity name.

Function:    CBaseAnimatingOverlay::AddGestureSequenceID
Signature:   int CBaseAnimatingOverlay::AddGestureSequenceID(int, bool)
Description: Adds a new animation layer using the specified sequence index.

Function:    CBaseAnimatingOverlay::FastRemoveLayer
Signature:   void CBaseAnimatingOverlay::FastRemoveLayer(int)
Description: Removes the specified layer index immediately.

Function:    CBaseAnimatingOverlay::FindGestureLayer
Signature:   int CBaseAnimatingOverlay::FindGestureLayer(string)
Description: Finds and returns the first active animation layer which uses the specified activity name.

Function:    CBaseAnimatingOverlay::FindGestureLayerByID
Signature:   int CBaseAnimatingOverlay::FindGestureLayerByID(int)
Description: Finds and returns the first active animation layer which uses the specified activity index.

Function:    CBaseAnimatingOverlay::GetLayerActivity
Signature:   string CBaseAnimatingOverlay::GetLayerActivity(int)
Description: Gets the activity name of the specified layer index.

Function:    CBaseAnimatingOverlay::GetLayerActivityID
Signature:   int CBaseAnimatingOverlay::GetLayerActivityID(int)
Description: Gets the activity index of the specified layer index.

Function:    CBaseAnimatingOverlay::GetLayerCycle
Signature:   float CBaseAnimatingOverlay::GetLayerCycle(int)
Description: Gets the cycle of the specified layer index.

Function:    CBaseAnimatingOverlay::GetLayerDuration
Signature:   float CBaseAnimatingOverlay::GetLayerDuration(int)
Description: Gets the duration of the specified layer index.

Function:    CBaseAnimatingOverlay::GetLayerSequence
Signature:   int CBaseAnimatingOverlay::GetLayerSequence(int)
Description: Gets the sequence index of the specified layer index.

Function:    CBaseAnimatingOverlay::GetLayerWeight
Signature:   float CBaseAnimatingOverlay::GetLayerWeight(int)
Description: Gets the weight of the specified layer index.

Function:    CBaseAnimatingOverlay::GetNumAnimOverlays
Signature:   int CBaseAnimatingOverlay::GetNumAnimOverlays()
Description: Gets the current number of animation layers.

Function:    CBaseAnimatingOverlay::HasActiveLayer
Signature:   bool CBaseAnimatingOverlay::HasActiveLayer()
Description: Returns true if there is currently an active layer.

Function:    CBaseAnimatingOverlay::IsValidLayer
Signature:   bool CBaseAnimatingOverlay::IsValidLayer(int)
Description: Returns true if the specified layer index is valid.

Function:    CBaseAnimatingOverlay::RemoveAllGestures
Signature:   void CBaseAnimatingOverlay::RemoveAllGestures()
Description: Removes all animation layers.

Function:    CBaseAnimatingOverlay::RemoveLayer
Signature:   void CBaseAnimatingOverlay::RemoveLayer(int, float, float)
Description: Removes the specified layer index with the specified kill rate and delay.

Function:    CBaseAnimatingOverlay::SetLayerAutokill
Signature:   void CBaseAnimatingOverlay::SetLayerAutokill(int, bool)
Description: Sets whether or not the specified layer index should remove itself when it's finished playing.

Function:    CBaseAnimatingOverlay::SetLayerBlendIn
Signature:   void CBaseAnimatingOverlay::SetLayerBlendIn(int, float)
Description: Sets the fade-in of the specified layer index, with the fade being a 0-1 fraction of the cycle.

Function:    CBaseAnimatingOverlay::SetLayerBlendOut
Signature:   void CBaseAnimatingOverlay::SetLayerBlendOut(int, float)
Description: Sets the fade-out of the specified layer index, with the fade being a 0-1 fraction of the cycle.

Function:    CBaseAnimatingOverlay::SetLayerCycle
Signature:   void CBaseAnimatingOverlay::SetLayerCycle(int, float)
Description: Sets the cycle of the specified layer index.

Function:    CBaseAnimatingOverlay::SetLayerDuration
Signature:   void CBaseAnimatingOverlay::SetLayerDuration(int, float)
Description: Sets the duration of the specified layer index.

Function:    CBaseAnimatingOverlay::SetLayerLooping
Signature:   void CBaseAnimatingOverlay::SetLayerLooping(int, bool)
Description: Sets whether or not the specified layer index should loop.

Function:    CBaseAnimatingOverlay::SetLayerNoEvents
Signature:   void CBaseAnimatingOverlay::SetLayerNoEvents(int, bool)
Description: Sets whether or not the specified layer index should fire animation events.

Function:    CBaseAnimatingOverlay::SetLayerNoRestore
Signature:   void CBaseAnimatingOverlay::SetLayerNoRestore(int, bool)
Description: Sets whether or not the specified layer index should restore after a save is loaded.

Function:    CBaseAnimatingOverlay::SetLayerPlaybackRate
Signature:   void CBaseAnimatingOverlay::SetLayerPlaybackRate(int, float)
Description: Sets the playback rate of the specified layer index.

Function:    CBaseAnimatingOverlay::SetLayerWeight
Signature:   void CBaseAnimatingOverlay::SetLayerWeight(int, float)
Description: Sets the weight of the specified layer index.

Function:    CBaseCombatCharacter::BodyAngles
Signature:   Vector CBaseCombatCharacter::BodyAngles()
Description: Get the body's angles.

Function:    CBaseCombatCharacter::BodyDirection2D
Signature:   Vector CBaseCombatCharacter::BodyDirection2D()
Description: Get the body's 2D direction.

Function:    CBaseCombatCharacter::BodyDirection3D
Signature:   Vector CBaseCombatCharacter::BodyDirection3D()
Description: Get the body's 3D direction.

Function:    CBaseCombatCharacter::DoMuzzleFlash
Signature:   void CBaseCombatCharacter::DoMuzzleFlash()
Description: Does a muzzle flash.

Function:    CBaseCombatCharacter::DropAllWeapons
Signature:   void CBaseCombatCharacter::DropAllWeapons(bool)
Description: Make the character drop all of its weapons.

Function:    CBaseCombatCharacter::DropWeapon
Signature:   void CBaseCombatCharacter::DropWeapon(handle)
Description: Make the character drop the specified weapon entity if they own it.

Function:    CBaseCombatCharacter::EntInAimCone
Signature:   bool CBaseCombatCharacter::EntInAimCone(handle)
Description: Check if the specified entity is in the character's aim cone.

Function:    CBaseCombatCharacter::EntInViewCone
Signature:   bool CBaseCombatCharacter::EntInViewCone(handle)
Description: Check if the specified entity is in the character's viewcone.

Function:    CBaseCombatCharacter::EquipWeapon
Signature:   void CBaseCombatCharacter::EquipWeapon(handle)
Description: Make the character equip the specified weapon entity. If they don't already own the weapon, they will acquire it instantly.

Function:    CBaseCombatCharacter::EyeDirection2D
Signature:   Vector CBaseCombatCharacter::EyeDirection2D()
Description: Get the eyes' 2D direction.

Function:    CBaseCombatCharacter::EyeDirection3D
Signature:   Vector CBaseCombatCharacter::EyeDirection3D()
Description: Get the eyes' 3D direction.

Function:    CBaseCombatCharacter::FindWeapon
Signature:   handle CBaseCombatCharacter::FindWeapon(string, int)
Description: Find a specific weapon in the character's inventory by its classname.

Function:    CBaseCombatCharacter::GetActiveWeapon
Signature:   handle CBaseCombatCharacter::GetActiveWeapon()
Description: Get the character's active weapon entity.

Function:    CBaseCombatCharacter::GetAllWeapons
Signature:   void CBaseCombatCharacter::GetAllWeapons(handle)
Description: Get the character's weapon inventory.

Function:    CBaseCombatCharacter::GetAmmoCount
Signature:   int CBaseCombatCharacter::GetAmmoCount(int)
Description: Get the ammo count of the specified ammo type.

Function:    CBaseCombatCharacter::GetAttackSpread
Signature:   Vector CBaseCombatCharacter::GetAttackSpread(handle, handle)
Description: Get the attack spread.

Function:    CBaseCombatCharacter::GetCurrentWeaponProficiency
Signature:   int CBaseCombatCharacter::GetCurrentWeaponProficiency()
Description: Get the character's current proficiency (accuracy) with their current weapon.

Function:    CBaseCombatCharacter::GetRelationPriority
Signature:   int CBaseCombatCharacter::GetRelationPriority(handle)
Description: Get a character's relationship priority for a specific entity.

Function:    CBaseCombatCharacter::GetRelationship
Signature:   int CBaseCombatCharacter::GetRelationship(handle)
Description: Get a character's relationship to a specific entity.

Function:    CBaseCombatCharacter::GetSpreadBias
Signature:   float CBaseCombatCharacter::GetSpreadBias(handle, handle)
Description: Get the spread bias.

Function:    CBaseCombatCharacter::GetVehicleEntity
Signature:   handle CBaseCombatCharacter::GetVehicleEntity()
Description: Get the entity for a character's current vehicle if they're in one.

Function:    CBaseCombatCharacter::GetWeapon
Signature:   handle CBaseCombatCharacter::GetWeapon(int)
Description: Get a specific weapon in the character's inventory.

Function:    CBaseCombatCharacter::GiveAmmo
Signature:   int CBaseCombatCharacter::GiveAmmo(int, int, bool)
Description: Gives the specified amount of the specified ammo type. The third parameter is whether or not to suppress the ammo pickup sound. Returns the amount of ammo actually given, which is 0 if the player's ammo for this type is already full.

Function:    CBaseCombatCharacter::HeadDirection2D
Signature:   Vector CBaseCombatCharacter::HeadDirection2D()
Description: Get the head's 2D direction.

Function:    CBaseCombatCharacter::HeadDirection3D
Signature:   Vector CBaseCombatCharacter::HeadDirection3D()
Description: Get the head's 3D direction.

Function:    CBaseCombatCharacter::InAimCone
Signature:   bool CBaseCombatCharacter::InAimCone(Vector)
Description: Check if the specified position is in the character's aim cone.

Function:    CBaseCombatCharacter::InViewCone
Signature:   bool CBaseCombatCharacter::InViewCone(Vector)
Description: Check if the specified position is in the character's viewcone.

Function:    CBaseCombatCharacter::RemoveAmmo
Signature:   void CBaseCombatCharacter::RemoveAmmo(int, int)
Description: Removes the specified amount of the specified ammo type.

Function:    CBaseCombatCharacter::SetAmmoCount
Signature:   void CBaseCombatCharacter::SetAmmoCount(int, int)
Description: Set the ammo count of the specified ammo type.

Function:    CBaseCombatCharacter::SetRelationship
Signature:   void CBaseCombatCharacter::SetRelationship(handle, int, int)
Description: Set a character's relationship with a specific entity.

Function:    CBaseCombatCharacter::ShootPosition
Signature:   Vector CBaseCombatCharacter::ShootPosition()
Description: Get the character's shoot position.

Function:    CBaseCombatCharacter::WeaponCount
Signature:   int CBaseCombatCharacter::WeaponCount()
Description: Get the number of weapons a character possesses.

Function:    CBaseCombatWeapon::AddViewKick
Signature:   void CBaseCombatWeapon::AddViewKick()
Description: Applies the weapon's view kick.

Function:    CBaseCombatWeapon::AltFiresUnderwater
Signature:   bool CBaseCombatWeapon::AltFiresUnderwater()
Description: Returns true if this weapon can alt-fire underwater.

Function:    CBaseCombatWeapon::CanBePickedUpByNPCs
Signature:   bool CBaseCombatWeapon::CanBePickedUpByNPCs()
Description: Check if the weapon can be picked up by NPCs.

Function:    CBaseCombatWeapon::CapabilitiesGet
Signature:   int CBaseCombatWeapon::CapabilitiesGet()
Description: Get the capabilities the weapon currently possesses.

Function:    CBaseCombatWeapon::Clip1
Signature:   int CBaseCombatWeapon::Clip1()
Description: Get the weapon's current primary ammo.

Function:    CBaseCombatWeapon::Clip2
Signature:   int CBaseCombatWeapon::Clip2()
Description: Get the weapon's current secondary ammo.

Function:    CBaseCombatWeapon::FireDuration
Signature:   float CBaseCombatWeapon::FireDuration()
Description: Returns the amount of time that the weapon has sustained firing.

Function:    CBaseCombatWeapon::FiresUnderwater
Signature:   bool CBaseCombatWeapon::FiresUnderwater()
Description: Returns true if this weapon can fire underwater.

Function:    CBaseCombatWeapon::GetBulletSpread
Signature:   Vector CBaseCombatWeapon::GetBulletSpread()
Description: Returns the weapon's default bullet spread.

Function:    CBaseCombatWeapon::GetBulletSpreadForProficiency
Signature:   Vector CBaseCombatWeapon::GetBulletSpreadForProficiency(int)
Description: Returns the weapon's bullet spread for the specified proficiency level.

Function:    CBaseCombatWeapon::GetDefaultAnimSpeed
Signature:   float CBaseCombatWeapon::GetDefaultAnimSpeed()
Description: Returns the weapon's default animation speed.

Function:    CBaseCombatWeapon::GetDefaultClip1
Signature:   int CBaseCombatWeapon::GetDefaultClip1()
Description: Get the weapon's default primary ammo.

Function:    CBaseCombatWeapon::GetDefaultClip2
Signature:   int CBaseCombatWeapon::GetDefaultClip2()
Description: Get the weapon's default secondary ammo.

Function:    CBaseCombatWeapon::GetDrawActivity
Signature:   int CBaseCombatWeapon::GetDrawActivity()
Description: Returns the weapon's draw activity.

Function:    CBaseCombatWeapon::GetDroppedModel
Signature:   string CBaseCombatWeapon::GetDroppedModel()
Description: Get the weapon's unique dropped model if it has one.

Function:    CBaseCombatWeapon::GetFireRate
Signature:   float CBaseCombatWeapon::GetFireRate()
Description: Get the weapon's firing rate.

Function:    CBaseCombatWeapon::GetMaxClip1
Signature:   int CBaseCombatWeapon::GetMaxClip1()
Description: Get the weapon's maximum primary ammo.

Function:    CBaseCombatWeapon::GetMaxClip2
Signature:   int CBaseCombatWeapon::GetMaxClip2()
Description: Get the weapon's maximum secondary ammo.

Function:    CBaseCombatWeapon::GetOwner
Signature:   handle CBaseCombatWeapon::GetOwner()
Description: Get the weapon's owner.

Function:    CBaseCombatWeapon::GetPrimaryAmmoType
Signature:   int CBaseCombatWeapon::GetPrimaryAmmoType()
Description: Get the weapon's primary ammo type.

Function:    CBaseCombatWeapon::GetPrimaryAttackActivity
Signature:   int CBaseCombatWeapon::GetPrimaryAttackActivity()
Description: Returns the weapon's primary attack activity.

Function:    CBaseCombatWeapon::GetPrintName
Signature:   string CBaseCombatWeapon::GetPrintName()

Function:    CBaseCombatWeapon::GetSecondaryAmmoType
Signature:   int CBaseCombatWeapon::GetSecondaryAmmoType()
Description: Get the weapon's secondary ammo type.

Function:    CBaseCombatWeapon::GetSecondaryAttackActivity
Signature:   int CBaseCombatWeapon::GetSecondaryAttackActivity()
Description: Returns the weapon's secondary attack activity.

Function:    CBaseCombatWeapon::GetSubType
Signature:   int CBaseCombatWeapon::GetSubType()
Description: Get the weapon's subtype.

Function:    CBaseCombatWeapon::GetViewModel
Signature:   string CBaseCombatWeapon::GetViewModel(int)
Description: Get the weapon's view model.

Function:    CBaseCombatWeapon::GetViewModelSequenceDuration
Signature:   float CBaseCombatWeapon::GetViewModelSequenceDuration()
Description: Gets the sequence duration of the current view model animation.

Function:    CBaseCombatWeapon::GetWeaponIdleTime
Signature:   float CBaseCombatWeapon::GetWeaponIdleTime()
Description: Returns the next time WeaponIdle() will run.

Function:    CBaseCombatWeapon::GetWeight
Signature:   int CBaseCombatWeapon::GetWeight()
Description: Get the weapon's weight.

Function:    CBaseCombatWeapon::GetWorldModel
Signature:   string CBaseCombatWeapon::GetWorldModel()
Description: Get the weapon's world model.

Function:    CBaseCombatWeapon::GiveDefaultAmmo
Signature:   void CBaseCombatWeapon::GiveDefaultAmmo()
Description: Fill the weapon back up to default ammo.

Function:    CBaseCombatWeapon::HasAnyAmmo
Signature:   bool CBaseCombatWeapon::HasAnyAmmo()
Description: Check if the weapon currently has ammo or doesn't need ammo.

Function:    CBaseCombatWeapon::HasPrimaryAmmo
Signature:   bool CBaseCombatWeapon::HasPrimaryAmmo()
Description: Check if the weapon currently has ammo or doesn't need primary ammo.

Function:    CBaseCombatWeapon::HasSecondaryAmmo
Signature:   bool CBaseCombatWeapon::HasSecondaryAmmo()
Description: Check if the weapon currently has ammo or doesn't need secondary ammo.

Function:    CBaseCombatWeapon::HasWeaponIdleTimeElapsed
Signature:   bool CBaseCombatWeapon::HasWeaponIdleTimeElapsed()
Description: Returns true if the idle time has elapsed.

Function:    CBaseCombatWeapon::IsViewModelSequenceFinished
Signature:   bool CBaseCombatWeapon::IsViewModelSequenceFinished()
Description: Returns true if the current view model animation is finished.

Function:    CBaseCombatWeapon::MinRange1
Signature:   float CBaseCombatWeapon::MinRange1()
Description: Returns the closest this weapon can be used.

Function:    CBaseCombatWeapon::MinRange2
Signature:   float CBaseCombatWeapon::MinRange2()
Description: Returns the closest this weapon can be used.

Function:    CBaseCombatWeapon::NextPrimaryAttack
Signature:   float CBaseCombatWeapon::NextPrimaryAttack()
Description: Returns the next time PrimaryAttack() will run when the player is pressing +ATTACK.

Function:    CBaseCombatWeapon::NextSecondaryAttack
Signature:   float CBaseCombatWeapon::NextSecondaryAttack()
Description: Returns the next time SecondaryAttack() will run when the player is pressing +ATTACK2.

Function:    CBaseCombatWeapon::ReloadsSingly
Signature:   bool CBaseCombatWeapon::ReloadsSingly()
Description: Returns true if this weapon reloads 1 round at a time.

Function:    CBaseCombatWeapon::SendWeaponAnim
Signature:   bool CBaseCombatWeapon::SendWeaponAnim(int)
Description: Sends a weapon animation.

Function:    CBaseCombatWeapon::SetAltFiresUnderwater
Signature:   void CBaseCombatWeapon::SetAltFiresUnderwater(bool)
Description: Sets whether this weapon can alt-fire underwater.

Function:    CBaseCombatWeapon::SetClip1
Signature:   void CBaseCombatWeapon::SetClip1(int)
Description: Set the weapon's current primary ammo.

Function:    CBaseCombatWeapon::SetClip2
Signature:   void CBaseCombatWeapon::SetClip2(int)
Description: Set the weapon's current secondary ammo.

Function:    CBaseCombatWeapon::SetFireDuration
Signature:   void CBaseCombatWeapon::SetFireDuration(float)
Description: Sets the amount of time that the weapon has sustained firing.

Function:    CBaseCombatWeapon::SetFiresUnderwater
Signature:   void CBaseCombatWeapon::SetFiresUnderwater(bool)
Description: Sets whether this weapon can fire underwater.

Function:    CBaseCombatWeapon::SetMinRange1
Signature:   void CBaseCombatWeapon::SetMinRange1(float)
Description: Sets the closest this weapon can be used.

Function:    CBaseCombatWeapon::SetMinRange2
Signature:   void CBaseCombatWeapon::SetMinRange2(float)
Description: Sets the closest this weapon can be used.

Function:    CBaseCombatWeapon::SetNextPrimaryAttack
Signature:   void CBaseCombatWeapon::SetNextPrimaryAttack(float)
Description: Sets the next time PrimaryAttack() will run when the player is pressing +ATTACK.

Function:    CBaseCombatWeapon::SetNextSecondaryAttack
Signature:   void CBaseCombatWeapon::SetNextSecondaryAttack(float)
Description: Sets the next time SecondaryAttack() will run when the player is pressing +ATTACK2.

Function:    CBaseCombatWeapon::SetOwner
Signature:   void CBaseCombatWeapon::SetOwner(handle)
Description: Set the weapon's owner.

Function:    CBaseCombatWeapon::SetReloadsSingly
Signature:   void CBaseCombatWeapon::SetReloadsSingly(bool)
Description: Sets whether this weapon reloads 1 round at a time.

Function:    CBaseCombatWeapon::SetSubType
Signature:   void CBaseCombatWeapon::SetSubType(int)
Description: Set the weapon's subtype.

Function:    CBaseCombatWeapon::SetWeaponIdleTime
Signature:   void CBaseCombatWeapon::SetWeaponIdleTime(float)
Description: Sets the next time WeaponIdle() will run.

Function:    CBaseCombatWeapon::UsesClipsForAmmo1
Signature:   bool CBaseCombatWeapon::UsesClipsForAmmo1()
Description: Check if the weapon uses clips for primary ammo.

Function:    CBaseCombatWeapon::UsesClipsForAmmo2
Signature:   bool CBaseCombatWeapon::UsesClipsForAmmo2()
Description: Check if the weapon uses clips for secondary ammo.

Function:    CBaseCombatWeapon::UsesPrimaryAmmo
Signature:   bool CBaseCombatWeapon::UsesPrimaryAmmo()
Description: Check if the weapon uses primary ammo.

Function:    CBaseCombatWeapon::UsesSecondaryAmmo
Signature:   bool CBaseCombatWeapon::UsesSecondaryAmmo()
Description: Check if the weapon uses secondary ammo.

Function:    CBaseCombatWeapon::WeaponClassify
Signature:   int CBaseCombatWeapon::WeaponClassify()
Description: Returns the weapon's classify class from the WEPCLASS_ constant group

Function:    CBaseCombatWeapon::WeaponSound
Signature:   void CBaseCombatWeapon::WeaponSound(int, float)
Description: Plays one of the weapon's sounds.

Function:    CBaseEntity::AcceptInput
Signature:   bool CBaseEntity::AcceptInput(string, string, handle, handle)

Function:    CBaseEntity::Activate
Signature:   void CBaseEntity::Activate()

Function:    CBaseEntity::AddContext
Signature:   void CBaseEntity::AddContext(string, string, float)
Description: Add a response context value

Function:    CBaseEntity::AddEFlags
Signature:   void CBaseEntity::AddEFlags(int)
Description: Add Eflags

Function:    CBaseEntity::AddEffects
Signature:   void CBaseEntity::AddEffects(int)
Description: Add effect(s)

Function:    CBaseEntity::AddFlag
Signature:   void CBaseEntity::AddFlag(int)
Description: Add flag

Function:    CBaseEntity::AddOutput
Signature:   bool CBaseEntity::AddOutput(string, string, string, string, float, int)
Description: Add an output

Function:    CBaseEntity::AddSolidFlags
Signature:   void CBaseEntity::AddSolidFlags(int)
Description: Add solid flags

Function:    CBaseEntity::AddSpawnFlags
Signature:   void CBaseEntity::AddSpawnFlags(int)
Description: Add spawnflag(s)

Function:    CBaseEntity::ApplyAbsVelocityImpulse
Signature:   void CBaseEntity::ApplyAbsVelocityImpulse(Vector)

Function:    CBaseEntity::ApplyLocalAngularVelocityImpulse
Signature:   void CBaseEntity::ApplyLocalAngularVelocityImpulse(Vector)

Function:    CBaseEntity::BodyTarget
Signature:   Vector CBaseEntity::BodyTarget(Vector, bool)

Function:    CBaseEntity::Classify
Signature:   int CBaseEntity::Classify()
Description: Get Class_T class ID (corresponds to the CLASS_ set of constants)

Function:    CBaseEntity::ClearEffects
Signature:   void CBaseEntity::ClearEffects()
Description: Clear effect(s)

Function:    CBaseEntity::ClearSpawnFlags
Signature:   void CBaseEntity::ClearSpawnFlags()
Description: Clear spawnflag(s)

Function:    CBaseEntity::ConnectOutput
Signature:   void CBaseEntity::ConnectOutput(string, string)
Description: Adds an I/O connection that will call the named function when the specified output fires

Function:    CBaseEntity::Destroy
Signature:   void CBaseEntity::Destroy()

Function:    CBaseEntity::DisconnectOutput
Signature:   void CBaseEntity::DisconnectOutput(string, string)
Description: Removes a connected script function from an I/O event.

Function:    CBaseEntity::DispatchInteraction
Signature:   bool CBaseEntity::DispatchInteraction(int, handle, handle)
Description: Dispatches an interaction on this entity. See the g_interaction set of constants for more information.

Function:    CBaseEntity::EmitSound
Signature:   void CBaseEntity::EmitSound(string)
Description: Plays a sound from this entity.

Function:    CBaseEntity::EntityToWorldTransform
Signature:   handle CBaseEntity::EntityToWorldTransform()
Description: Get the entity's transform

Function:    CBaseEntity::EyeAngles
Signature:   Vector CBaseEntity::EyeAngles()
Description: Get eye pitch, yaw, roll as a vector

Function:    CBaseEntity::EyePosition
Signature:   Vector CBaseEntity::EyePosition()
Description: Get vector to eye position - absolute coords

Function:    CBaseEntity::FireBullets
Signature:   void CBaseEntity::FireBullets(handle)
Description: Fire bullets from entity with a given info handle

Function:    CBaseEntity::FireOutput
Signature:   void CBaseEntity::FireOutput(string, handle, handle, string, float)
Description: Fire an entity output

Function:    CBaseEntity::FirstMoveChild
Signature:   handle CBaseEntity::FirstMoveChild()

Function:    CBaseEntity::FollowEntity
Signature:   void CBaseEntity::FollowEntity(handle, bool)
Description: Begin following the specified entity. This makes this entity non-solid, parents it to the target entity, and teleports it to the specified entity's origin. The second parameter is whether or not to use bonemerging while following.

Function:    CBaseEntity::GetAngles
Signature:   Vector CBaseEntity::GetAngles()
Description: Get entity pitch, yaw, roll as a vector

Function:    CBaseEntity::GetAngularVelocity
Signature:   Vector CBaseEntity::GetAngularVelocity()
Description: Get the local angular velocity - returns a vector of pitch,yaw,roll

Function:    CBaseEntity::GetBoundingMaxs
Signature:   Vector CBaseEntity::GetBoundingMaxs()
Description: Get a vector containing max bounds, centered on object

Function:    CBaseEntity::GetBoundingMins
Signature:   Vector CBaseEntity::GetBoundingMins()
Description: Get a vector containing min bounds, centered on object

Function:    CBaseEntity::GetCenter
Signature:   Vector CBaseEntity::GetCenter()
Description: Get vector to center of object - absolute coords

Function:    CBaseEntity::GetClassname
Signature:   string CBaseEntity::GetClassname()

Function:    CBaseEntity::GetCollisionGroup
Signature:   int CBaseEntity::GetCollisionGroup()
Description: Get the collision group

Function:    CBaseEntity::GetContext
Signature:   string CBaseEntity::GetContext(string)
Description: Get a response context value

Function:    CBaseEntity::GetContextCount
Signature:   int CBaseEntity::GetContextCount()
Description: Get the number of response contexts

Function:    CBaseEntity::GetContextExpireTime
Signature:   float CBaseEntity::GetContextExpireTime(string)
Description: Get a response context's expiration time

Function:    CBaseEntity::GetContextIndex
Signature:   handle CBaseEntity::GetContextIndex(int)
Description: Get a response context at a specific index in the form of a table

Function:    CBaseEntity::GetDebugName
Signature:   string CBaseEntity::GetDebugName()
Description: If name exists returns name, otherwise returns classname

Function:    CBaseEntity::GetEFlags
Signature:   int CBaseEntity::GetEFlags()
Description: Get Eflags

Function:    CBaseEntity::GetEffects
Signature:   int CBaseEntity::GetEffects()
Description: Get effects

Function:    CBaseEntity::GetFlags
Signature:   int CBaseEntity::GetFlags()
Description: Get flags

Function:    CBaseEntity::GetFollowedEntity
Signature:   handle CBaseEntity::GetFollowedEntity()
Description: Get the entity we're following.

Function:    CBaseEntity::GetForwardVector
Signature:   Vector CBaseEntity::GetForwardVector()
Description: Get the forward vector of the entity

Function:    CBaseEntity::GetFriction
Signature:   float CBaseEntity::GetFriction()

Function:    CBaseEntity::GetGravity
Signature:   float CBaseEntity::GetGravity()

Function:    CBaseEntity::GetHealth
Signature:   int CBaseEntity::GetHealth()

Function:    CBaseEntity::GetKeyValue
Signature:   string CBaseEntity::GetKeyValue(string)
Description: Get a keyvalue

Function:    CBaseEntity::GetLocalAngles
Signature:   Vector CBaseEntity::GetLocalAngles()
Description: GetLocalAngles

Function:    CBaseEntity::GetLocalOrigin
Signature:   Vector CBaseEntity::GetLocalOrigin()
Description: GetLocalOrigin

Function:    CBaseEntity::GetMass
Signature:   float CBaseEntity::GetMass()

Function:    CBaseEntity::GetMaxHealth
Signature:   int CBaseEntity::GetMaxHealth()

Function:    CBaseEntity::GetMaxOutputDelay
Signature:   float CBaseEntity::GetMaxOutputDelay(string)
Description: Get the longest delay for all events attached to an output

Function:    CBaseEntity::GetModelKeyValues
Signature:   handle CBaseEntity::GetModelKeyValues()
Description: Get a KeyValue class instance on this entity's model

Function:    CBaseEntity::GetModelName
Signature:   string CBaseEntity::GetModelName()
Description: Returns the name of the model

Function:    CBaseEntity::GetMoveParent
Signature:   handle CBaseEntity::GetMoveParent()
Description: If in hierarchy, retrieves the entity's parent

Function:    CBaseEntity::GetMoveType
Signature:   int CBaseEntity::GetMoveType()
Description: Get the move type

Function:    CBaseEntity::GetName
Signature:   string CBaseEntity::GetName()

Function:    CBaseEntity::GetOrCreatePrivateScriptScope
Signature:   handle CBaseEntity::GetOrCreatePrivateScriptScope()
Description: Create and retrieve the script-side data associated with an entity

Function:    CBaseEntity::GetOrigin
Signature:   Vector CBaseEntity::GetOrigin()

Function:    CBaseEntity::GetOwner
Signature:   handle CBaseEntity::GetOwner()
Description: Gets this entity's owner

Function:    CBaseEntity::GetPhysicsObject
Signature:   handle CBaseEntity::GetPhysicsObject()
Description: Get the entity's physics object if it has one

Function:    CBaseEntity::GetPreTemplateName
Signature:   string CBaseEntity::GetPreTemplateName()
Description: Get the entity name stripped of template unique decoration

Function:    CBaseEntity::GetRenderAlpha
Signature:   int CBaseEntity::GetRenderAlpha()
Description: Get the render color's alpha value

Function:    CBaseEntity::GetRenderColorB
Signature:   int CBaseEntity::GetRenderColorB()
Description: Get the render color's B value

Function:    CBaseEntity::GetRenderColorG
Signature:   int CBaseEntity::GetRenderColorG()
Description: Get the render color's G value

Function:    CBaseEntity::GetRenderColorR
Signature:   int CBaseEntity::GetRenderColorR()
Description: Get the render color's R value

Function:    CBaseEntity::GetRenderColorVector
Signature:   Vector CBaseEntity::GetRenderColorVector()
Description: Get the render color as a vector

Function:    CBaseEntity::GetRenderMode
Signature:   int CBaseEntity::GetRenderMode()
Description: Get render mode

Function:    CBaseEntity::GetRightVector
Signature:   Vector CBaseEntity::GetRightVector()
Description: Get the right vector of the entity

Function:    CBaseEntity::GetRootMoveParent
Signature:   handle CBaseEntity::GetRootMoveParent()
Description: If in hierarchy, walks up the hierarchy to find the root parent

Function:    CBaseEntity::GetScriptId
Signature:   string CBaseEntity::GetScriptId()
Description: Retrieve the unique identifier used to refer to the entity within the scripting system

Function:    CBaseEntity::GetScriptScope
Signature:   handle CBaseEntity::GetScriptScope()
Description: Retrieve the script-side data associated with an entity

Function:    CBaseEntity::GetSolid
Signature:   int CBaseEntity::GetSolid()

Function:    CBaseEntity::GetSolidFlags
Signature:   int CBaseEntity::GetSolidFlags()
Description: Get solid flags

Function:    CBaseEntity::GetSoundDuration
Signature:   float CBaseEntity::GetSoundDuration(string, string)
Description: Returns float duration of the sound. Takes soundname and optional actormodelname.

Function:    CBaseEntity::GetSpawnFlags
Signature:   int CBaseEntity::GetSpawnFlags()
Description: Get spawnflags

Function:    CBaseEntity::GetTakeDamage
Signature:   int CBaseEntity::GetTakeDamage()
Description: Gets this entity's m_takedamage value. (DAMAGE_YES, DAMAGE_NO, etc.)

Function:    CBaseEntity::GetTeam
Signature:   int CBaseEntity::GetTeam()

Function:    CBaseEntity::GetTransmitState
Signature:   int CBaseEntity::GetTransmitState()

Function:    CBaseEntity::GetUpVector
Signature:   Vector CBaseEntity::GetUpVector()
Description: Get the up vector of the entity

Function:    CBaseEntity::GetVelocity
Signature:   Vector CBaseEntity::GetVelocity()

Function:    CBaseEntity::GetWaterLevel
Signature:   int CBaseEntity::GetWaterLevel()
Description: Get current level of water submergence

Function:    CBaseEntity::HasSpawnFlags
Signature:   bool CBaseEntity::HasSpawnFlags(int)
Description: Check if the entity has specific spawnflag(s) ticked

Function:    CBaseEntity::HeadTarget
Signature:   Vector CBaseEntity::HeadTarget(Vector)

Function:    CBaseEntity::IsAlive
Signature:   bool CBaseEntity::IsAlive()
Description: Return true if this entity is alive

Function:    CBaseEntity::IsCombatCharacter
Signature:   bool CBaseEntity::IsCombatCharacter()
Description: Returns true if this entity is a combat character (player or NPC).

Function:    CBaseEntity::IsEffectActive
Signature:   bool CBaseEntity::IsEffectActive(int)
Description: Check if an effect is active

Function:    CBaseEntity::IsEntVisible
Signature:   bool CBaseEntity::IsEntVisible(handle)
Description: Check if the specified entity can be visible to this entity.

Function:    CBaseEntity::IsFollowingEntity
Signature:   bool CBaseEntity::IsFollowingEntity()
Description: Returns true if this entity is following another entity.

Function:    CBaseEntity::IsNPC
Signature:   bool CBaseEntity::IsNPC()
Description: Returns true if this entity is a NPC.

Function:    CBaseEntity::IsPlayer
Signature:   bool CBaseEntity::IsPlayer()
Description: Returns true if this entity is a player.

Function:    CBaseEntity::IsVisible
Signature:   bool CBaseEntity::IsVisible(Vector)
Description: Check if the specified position can be visible to this entity.

Function:    CBaseEntity::IsVisibleWithMask
Signature:   bool CBaseEntity::IsVisibleWithMask(Vector, int)
Description: Check if the specified position can be visible to this entity with a specific trace mask.

Function:    CBaseEntity::IsWeapon
Signature:   bool CBaseEntity::IsWeapon()
Description: Returns true if this entity is a weapon.

Function:    CBaseEntity::IsWorld
Signature:   bool CBaseEntity::IsWorld()
Description: Returns true if this entity is the world.

Function:    CBaseEntity::NextMovePeer
Signature:   handle CBaseEntity::NextMovePeer()

Function:    CBaseEntity::PrecacheSoundScript
Signature:   void CBaseEntity::PrecacheSoundScript(string)
Description: Precache a sound for later playing.

Function:    CBaseEntity::RemoveEFlags
Signature:   void CBaseEntity::RemoveEFlags(int)
Description: Remove Eflags

Function:    CBaseEntity::RemoveEffects
Signature:   void CBaseEntity::RemoveEffects(int)
Description: Remove effect(s)

Function:    CBaseEntity::RemoveFlag
Signature:   void CBaseEntity::RemoveFlag(int)
Description: Remove flag

Function:    CBaseEntity::RemoveSolidFlags
Signature:   void CBaseEntity::RemoveSolidFlags(int)
Description: Remove solid flags

Function:    CBaseEntity::RemoveSpawnFlags
Signature:   void CBaseEntity::RemoveSpawnFlags(int)
Description: Remove spawnflag(s)

Function:    CBaseEntity::SetAbsAngles
Signature:   void CBaseEntity::SetAbsAngles(Vector)
Description: SetAbsAngles

Function:    CBaseEntity::SetAbsOrigin
Signature:   void CBaseEntity::SetAbsOrigin(Vector)
Description: SetAbsOrigin

Function:    CBaseEntity::SetAngles
Signature:   void CBaseEntity::SetAngles(Vector)
Description: Set entity pitch, yaw, roll

Function:    CBaseEntity::SetAngularVelocity
Signature:   void CBaseEntity::SetAngularVelocity(float, float, float)
Description: Set the local angular velocity - takes float pitch,yaw,roll velocities

Function:    CBaseEntity::SetCollisionGroup
Signature:   void CBaseEntity::SetCollisionGroup(int)
Description: Set the collision group

Function:    CBaseEntity::SetContextThink
Signature:   void CBaseEntity::SetContextThink(string, handle, float)
Description: Set a think function on this entity.

Function:    CBaseEntity::SetEffects
Signature:   void CBaseEntity::SetEffects(int)
Description: Set effect(s)

Function:    CBaseEntity::SetForwardVector
Signature:   void CBaseEntity::SetForwardVector(Vector)
Description: Set the orientation of the entity to have this forward vector

Function:    CBaseEntity::SetFriction
Signature:   void CBaseEntity::SetFriction(float)

Function:    CBaseEntity::SetGravity
Signature:   void CBaseEntity::SetGravity(float)

Function:    CBaseEntity::SetHealth
Signature:   void CBaseEntity::SetHealth(int)

Function:    CBaseEntity::SetLocalAngles
Signature:   void CBaseEntity::SetLocalAngles(Vector)
Description: SetLocalAngles

Function:    CBaseEntity::SetLocalOrigin
Signature:   void CBaseEntity::SetLocalOrigin(Vector)
Description: SetLocalOrigin

Function:    CBaseEntity::SetMass
Signature:   void CBaseEntity::SetMass(float)

Function:    CBaseEntity::SetMaxHealth
Signature:   void CBaseEntity::SetMaxHealth(int)

Function:    CBaseEntity::SetModel
Signature:   void CBaseEntity::SetModel(string)

Function:    CBaseEntity::SetMoveType
Signature:   void CBaseEntity::SetMoveType(int)
Description: Set the move type

Function:    CBaseEntity::SetName
Signature:   void CBaseEntity::SetName(string)

Function:    CBaseEntity::SetOrigin
Signature:   void CBaseEntity::SetOrigin(Vector)

Function:    CBaseEntity::SetOriginAngles
Signature:   void CBaseEntity::SetOriginAngles(Vector, Vector)
Description: Set both the origin and the angles

Function:    CBaseEntity::SetOriginAnglesVelocity
Signature:   void CBaseEntity::SetOriginAnglesVelocity(Vector, Vector, Vector)
Description: Set the origin, the angles, and the velocity

Function:    CBaseEntity::SetOwner
Signature:   void CBaseEntity::SetOwner(handle)
Description: Sets this entity's owner

Function:    CBaseEntity::SetParent
Signature:   void CBaseEntity::SetParent(handle, string)

Function:    CBaseEntity::SetRenderAlpha
Signature:   void CBaseEntity::SetRenderAlpha(int)
Description: Set the render color's alpha value

Function:    CBaseEntity::SetRenderColor
Signature:   void CBaseEntity::SetRenderColor(int, int, int)
Description: Set the render color

Function:    CBaseEntity::SetRenderColorB
Signature:   void CBaseEntity::SetRenderColorB(int)
Description: Set the render color's B value

Function:    CBaseEntity::SetRenderColorG
Signature:   void CBaseEntity::SetRenderColorG(int)
Description: Set the render color's G value

Function:    CBaseEntity::SetRenderColorR
Signature:   void CBaseEntity::SetRenderColorR(int)
Description: Set the render color's R value

Function:    CBaseEntity::SetRenderColorVector
Signature:   void CBaseEntity::SetRenderColorVector(Vector)
Description: Set the render color as a vector

Function:    CBaseEntity::SetRenderMode
Signature:   void CBaseEntity::SetRenderMode(int)
Description: Set render mode

Function:    CBaseEntity::SetSize
Signature:   void CBaseEntity::SetSize(Vector, Vector)

Function:    CBaseEntity::SetSolid
Signature:   void CBaseEntity::SetSolid(int)

Function:    CBaseEntity::SetTakeDamage
Signature:   void CBaseEntity::SetTakeDamage(int)
Description: Sets this entity's m_takedamage value. (DAMAGE_YES, DAMAGE_NO, etc.)

Function:    CBaseEntity::SetTeam
Signature:   void CBaseEntity::SetTeam(int)

Function:    CBaseEntity::SetThink
Signature:   void CBaseEntity::SetThink(handle, float)

Function:    CBaseEntity::SetThinkFunction
Signature:   void CBaseEntity::SetThinkFunction(string, float)

Function:    CBaseEntity::SetTransmitState
Signature:   int CBaseEntity::SetTransmitState(int)

Function:    CBaseEntity::SetVelocity
Signature:   void CBaseEntity::SetVelocity(Vector)

Function:    CBaseEntity::StopFollowingEntity
Signature:   void CBaseEntity::StopFollowingEntity()
Description: Stops following an entity if we're following one.

Function:    CBaseEntity::StopSound
Signature:   void CBaseEntity::StopSound(string)
Description: Stops a sound from this entity.

Function:    CBaseEntity::StopThink
Signature:   void CBaseEntity::StopThink()

Function:    CBaseEntity::StopThinkFunction
Signature:   void CBaseEntity::StopThinkFunction()

Function:    CBaseEntity::TakeDamage
Signature:   int CBaseEntity::TakeDamage(handle)
Description: Apply damage to this entity with a given info handle

Function:    CBaseEntity::TakeHealth
Signature:   int CBaseEntity::TakeHealth(float, int)
Description: Give this entity health

Function:    CBaseEntity::ValidateScriptScope
Signature:   bool CBaseEntity::ValidateScriptScope()
Description: Ensure that an entity's script scope has been created

Function:    CBaseEntity::entindex
Signature:   int CBaseEntity::entindex()

Function:    CBaseFilter::BloodAllowed
Signature:   bool CBaseFilter::BloodAllowed(handle, handle)
Description: Check if the given caller and damage info allow for the production of blood.

Function:    CBaseFilter::DamageMod
Signature:   bool CBaseFilter::DamageMod(handle, handle)
Description: Mods the damage info with the given caller.

Function:    CBaseFilter::PassesDamageFilter
Signature:   bool CBaseFilter::PassesDamageFilter(handle, handle)
Description: Check if the given caller and damage info pass the damage filter, with the second parameter being a CTakeDamageInfo instance. The caller is the one who requests the filter result; For example, the entity being damaged when using this as a damage filter.

Function:    CBaseFilter::PassesFilter
Signature:   bool CBaseFilter::PassesFilter(handle, handle)
Description: Check if the given caller and entity pass the filter. The caller is the one who requests the filter result; For example, the entity being damaged when using this as a damage filter.

Function:    CBaseFilter::PassesFinalDamageFilter
Signature:   bool CBaseFilter::PassesFinalDamageFilter(handle, handle)
Description: Used by filter_damage_redirect to distinguish between standalone filter calls and actually damaging an entity. Returns true if there's no unique behavior. Parameters are identical to PassesDamageFilter.

Function:    CBaseFlex::GetCurrentScene
Signature:   handle CBaseFlex::GetCurrentScene()
Description: Returns the instance of the oldest active scene entity (if any).

Function:    CBaseFlex::GetSceneByIndex
Signature:   handle CBaseFlex::GetSceneByIndex(int)
Description: Returns the instance of the scene entity at the specified index.

Function:    CBaseFlex::SetViewtarget
Signature:   void CBaseFlex::SetViewtarget(Vector)
Description: Sets the entity's eye target.

Function:    CBaseGrenade::GetBlastForce
Signature:   Vector CBaseGrenade::GetBlastForce()
Description: Gets the grenade's blast force override. Grenades which use base damage force calculations return 0,0,0

Function:    CBaseGrenade::GetDamage
Signature:   float CBaseGrenade::GetDamage()
Description: Gets the grenade's blast damage.

Function:    CBaseGrenade::GetDamageRadius
Signature:   float CBaseGrenade::GetDamageRadius()
Description: Gets the grenade's blast damage radius.

Function:    CBaseGrenade::GetOriginalThrower
Signature:   handle CBaseGrenade::GetOriginalThrower()
Description: Gets the grenade's original thrower after the thrower was changed due to being picked up by a gravity gun or something.

Function:    CBaseGrenade::GetThrower
Signature:   handle CBaseGrenade::GetThrower()
Description: Gets the grenade's thrower.

Function:    CBaseGrenade::GetTimer
Signature:   float CBaseGrenade::GetTimer()
Description: Gets the grenade's detonate time if it has one.

Function:    CBaseGrenade::GetWarnAITime
Signature:   float CBaseGrenade::GetWarnAITime()
Description: Gets the time at which the grenade will warn/has warned AI.

Function:    CBaseGrenade::HasWarnedAI
Signature:   bool CBaseGrenade::HasWarnedAI()
Description: Whether or not the grenade has issued its DANGER sound to the world sound list yet.

Function:    CBaseGrenade::IsLive
Signature:   bool CBaseGrenade::IsLive()
Description: Whether or not the grenade has issued its DANGER sound to the world sound list yet.

Function:    CBaseGrenade::SetDamage
Signature:   void CBaseGrenade::SetDamage(float)
Description: Sets the grenade's blast damage.

Function:    CBaseGrenade::SetDamageRadius
Signature:   void CBaseGrenade::SetDamageRadius(float)
Description: Sets the grenade's blast damage radius.

Function:    CBaseGrenade::SetThrower
Signature:   void CBaseGrenade::SetThrower(handle)
Description: Sets the grenade's thrower.

Function:    CBasePlayer::DeathCount
Signature:   int CBasePlayer::DeathCount()
Description: Gets the number of deaths this player has had in a multiplayer game.

Function:    CBasePlayer::DisableButtons
Signature:   void CBasePlayer::DisableButtons(int)
Description: Disables the specified button mask.

Function:    CBasePlayer::EnableButtons
Signature:   void CBasePlayer::EnableButtons(int)
Description: Enables the specified button mask if it was disabled before.

Function:    CBasePlayer::FlashlightIsOn
Signature:   int CBasePlayer::FlashlightIsOn()
Description: Returns true if the flashlight is on.

Function:    CBasePlayer::FlashlightTurnOff
Signature:   void CBasePlayer::FlashlightTurnOff()
Description: Turns off the flashlight.

Function:    CBasePlayer::FlashlightTurnOn
Signature:   void CBasePlayer::FlashlightTurnOn()
Description: Turns on the flashlight.

Function:    CBasePlayer::ForceButtons
Signature:   void CBasePlayer::ForceButtons(int)
Description: Forces the specified button mask.

Function:    CBasePlayer::FragCount
Signature:   int CBasePlayer::FragCount()
Description: Gets the number of frags (kills) this player has in a multiplayer game.

Function:    CBasePlayer::GetArmor
Signature:   int CBasePlayer::GetArmor()
Description: Gets the player's armor.

Function:    CBasePlayer::GetAutoaimVector
Signature:   Vector CBasePlayer::GetAutoaimVector(float)
Description: Gets the player's autoaim shooting direction with the specified scale.

Function:    CBasePlayer::GetAutoaimVectorCustomMaxDist
Signature:   Vector CBasePlayer::GetAutoaimVectorCustomMaxDist(float, float)
Description: Gets the player's autoaim shooting direction with the specified scale and a custom max distance.

Function:    CBasePlayer::GetButtonDisabled
Signature:   int CBasePlayer::GetButtonDisabled()
Description: Gets the player's currently unusable buttons.

Function:    CBasePlayer::GetButtonForced
Signature:   int CBasePlayer::GetButtonForced()
Description: Gets the player's currently forced buttons.

Function:    CBasePlayer::GetButtonLast
Signature:   int CBasePlayer::GetButtonLast()
Description: Gets the player's previously active buttons.

Function:    CBasePlayer::GetButtonPressed
Signature:   int CBasePlayer::GetButtonPressed()
Description: Gets the player's currently pressed buttons.

Function:    CBasePlayer::GetButtonReleased
Signature:   int CBasePlayer::GetButtonReleased()
Description: Gets the player's just-released buttons.

Function:    CBasePlayer::GetButtons
Signature:   int CBasePlayer::GetButtons()
Description: Gets the player's active buttons.

Function:    CBasePlayer::GetExpresser
Signature:   handle CBasePlayer::GetExpresser()
Description: Gets a handle for this player's expresser.

Function:    CBasePlayer::GetEyeForward
Signature:   Vector CBasePlayer::GetEyeForward()
Description: Gets the player's forward eye vector.

Function:    CBasePlayer::GetEyeRight
Signature:   Vector CBasePlayer::GetEyeRight()
Description: Gets the player's right eye vector.

Function:    CBasePlayer::GetEyeUp
Signature:   Vector CBasePlayer::GetEyeUp()
Description: Gets the player's up eye vector.

Function:    CBasePlayer::GetFOV
Signature:   int CBasePlayer::GetFOV()

Function:    CBasePlayer::GetFOVOwner
Signature:   handle CBasePlayer::GetFOVOwner()
Description: Gets current view owner.

Function:    CBasePlayer::GetNetworkIDString
Signature:   string CBasePlayer::GetNetworkIDString()
Description: Gets the player's network (i.e. Steam) ID.

Function:    CBasePlayer::GetPlayerName
Signature:   string CBasePlayer::GetPlayerName()
Description: Gets the player's name.

Function:    CBasePlayer::GetUserID
Signature:   int CBasePlayer::GetUserID()
Description: Gets the player's user ID.

Function:    CBasePlayer::GetViewModel
Signature:   handle CBasePlayer::GetViewModel(int)
Description: Returns the viewmodel of the specified index.

Function:    CBasePlayer::IsConnected
Signature:   bool CBasePlayer::IsConnected()
Description: Returns true if this player is connected.

Function:    CBasePlayer::IsDisconnecting
Signature:   bool CBasePlayer::IsDisconnecting()
Description: Returns true if this player is disconnecting.

Function:    CBasePlayer::IsNoclipping
Signature:   bool CBasePlayer::IsNoclipping()
Description: Returns true if the player is in noclip mode.

Function:    CBasePlayer::IsSuitEquipped
Signature:   bool CBasePlayer::IsSuitEquipped()
Description: Returns true if this player had the HEV suit equipped.

Function:    CBasePlayer::SetArmor
Signature:   void CBasePlayer::SetArmor(int)
Description: Sets the player's armor.

Function:    CBasePlayer::SetFOV
Signature:   void CBasePlayer::SetFOV(int, float)
Description: Sets player FOV regardless of view owner.

Function:    CBasePlayer::SetMuzzleFlashTime
Signature:   void CBasePlayer::SetMuzzleFlashTime(float)
Description: Sets the player's muzzle flash time for AI.

Function:    CBasePlayer::SetSuitUpdate
Signature:   void CBasePlayer::SetSuitUpdate(string, int, int)
Description: Sets an update for the player's HEV suit.

Function:    CBasePlayer::ShouldAutoaim
Signature:   bool CBasePlayer::ShouldAutoaim()
Description: Returns true if the player should be autoaiming.

Function:    CBasePlayer::UnforceButtons
Signature:   void CBasePlayer::UnforceButtons(int)
Description: Unforces the specified button mask if it was forced before.

Function:    CBasePlayer::ViewPunch
Signature:   void CBasePlayer::ViewPunch(Vector)
Description: Punches the player's view with the specified vector.

Function:    CBaseTrigger::Disable
Signature:   void CBaseTrigger::Disable()

Function:    CBaseTrigger::Enable
Signature:   void CBaseTrigger::Enable()

Function:    CBaseTrigger::GetTouchedEntityOfType
Signature:   handle CBaseTrigger::GetTouchedEntityOfType(string)
Description: Gets the first touching entity which matches the specified class.

Function:    CBaseTrigger::GetTouchingEntities
Signature:   void CBaseTrigger::GetTouchingEntities(handle)
Description: Gets all entities touching this trigger (and satisfying its criteria). This function copies them to a table with a maximum number of elements.

Function:    CBaseTrigger::IsTouching
Signature:   bool CBaseTrigger::IsTouching(handle)
Description: Checks whether the passed entity is touching the trigger.

Function:    CBaseTrigger::PassesTriggerFilters
Signature:   bool CBaseTrigger::PassesTriggerFilters(handle)
Description: Returns whether a target entity satisfies the trigger's spawnflags, filter, etc.

Function:    CBaseTrigger::PointIsWithin
Signature:   bool CBaseTrigger::PointIsWithin(Vector)
Description: Checks if the given vector is within the trigger's volume.

Function:    CBaseTrigger::TouchTest
Signature:   void CBaseTrigger::TouchTest()

Function:    CBaseTrigger::UsesFilter
Signature:   bool CBaseTrigger::UsesFilter()
Description: Returns true if this trigger uses a filter.

Function:    CConvars::GetBool
Signature:   bool CConvars::GetBool(string)
Description: Returns the convar as a bool. May return null if no such convar.

Function:    CConvars::GetClientConvarValue
Signature:   string CConvars::GetClientConvarValue(int, string)
Description: Get a convar keyvalue for a specified client

Function:    CConvars::GetCommandClient
Signature:   handle CConvars::GetCommandClient()
Description: returns the player who issued this console command.

Function:    CConvars::GetDefaultValue
Signature:   string CConvars::GetDefaultValue(string)
Description: Returns the convar's default value as a string. May return null if no such convar.

Function:    CConvars::GetFloat
Signature:   float CConvars::GetFloat(string)
Description: Returns the convar as a float. May return null if no such convar.

Function:    CConvars::GetInt
Signature:   int CConvars::GetInt(string)
Description: Returns the convar as an int. May return null if no such convar.

Function:    CConvars::GetStr
Signature:   string CConvars::GetStr(string)
Description: Returns the convar as a string. May return null if no such convar.

Function:    CConvars::IsFlagSet
Signature:   bool CConvars::IsFlagSet(string, int)
Description: Returns the convar's flags. May return null if no such convar.

Function:    CConvars::RegisterCommand
Signature:   void CConvars::RegisterCommand(string, handle, string, int)
Description: register a console command.

Function:    CConvars::RegisterConvar
Signature:   void CConvars::RegisterConvar(string, string, string, int)
Description: register a new console variable.

Function:    CConvars::SetBool
Signature:   void CConvars::SetBool(string, bool)
Description: Sets the value of the convar as a bool.

Function:    CConvars::SetChangeCallback
Signature:   void CConvars::SetChangeCallback(string, handle)
Description: callback is called with 5 parameters (var, szOldValue, flOldValue, szNewValue, flNewValue)

Function:    CConvars::SetCompletionCallback
Signature:   void CConvars::SetCompletionCallback(string, handle)
Description: callback is called with 3 parameters (cmd, partial, commands), user strings must be appended to 'commands' array

Function:    CConvars::SetFloat
Signature:   void CConvars::SetFloat(string, float)
Description: Sets the value of the convar as a float.

Function:    CConvars::SetInt
Signature:   void CConvars::SetInt(string, int)
Description: Sets the value of the convar as an int.

Function:    CConvars::SetStr
Signature:   void CConvars::SetStr(string, string)
Description: Sets the value of the convar as a string.

Function:    CConvars::UnregisterCommand
Signature:   void CConvars::UnregisterCommand(string)
Description: unregister a console command.

Function:    CDebugOverlayScriptHelper::Axis
Signature:   void CDebugOverlayScriptHelper::Axis(Vector, Vector, float, bool, float)
Description: Draws an axis. Specify origin + orientation in world space.

Function:    CDebugOverlayScriptHelper::Box
Signature:   void CDebugOverlayScriptHelper::Box(Vector, Vector, Vector, int, int, int, int, float)
Description: Draws a world-space axis-aligned box. Specify bounds in world space.

Function:    CDebugOverlayScriptHelper::BoxAngles
Signature:   void CDebugOverlayScriptHelper::BoxAngles(Vector, Vector, Vector, Vector, int, int, int, int, float)
Description: Draws an oriented box at the origin. Specify bounds in local space.

Function:    CDebugOverlayScriptHelper::BoxDirection
Signature:   void CDebugOverlayScriptHelper::BoxDirection(Vector, Vector, Vector, Vector, int, int, int, int, float)
Description: Draw box oriented to a Vector direction

Function:    CDebugOverlayScriptHelper::Circle
Signature:   void CDebugOverlayScriptHelper::Circle(Vector, Vector, Vector, float, int, int, int, int, bool, float)
Description: Draws a circle. Specify center in world space.

Function:    CDebugOverlayScriptHelper::CircleOriented
Signature:   void CDebugOverlayScriptHelper::CircleOriented(Vector, Vector, float, int, int, int, int, bool, float)
Description: Draws a circle oriented. Specify center in world space.

Function:    CDebugOverlayScriptHelper::ClearAllOverlays
Signature:   void CDebugOverlayScriptHelper::ClearAllOverlays()
Description: Clear all debug overlays at once

Function:    CDebugOverlayScriptHelper::Cross3D
Signature:   void CDebugOverlayScriptHelper::Cross3D(Vector, float, int, int, int, bool, float)
Description: Draws a world-aligned cross. Specify origin in world space.

Function:    CDebugOverlayScriptHelper::Cross3DOriented
Signature:   void CDebugOverlayScriptHelper::Cross3DOriented(Vector, Vector, float, int, int, int, bool, float)
Description: Draws an oriented cross. Specify origin in world space.

Function:    CDebugOverlayScriptHelper::DrawTickMarkedLine
Signature:   void CDebugOverlayScriptHelper::DrawTickMarkedLine(Vector, Vector, float, int, int, int, int, bool, float)
Description: Draws a dashed line. Specify endpoints in world space.

Function:    CDebugOverlayScriptHelper::EntityBounds
Signature:   void CDebugOverlayScriptHelper::EntityBounds(handle, int, int, int, int, float)
Description: Draws bounds of an entity

Function:    CDebugOverlayScriptHelper::EntityText
Signature:   void CDebugOverlayScriptHelper::EntityText(int, int, string, float, int, int, int, int)
Description: Draws text on an entity

Function:    CDebugOverlayScriptHelper::EntityTextAtPosition
Signature:   void CDebugOverlayScriptHelper::EntityTextAtPosition(Vector, int, string, float, int, int, int, int)
Description: Draw entity text overlay at a specific position

Function:    CDebugOverlayScriptHelper::Grid
Signature:   void CDebugOverlayScriptHelper::Grid(Vector)
Description: Add grid overlay

Function:    CDebugOverlayScriptHelper::HorzArrow
Signature:   void CDebugOverlayScriptHelper::HorzArrow(Vector, Vector, float, int, int, int, int, bool, float)
Description: Draws a horizontal arrow. Specify endpoints in world space.

Function:    CDebugOverlayScriptHelper::Line
Signature:   void CDebugOverlayScriptHelper::Line(Vector, Vector, int, int, int, bool, float)
Description: Draws a line between two points

Function:    CDebugOverlayScriptHelper::ScreenText
Signature:   void CDebugOverlayScriptHelper::ScreenText(float, float, string, int, int, int, int, float)
Description: Draws 2D text. Specify coordinates in screen space.

Function:    CDebugOverlayScriptHelper::SetDebugBits
Signature:   void CDebugOverlayScriptHelper::SetDebugBits(handle, int)
Description: Set debug bits on entity

Function:    CDebugOverlayScriptHelper::Sphere
Signature:   void CDebugOverlayScriptHelper::Sphere(Vector, float, int, int, int, bool, float)
Description: Draws a wireframe sphere. Specify center in world space.

Function:    CDebugOverlayScriptHelper::SweptBox
Signature:   void CDebugOverlayScriptHelper::SweptBox(Vector, Vector, Vector, Vector, Vector, int, int, int, int, float)
Description: Draws a swept box. Specify endpoints in world space and the bounds in local space.

Function:    CDebugOverlayScriptHelper::Text
Signature:   void CDebugOverlayScriptHelper::Text(Vector, string, float)
Description: Draws 2D text. Specify origin in world space.

Function:    CDebugOverlayScriptHelper::Triangle
Signature:   void CDebugOverlayScriptHelper::Triangle(Vector, Vector, Vector, int, int, int, int, bool, float)
Description: Draws a filled triangle. Specify vertices in world space.

Function:    CDebugOverlayScriptHelper::VertArrow
Signature:   void CDebugOverlayScriptHelper::VertArrow(Vector, Vector, float, int, int, int, int, bool, float)
Description: Draws a vertical arrow. Specify endpoints in world space.

Function:    CDebugOverlayScriptHelper::YawArrow
Signature:   void CDebugOverlayScriptHelper::YawArrow(Vector, float, float, float, int, int, int, int, bool, float)
Description: Draws a arrow associated with a specific yaw. Specify endpoints in world space.

Function:    CEntities::AddCustomProcedural
Signature:   void CEntities::AddCustomProcedural(string, handle, bool)
Description: Adds a custom '!' target name. The first parameter is the name of the procedural (which should NOT include the '!'), the second parameter is a function which should support 5 arguments (name, startEntity, searchingEntity, activator, caller), and the third parameter is whether or not this procedural can return multiple entities. Note that these are NOT saved and must be redeclared on restore!

Function:    CEntities::CreateByClassname
Signature:   handle CEntities::CreateByClassname(string)
Description: Creates an entity by classname

Function:    CEntities::DisableEntityListening
Signature:   void CEntities::DisableEntityListening()
Description: Disables the 'OnEntity' hooks.

Function:    CEntities::EnableEntityListening
Signature:   void CEntities::EnableEntityListening()
Description: Enables the 'OnEntity' hooks. This function must be called before using them.

Function:    CEntities::FindByClassNearestFacing
Signature:   handle CEntities::FindByClassNearestFacing(Vector, Vector, float, string)
Description: Find the nearest entity along the facing direction from the given origin within the angular threshold with the given classname.

Function:    CEntities::FindByClassname
Signature:   handle CEntities::FindByClassname(handle, string)
Description: Find entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::FindByClassnameNearest
Signature:   handle CEntities::FindByClassnameNearest(string, Vector, float)
Description: Find entities by class name nearest to a point.

Function:    CEntities::FindByClassnameNearest2D
Signature:   handle CEntities::FindByClassnameNearest2D(string, Vector, float)
Description: Find entities by class name nearest to a point in 2D space.

Function:    CEntities::FindByClassnameWithin
Signature:   handle CEntities::FindByClassnameWithin(handle, string, Vector, float)
Description: Find entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::FindByClassnameWithinBox
Signature:   handle CEntities::FindByClassnameWithinBox(handle, string, Vector, Vector)
Description: Find entities by class name within an AABB. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::FindByModel
Signature:   handle CEntities::FindByModel(handle, string)
Description: Find entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::FindByName
Signature:   handle CEntities::FindByName(handle, string)
Description: Find entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::FindByNameNearest
Signature:   handle CEntities::FindByNameNearest(string, Vector, float)
Description: Find entities by name nearest to a point.

Function:    CEntities::FindByNameWithin
Signature:   handle CEntities::FindByNameWithin(handle, string, Vector, float)
Description: Find entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::FindByTarget
Signature:   handle CEntities::FindByTarget(handle, string)
Description: Find entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::FindInSphere
Signature:   handle CEntities::FindInSphere(handle, Vector, float)
Description: Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::First
Signature:   handle CEntities::First()
Description: Begin an iteration over the list of entities

Function:    CEntities::GetLocalPlayer
Signature:   handle CEntities::GetLocalPlayer()
Description: Get local player or listen server host

Function:    CEntities::Next
Signature:   handle CEntities::Next(handle)
Description: Continue an iteration over the list of entities, providing reference to a previously found entity

Function:    CEntities::RemoveCustomProcedural
Signature:   void CEntities::RemoveCustomProcedural(string)
Description: Removes a custom '!' target name previously defined with AddCustomProcedural.

Function:    CEnvEntityMaker::SpawnEntity
Signature:   void CEnvEntityMaker::SpawnEntity()
Description: Create an entity at the location of the maker

Function:    CEnvEntityMaker::SpawnEntityAtEntityOrigin
Signature:   void CEnvEntityMaker::SpawnEntityAtEntityOrigin(handle)
Description: Create an entity at the location of a specified entity instance

Function:    CEnvEntityMaker::SpawnEntityAtLocation
Signature:   void CEnvEntityMaker::SpawnEntityAtLocation(Vector, Vector)
Description: Create an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll)

Function:    CEnvEntityMaker::SpawnEntityAtNamedEntityOrigin
Signature:   void CEnvEntityMaker::SpawnEntityAtNamedEntityOrigin(string)
Description: Create an entity at the location of a named entity

Function:    CFourWheelVehiclePhysics::BoostTimeLeft
Signature:   int CFourWheelVehiclePhysics::BoostTimeLeft()
Description: Gets how much time is left in any current boost.

Function:    CFourWheelVehiclePhysics::DisableMotion
Signature:   void CFourWheelVehiclePhysics::DisableMotion()
Description: Disables vehicle motion.

Function:    CFourWheelVehiclePhysics::EnableMotion
Signature:   void CFourWheelVehiclePhysics::EnableMotion()
Description: Enables vehicle motion.

Function:    CFourWheelVehiclePhysics::GetHLSpeed
Signature:   float CFourWheelVehiclePhysics::GetHLSpeed()
Description: Gets HL speed.

Function:    CFourWheelVehiclePhysics::GetMaxSpeed
Signature:   int CFourWheelVehiclePhysics::GetMaxSpeed()
Description: Gets the max speed.

Function:    CFourWheelVehiclePhysics::GetRPM
Signature:   int CFourWheelVehiclePhysics::GetRPM()
Description: Gets the RPM.

Function:    CFourWheelVehiclePhysics::GetSpeed
Signature:   int CFourWheelVehiclePhysics::GetSpeed()
Description: Gets the speed.

Function:    CFourWheelVehiclePhysics::GetSteering
Signature:   float CFourWheelVehiclePhysics::GetSteering()
Description: Gets the steeering.

Function:    CFourWheelVehiclePhysics::GetSteeringDegrees
Signature:   float CFourWheelVehiclePhysics::GetSteeringDegrees()
Description: Gets the degrees of steeering.

Function:    CFourWheelVehiclePhysics::GetThrottle
Signature:   float CFourWheelVehiclePhysics::GetThrottle()
Description: Gets the throttle.

Function:    CFourWheelVehiclePhysics::HasBoost
Signature:   bool CFourWheelVehiclePhysics::HasBoost()
Description: Checks if the vehicle has the ability to boost.

Function:    CFourWheelVehiclePhysics::IsBoosting
Signature:   bool CFourWheelVehiclePhysics::IsBoosting()
Description: Checks if the vehicle is boosting.

Function:    CFourWheelVehiclePhysics::IsEngineDisabled
Signature:   bool CFourWheelVehiclePhysics::IsEngineDisabled()
Description: Checks whether the engine is disabled.

Function:    CFourWheelVehiclePhysics::SetAction
Signature:   void CFourWheelVehiclePhysics::SetAction(float)
Description: Sets the action.

Function:    CFourWheelVehiclePhysics::SetBoost
Signature:   void CFourWheelVehiclePhysics::SetBoost(float)
Description: Sets the boost.

Function:    CFourWheelVehiclePhysics::SetDisableEngine
Signature:   void CFourWheelVehiclePhysics::SetDisableEngine(bool)
Description: Sets whether the engine is disabled.

Function:    CFourWheelVehiclePhysics::SetHandbrake
Signature:   void CFourWheelVehiclePhysics::SetHandbrake(bool)
Description: Sets the handbrake.

Function:    CFourWheelVehiclePhysics::SetHasBrakePedal
Signature:   void CFourWheelVehiclePhysics::SetHasBrakePedal(bool)
Description: Sets whether a handbrake pedal exists.

Function:    CFourWheelVehiclePhysics::SetMaxReverseThrottle
Signature:   void CFourWheelVehiclePhysics::SetMaxReverseThrottle(float)
Description: Sets the max reverse throttle.

Function:    CFourWheelVehiclePhysics::SetMaxThrottle
Signature:   void CFourWheelVehiclePhysics::SetMaxThrottle(float)
Description: Sets the max throttle.

Function:    CFourWheelVehiclePhysics::SetSteering
Signature:   void CFourWheelVehiclePhysics::SetSteering(float, float)
Description: Sets the steering.

Function:    CFourWheelVehiclePhysics::SetSteeringDegrees
Signature:   void CFourWheelVehiclePhysics::SetSteeringDegrees(float)
Description: Sets the degrees of steering.

Function:    CFourWheelVehiclePhysics::SetThrottle
Signature:   void CFourWheelVehiclePhysics::SetThrottle(float)
Description: Sets the throttle.

Function:    CGameRules::AllowFlashlight
Signature:   bool CGameRules::AllowFlashlight()
Description: Returns true if players are allowed to switch on their flashlight.

Function:    CGameRules::AllowNPCs
Signature:   bool CGameRules::AllowNPCs()
Description: Returns true if NPCs are allowed.

Function:    CGameRules::AllowSPRespawn
Signature:   bool CGameRules::AllowSPRespawn()

Function:    CGameRules::AllowThirdPersonCamera
Signature:   bool CGameRules::AllowThirdPersonCamera()
Description: Returns true if third-person camera is allowed.

Function:    CGameRules::Damage_IsTimeBased
Signature:   bool CGameRules::Damage_IsTimeBased(int)
Description: Damage types that are time-based.

Function:    CGameRules::Damage_NoPhysicsForce
Signature:   bool CGameRules::Damage_NoPhysicsForce(int)
Description: Damage types that don't have to supply a physics force & position.

Function:    CGameRules::Damage_ShouldGibCorpse
Signature:   bool CGameRules::Damage_ShouldGibCorpse(int)
Description: Damage types that gib the corpse.

Function:    CGameRules::Damage_ShouldNotBleed
Signature:   bool CGameRules::Damage_ShouldNotBleed(int)
Description: Damage types that don't make the player bleed.

Function:    CGameRules::Damage_ShowOnHUD
Signature:   bool CGameRules::Damage_ShowOnHUD(int)
Description: Damage types that have client HUD art.

Function:    CGameRules::DefaultFOV
Signature:   int CGameRules::DefaultFOV()
Description: Default player FOV in this game.

Function:    CGameRules::GetDamageMultiplier
Signature:   float CGameRules::GetDamageMultiplier()
Description: Ammo type damage multiplier.

Function:    CGameRules::GetGameDescription
Signature:   string CGameRules::GetGameDescription()
Description: This is the game description that gets seen in server browsers.

Function:    CGameRules::GetGameType
Signature:   int CGameRules::GetGameType()

Function:    CGameRules::GetGameTypeName
Signature:   string CGameRules::GetGameTypeName()

Function:    CGameRules::GetSkillLevel
Signature:   int CGameRules::GetSkillLevel()
Description: Returns the game's difficulty/skill level.

Function:    CGameRules::InRoundRestart
Signature:   bool CGameRules::InRoundRestart()
Description: Returns true if the round is restarting.

Function:    CGameRules::IsCoOp
Signature:   bool CGameRules::IsCoOp()

Function:    CGameRules::IsDeathmatch
Signature:   bool CGameRules::IsDeathmatch()

Function:    CGameRules::IsMultiplayer
Signature:   bool CGameRules::IsMultiplayer()
Description: Returns true if this is a multiplayer game (like co-op or deathmatch).

Function:    CGameRules::IsSkillLevel
Signature:   bool CGameRules::IsSkillLevel(int)
Description: Returns true if the game is set to the specified difficulty/skill level.

Function:    CGameRules::IsTeamplay
Signature:   bool CGameRules::IsTeamplay()

Function:    CGameRules::Name
Signature:   string CGameRules::Name()
Description: Gets the name of these rules.

Function:    CGameRules::RefreshSkillData
Signature:   void CGameRules::RefreshSkillData(bool)

Function:    CGameRules::SetSkillLevel
Signature:   void CGameRules::SetSkillLevel(int)
Description: Sets the game's difficulty/skill level.

Function:    CGameRules::ShouldCollide
Signature:   bool CGameRules::ShouldCollide(int, int)
Description: Returns whether two collision groups collide with each other in this game.

Function:    CGameTrace::AllSolid
Signature:   bool CGameTrace::AllSolid()
Description: Returns whether the trace is completely within a solid.

Function:    CGameTrace::Contents
Signature:   int CGameTrace::Contents()
Description: Gets the contents of the surface the trace has hit.

Function:    CGameTrace::Destroy
Signature:   void CGameTrace::Destroy()
Description: Deletes this instance. Important for preventing memory leaks.

Function:    CGameTrace::DidHit
Signature:   bool CGameTrace::DidHit()
Description: Returns whether the trace hit anything.

Function:    CGameTrace::DidHitNonWorldEntity
Signature:   bool CGameTrace::DidHitNonWorldEntity()
Description: Returns whether the trace hit something other than the world entity.

Function:    CGameTrace::DidHitWorld
Signature:   bool CGameTrace::DidHitWorld()
Description: Returns whether the trace hit the world entity or not.

Function:    CGameTrace::DispFlags
Signature:   int CGameTrace::DispFlags()
Description: Gets the displacement flags of the surface the trace has hit.

Function:    CGameTrace::EndPos
Signature:   Vector CGameTrace::EndPos()
Description: Gets the trace's end position.

Function:    CGameTrace::Entity
Signature:   handle CGameTrace::Entity()
Description: Returns the entity this trace has hit.

Function:    CGameTrace::Fraction
Signature:   float CGameTrace::Fraction()
Description: Gets the fraction of the trace completed. For example, if the trace stopped exactly halfway to the end position, this would be 0.5.

Function:    CGameTrace::FractionLeftSolid
Signature:   float CGameTrace::FractionLeftSolid()
Description: If this trace started within a solid, this is the point in the trace's fraction at which it left that solid.

Function:    CGameTrace::GetEntityIndex
Signature:   int CGameTrace::GetEntityIndex()
Description: Returns the index of whatever entity this trace hit.

Function:    CGameTrace::HitBox
Signature:   int CGameTrace::HitBox()
Description: Returns the hitbox of the entity this trace has hit. If it hit the world entity, this returns the static prop index.

Function:    CGameTrace::HitGroup
Signature:   int CGameTrace::HitGroup()
Description: Returns the specific hit group this trace hit if it hit an entity.

Function:    CGameTrace::IsDispSurface
Signature:   bool CGameTrace::IsDispSurface()
Description: Returns whether this trace hit a displacement.

Function:    CGameTrace::IsDispSurfaceBuildable
Signature:   bool CGameTrace::IsDispSurfaceBuildable()
Description: Returns whether DISPSURF_FLAG_BUILDABLE is ticked on the displacement this trace hit.

Function:    CGameTrace::IsDispSurfaceProp1
Signature:   bool CGameTrace::IsDispSurfaceProp1()
Description: Returns whether DISPSURF_FLAG_SURFPROP1 is ticked on the displacement this trace hit.

Function:    CGameTrace::IsDispSurfaceProp2
Signature:   bool CGameTrace::IsDispSurfaceProp2()
Description: Returns whether DISPSURF_FLAG_SURFPROP2 is ticked on the displacement this trace hit.

Function:    CGameTrace::IsDispSurfaceWalkable
Signature:   bool CGameTrace::IsDispSurfaceWalkable()
Description: Returns whether DISPSURF_FLAG_WALKABLE is ticked on the displacement this trace hit.

Function:    CGameTrace::PhysicsBone
Signature:   int CGameTrace::PhysicsBone()
Description: Returns the physics bone this trace hit if it hit an entity.

Function:    CGameTrace::Plane
Signature:   handle CGameTrace::Plane()

Function:    CGameTrace::StartPos
Signature:   Vector CGameTrace::StartPos()
Description: Gets the trace's start position.

Function:    CGameTrace::StartSolid
Signature:   bool CGameTrace::StartSolid()
Description: Returns whether the trace started within a solid.

Function:    CGameTrace::Surface
Signature:   handle CGameTrace::Surface()

Function:    CGlobalState::AddGlobal
Signature:   int CGlobalState::AddGlobal(string, string, int)
Description: Adds a new global with a specific map name and state. Returns its index.

Function:    CGlobalState::AddToCounter
Signature:   int CGlobalState::AddToCounter(int, int)
Description: Adds to the counter of the specified global.

Function:    CGlobalState::GetCounter
Signature:   int CGlobalState::GetCounter(int)
Description: Gets the counter of the specified global.

Function:    CGlobalState::GetIndex
Signature:   int CGlobalState::GetIndex(string)
Description: Gets the index of the specified global name. Returns -1 if it does not exist.

Function:    CGlobalState::GetState
Signature:   int CGlobalState::GetState(int)
Description: Gets the state of the specified global.

Function:    CGlobalState::SetCounter
Signature:   void CGlobalState::SetCounter(int, int)
Description: Sets the counter of the specified global.

Function:    CGlobalState::SetState
Signature:   void CGlobalState::SetState(int, int)
Description: Sets the state of the specified global.

Function:    CGlobalSys::CommandLineCheck
Signature:   bool CGlobalSys::CommandLineCheck(string)
Description: returns true if the command line param was used, otherwise false.

Function:    CGlobalSys::CommandLineCheckFloat
Signature:   float CGlobalSys::CommandLineCheckFloat(string)
Description: returns the command line param as a float.

Function:    CGlobalSys::CommandLineCheckInt
Signature:   int CGlobalSys::CommandLineCheckInt(string)
Description: returns the command line param as an int.

Function:    CGlobalSys::CommandLineCheckStr
Signature:   string CGlobalSys::CommandLineCheckStr(string)
Description: returns the command line param as a string.

Function:    CGlobalSys::GetCommandLine
Signature:   string CGlobalSys::GetCommandLine()
Description: returns the command line

Function:    CHL2_Player::AddAnimStateLayer
Signature:   void CHL2_Player::AddAnimStateLayer(int, float, float, float, bool, bool)
Description: Adds a custom sequence index as a misc. layer for the singleplayer anim state, wtih parameters for blending in/out, setting the playback rate, holding the animation at the end, and only playing when the player is still.

Function:    CHL2_Player::AddAuxPower
Signature:   void CHL2_Player::AddAuxPower(float)
Description: Adds to the player's available aux power.

Function:    CHL2_Player::AddCustomSuitDevice
Signature:   void CHL2_Player::AddCustomSuitDevice(int)
Description: Adds a custom suit device ID. (1-3)

Function:    CHL2_Player::GetAuxPower
Signature:   float CHL2_Player::GetAuxPower()
Description: Gets the player's available aux power.

Function:    CHL2_Player::GetFlashlightBattery
Signature:   float CHL2_Player::GetFlashlightBattery()
Description: Gets the energy available in the player's flashlight. If the legacy (aux power-based) flashlight is enabled, this returns the aux power.

Function:    CHL2_Player::InitCustomSuitDevice
Signature:   void CHL2_Player::InitCustomSuitDevice(int, float)
Description: Initializes a custom suit device. (just sets drain rate for now)

Function:    CHL2_Player::IsCustomSuitDeviceActive
Signature:   bool CHL2_Player::IsCustomSuitDeviceActive(int)
Description: Checks if a custom suit device is active.

Function:    CHL2_Player::RemoveAuxPower
Signature:   bool CHL2_Player::RemoveAuxPower(float)
Description: Removes from the player's available aux power.

Function:    CHL2_Player::RemoveCustomSuitDevice
Signature:   void CHL2_Player::RemoveCustomSuitDevice(int)
Description: Removes a custom suit device ID. (1-3)

Function:    CHL2_Player::SetAuxPower
Signature:   void CHL2_Player::SetAuxPower(float)
Description: Sets the player's available aux power.

Function:    CLocalize::AddStringAsUTF8
Signature:   void CLocalize::AddStringAsUTF8(string, string)
Description: Adds a new localized token as a UTF-8 string (not Unicode).

Function:    CLocalize::GetTokenAsUTF8
Signature:   string CLocalize::GetTokenAsUTF8(string)
Description: Gets the current language's token as a UTF-8 string (not Unicode).

Function:    CLogicExternalData::GetKeyValueBlock
Signature:   handle CLogicExternalData::GetKeyValueBlock()
Description: Gets the current external data block expressed in CScriptKeyValues.

Function:    CLogicExternalData::GetKeyValues
Signature:   handle CLogicExternalData::GetKeyValues()
Description: Gets the external data expressed in CScriptKeyValues.

Function:    CLogicExternalData::LoadFile
Signature:   void CLogicExternalData::LoadFile()
Description: Loads external data from the external file.

Function:    CLogicExternalData::SaveFile
Signature:   void CLogicExternalData::SaveFile()
Description: Saves the external data to the external file.

Function:    CLogicExternalData::SetKeyValueBlock
Signature:   void CLogicExternalData::SetKeyValueBlock(handle)
Description: Sets the current external data block from a CScriptKeyValues object.

Function:    CLogicExternalData::SetKeyValues
Signature:   void CLogicExternalData::SetKeyValues(handle)
Description: Sets the external data from a CScriptKeyValues object.

Function:    CMapbaseSystem::AddManifestFile
Signature:   void CMapbaseSystem::AddManifestFile(string)
Description: Loads a manifest file.

Function:    CMapbaseSystem::GetModName
Signature:   string CMapbaseSystem::GetModName()
Description: Gets the name of the mod. This is the name which shows up on Steam, RPC, etc.

Function:    CMapbaseSystem::IsCoreMapbase
Signature:   bool CMapbaseSystem::IsCoreMapbase()
Description: Indicates whether this is one of the original Mapbase mods or just a separate mod using its code.

Function:    CMapbaseSystem::LoadCustomActbusyFile
Signature:   void CMapbaseSystem::LoadCustomActbusyFile(string)
Description: Loads a custom actbusy file.

Function:    CMapbaseSystem::LoadCustomLocalizationFile
Signature:   void CMapbaseSystem::LoadCustomLocalizationFile(string)
Description: Loads a custom localization file.

Function:    CMapbaseSystem::LoadCustomSoundscriptFile
Signature:   void CMapbaseSystem::LoadCustomSoundscriptFile(string)
Description: Loads a custom soundscript file.

Function:    CMapbaseSystem::LoadCustomSurfacePropsFile
Signature:   void CMapbaseSystem::LoadCustomSurfacePropsFile(string)
Description: Loads a custom surface properties file.

Function:    CMapbaseSystem::LoadCustomTalkerFile
Signature:   void CMapbaseSystem::LoadCustomTalkerFile(string)
Description: Loads a custom talker file.

Function:    CNPC_Citizen::CanHeal
Signature:   bool CNPC_Citizen::CanHeal()
Description: Returns true if this citizen is a medic or ammo resupplier currently able to heal/give ammo.

Function:    CNPC_Citizen::GetCitizenType
Signature:   int CNPC_Citizen::GetCitizenType()
Description: Gets the citizen's type. 1 = Downtrodden, 2 = Refugee, 3 = Rebel, 4 = Unique

Function:    CNPC_Citizen::IsAmmoResupplier
Signature:   bool CNPC_Citizen::IsAmmoResupplier()
Description: Returns true if this citizen is an ammo resupplier.

Function:    CNPC_Citizen::IsMedic
Signature:   bool CNPC_Citizen::IsMedic()
Description: Returns true if this citizen is a medic.

Function:    CNPC_Citizen::SetCitizenType
Signature:   void CNPC_Citizen::SetCitizenType(int)
Description: Sets the citizen's type. 1 = Downtrodden, 2 = Refugee, 3 = Rebel, 4 = Unique

Function:    CNetMsg::GetNumBitsWritten
Signature:   int CNetMsg::GetNumBitsWritten()

Function:    CNetMsg::ReadAngle
Signature:   float CNetMsg::ReadAngle()

Function:    CNetMsg::ReadAngles
Signature:   Vector CNetMsg::ReadAngles()

Function:    CNetMsg::ReadBool
Signature:   bool CNetMsg::ReadBool()

Function:    CNetMsg::ReadByte
Signature:   int CNetMsg::ReadByte()

Function:    CNetMsg::ReadChar
Signature:   int CNetMsg::ReadChar()

Function:    CNetMsg::ReadCoord
Signature:   float CNetMsg::ReadCoord()

Function:    CNetMsg::ReadEHandle
Signature:   handle CNetMsg::ReadEHandle()

Function:    CNetMsg::ReadEntity
Signature:   handle CNetMsg::ReadEntity()

Function:    CNetMsg::ReadFloat
Signature:   float CNetMsg::ReadFloat()

Function:    CNetMsg::ReadInt
Signature:   int CNetMsg::ReadInt(int)

Function:    CNetMsg::ReadLong
Signature:   int CNetMsg::ReadLong()

Function:    CNetMsg::ReadNormal
Signature:   float CNetMsg::ReadNormal()

Function:    CNetMsg::ReadShort
Signature:   int CNetMsg::ReadShort()

Function:    CNetMsg::ReadString
Signature:   string CNetMsg::ReadString()

Function:    CNetMsg::ReadUInt
Signature:   int CNetMsg::ReadUInt(int)

Function:    CNetMsg::ReadVec3Coord
Signature:   Vector CNetMsg::ReadVec3Coord()

Function:    CNetMsg::ReadVec3Normal
Signature:   Vector CNetMsg::ReadVec3Normal()

Function:    CNetMsg::ReadWord
Signature:   int CNetMsg::ReadWord()

Function:    CNetMsg::Receive
Signature:   void CNetMsg::Receive(string, handle)
Description: Set custom network message callback

Function:    CNetMsg::Reset
Signature:   void CNetMsg::Reset()
Description: Reset the current network message buffer

Function:    CNetMsg::Send
Signature:   void CNetMsg::Send(handle, bool)
Description: Send a custom network message from the server to the client (max 252 bytes)

Function:    CNetMsg::SendEntityMessage
Signature:   void CNetMsg::SendEntityMessage(handle, bool)
Description: Send a message from a server side entity to its client side counterpart

Function:    CNetMsg::SendUserMessage
Signature:   void CNetMsg::SendUserMessage(handle, string, bool)
Description: Send a usermessage from the server to the client

Function:    CNetMsg::Start
Signature:   void CNetMsg::Start(string)
Description: Start writing new custom network message

Function:    CNetMsg::WriteAngle
Signature:   void CNetMsg::WriteAngle(float)
Description: 8 bit unsigned char

Function:    CNetMsg::WriteAngles
Signature:   void CNetMsg::WriteAngles(Vector)

Function:    CNetMsg::WriteBool
Signature:   void CNetMsg::WriteBool(bool)
Description: 1 bit

Function:    CNetMsg::WriteByte
Signature:   void CNetMsg::WriteByte(int)
Description: 8 bit unsigned char

Function:    CNetMsg::WriteChar
Signature:   void CNetMsg::WriteChar(int)
Description: 8 bit char

Function:    CNetMsg::WriteCoord
Signature:   void CNetMsg::WriteCoord(float)

Function:    CNetMsg::WriteEHandle
Signature:   void CNetMsg::WriteEHandle(handle)
Description: 32 bit long

Function:    CNetMsg::WriteEntity
Signature:   void CNetMsg::WriteEntity(handle)
Description: 11 bit (entindex)

Function:    CNetMsg::WriteFloat
Signature:   void CNetMsg::WriteFloat(float)
Description: 32 bit float

Function:    CNetMsg::WriteInt
Signature:   void CNetMsg::WriteInt(int, int)
Description: variable bit signed int

Function:    CNetMsg::WriteLong
Signature:   void CNetMsg::WriteLong(int)
Description: 32 bit long

Function:    CNetMsg::WriteNormal
Signature:   void CNetMsg::WriteNormal(float)
Description: 12 bit

Function:    CNetMsg::WriteShort
Signature:   void CNetMsg::WriteShort(int)
Description: 16 bit short

Function:    CNetMsg::WriteString
Signature:   void CNetMsg::WriteString(string)
Description: max 512 bytes at once

Function:    CNetMsg::WriteUInt
Signature:   void CNetMsg::WriteUInt(int, int)
Description: variable bit unsigned int

Function:    CNetMsg::WriteVec3Coord
Signature:   void CNetMsg::WriteVec3Coord(Vector)

Function:    CNetMsg::WriteVec3Normal
Signature:   void CNetMsg::WriteVec3Normal(Vector)
Description: 27 bit

Function:    CNetMsg::WriteWord
Signature:   void CNetMsg::WriteWord(int)
Description: 16 bit unsigned short

Function:    CNetPropManager::GetPropArraySize
Signature:   int CNetPropManager::GetPropArraySize(handle, string)
Description: Returns the size of an netprop array, or -1.

Function:    CNetPropManager::GetPropEntity
Signature:   handle CNetPropManager::GetPropEntity(handle, string)
Description: Reads an EHANDLE valued netprop (21 bit integer). Returns the script handle of the entity.

Function:    CNetPropManager::GetPropEntityArray
Signature:   handle CNetPropManager::GetPropEntityArray(handle, string, int)
Description: Reads an EHANDLE valued netprop (21 bit integer) from an array. Returns the script handle of the entity.

Function:    CNetPropManager::GetPropFloat
Signature:   float CNetPropManager::GetPropFloat(handle, string)
Description: Reads a float valued netprop.

Function:    CNetPropManager::GetPropFloatArray
Signature:   float CNetPropManager::GetPropFloatArray(handle, string, int)
Description: Reads a float valued netprop from an array.

Function:    CNetPropManager::GetPropInt
Signature:   int CNetPropManager::GetPropInt(handle, string)
Description: Reads an integer valued netprop.

Function:    CNetPropManager::GetPropIntArray
Signature:   int CNetPropManager::GetPropIntArray(handle, string, int)
Description: Reads an integer valued netprop from an array.

Function:    CNetPropManager::GetPropString
Signature:   string CNetPropManager::GetPropString(handle, string)
Description: Reads a string valued netprop.

Function:    CNetPropManager::GetPropStringArray
Signature:   string CNetPropManager::GetPropStringArray(handle, string, int)
Description: Reads a string valued netprop from an array.

Function:    CNetPropManager::GetPropType
Signature:   string CNetPropManager::GetPropType(handle, string)
Description: Returns the name of the netprop type as a string.

Function:    CNetPropManager::GetPropVector
Signature:   Vector CNetPropManager::GetPropVector(handle, string)
Description: Reads a 3D vector valued netprop.

Function:    CNetPropManager::GetPropVectorArray
Signature:   Vector CNetPropManager::GetPropVectorArray(handle, string, int)
Description: Reads a 3D vector valued netprop from an array.

Function:    CNetPropManager::HasProp
Signature:   bool CNetPropManager::HasProp(handle, string)
Description: Checks if a netprop exists.

Function:    CNetPropManager::SetPropEntity
Signature:   void CNetPropManager::SetPropEntity(handle, string, handle)
Description: Sets an EHANDLE valued netprop (21 bit integer) to reference the specified entity.

Function:    CNetPropManager::SetPropEntityArray
Signature:   handle CNetPropManager::SetPropEntityArray(handle, string, handle, int)
Description: Sets an EHANDLE valued netprop (21 bit integer) from an array to reference the specified entity.

Function:    CNetPropManager::SetPropFloat
Signature:   void CNetPropManager::SetPropFloat(handle, string, float)
Description: Sets a netprop to the specified float.

Function:    CNetPropManager::SetPropFloatArray
Signature:   void CNetPropManager::SetPropFloatArray(handle, string, float, int)
Description: Sets a netprop from an array to the specified float.

Function:    CNetPropManager::SetPropInt
Signature:   void CNetPropManager::SetPropInt(handle, string, int)
Description: Sets a netprop to the specified integer.

Function:    CNetPropManager::SetPropIntArray
Signature:   void CNetPropManager::SetPropIntArray(handle, string, int, int)
Description: Sets a netprop from an array to the specified integer.

Function:    CNetPropManager::SetPropString
Signature:   void CNetPropManager::SetPropString(handle, string, string)
Description: Sets a netprop to the specified string.

Function:    CNetPropManager::SetPropStringArray
Signature:   void CNetPropManager::SetPropStringArray(handle, string, string, int)
Description: Sets a netprop from an array to the specified string.

Function:    CNetPropManager::SetPropVector
Signature:   void CNetPropManager::SetPropVector(handle, string, Vector)
Description: Sets a netprop to the specified vector.

Function:    CNetPropManager::SetPropVectorArray
Signature:   void CNetPropManager::SetPropVectorArray(handle, string, Vector, int)
Description: Sets a netprop from an array to the specified vector.

Function:    CPointCommentaryNode::AbortPlaying
Signature:   void CPointCommentaryNode::AbortPlaying()
Description: Stops playing the node and snaps out of its camera control immediately. The game uses this function to shut down commentary while in the middle of playing a node, as it can't smoothly blend out (since the commentary entities need to be removed).

Function:    CPointCommentaryNode::CannotBeStopped
Signature:   bool CPointCommentaryNode::CannotBeStopped()

Function:    CPointCommentaryNode::GetCommentaryFile
Signature:   string CPointCommentaryNode::GetCommentaryFile()

Function:    CPointCommentaryNode::GetCommentaryType
Signature:   int CPointCommentaryNode::GetCommentaryType()

Function:    CPointCommentaryNode::GetFootnote
Signature:   string CPointCommentaryNode::GetFootnote()

Function:    CPointCommentaryNode::GetPrintName
Signature:   string CPointCommentaryNode::GetPrintName()

Function:    CPointCommentaryNode::GetSpeakers
Signature:   string CPointCommentaryNode::GetSpeakers()

Function:    CPointCommentaryNode::HasViewTarget
Signature:   bool CPointCommentaryNode::HasViewTarget()

Function:    CPointCommentaryNode::IsActive
Signature:   bool CPointCommentaryNode::IsActive()

Function:    CPointCommentaryNode::IsDisabled
Signature:   bool CPointCommentaryNode::IsDisabled()

Function:    CPointCommentaryNode::PreventsMovement
Signature:   bool CPointCommentaryNode::PreventsMovement()

Function:    CPointCommentaryNode::SetCommentaryFile
Signature:   void CPointCommentaryNode::SetCommentaryFile(string)

Function:    CPointCommentaryNode::SetCommentaryType
Signature:   void CPointCommentaryNode::SetCommentaryType(int)

Function:    CPointCommentaryNode::SetDisabled
Signature:   void CPointCommentaryNode::SetDisabled(bool)

Function:    CPointCommentaryNode::SetFootnote
Signature:   void CPointCommentaryNode::SetFootnote(string)

Function:    CPointCommentaryNode::SetPrintName
Signature:   void CPointCommentaryNode::SetPrintName(string)

Function:    CPointCommentaryNode::SetSpeakers
Signature:   void CPointCommentaryNode::SetSpeakers(string)

Function:    CPropVehicle::GetPhysics
Signature:   handle CPropVehicle::GetPhysics()
Description: Get a vehicle's physics.

Function:    CPropVehicle::GetVehicleType
Signature:   int CPropVehicle::GetVehicleType()
Description: Get a vehicle's type.

Function:    CPropVehicleDriveable::GetDriver
Signature:   handle CPropVehicleDriveable::GetDriver()
Description: Get a vehicle's driver, which could be either a player or a npc_vehicledriver.

Function:    CPropVehicleDriveable::IsEngineOn
Signature:   bool CPropVehicleDriveable::IsEngineOn()
Description: Check if the engine is on.

Function:    CPropVehicleDriveable::IsOverturned
Signature:   bool CPropVehicleDriveable::IsOverturned()
Description: Check if the vehicle is overturned.

Function:    CPropVehicleDriveable::IsVehicleBodyInWater
Signature:   bool CPropVehicleDriveable::IsVehicleBodyInWater()
Description: Check if the vehicle's body is submerged in water.

Function:    CPropVehicleDriveable::StartEngine
Signature:   void CPropVehicleDriveable::StartEngine()
Description: Start the engine.

Function:    CPropVehicleDriveable::StopEngine
Signature:   void CPropVehicleDriveable::StopEngine()
Description: Stop the engine.

Function:    CProtoSniper::FindFrustratedShot
Signature:   bool CProtoSniper::FindFrustratedShot(float)

Function:    CProtoSniper::GetBulletOrigin
Signature:   Vector CProtoSniper::GetBulletOrigin()

Function:    CProtoSniper::GetBulletSpeed
Signature:   float CProtoSniper::GetBulletSpeed()

Function:    CProtoSniper::GetPaintCursor
Signature:   Vector CProtoSniper::GetPaintCursor()
Description: Get the point the sniper is currently aiming at.

Function:    CProtoSniper::GetPositionParameter
Signature:   float CProtoSniper::GetPositionParameter(float, bool)

Function:    CProtoSniper::IsLaserOn
Signature:   bool CProtoSniper::IsLaserOn()

Function:    CProtoSniper::IsSweepingRandomly
Signature:   bool CProtoSniper::IsSweepingRandomly()

Function:    CProtoSniper::LaserOff
Signature:   void CProtoSniper::LaserOff()

Function:    CProtoSniper::LaserOn
Signature:   void CProtoSniper::LaserOn(Vector, Vector)

Function:    CProtoSniper::ScopeGlint
Signature:   void CProtoSniper::ScopeGlint()

Function:    CRagdollProp::GetRagdollObject
Signature:   handle CRagdollProp::GetRagdollObject(int)
Description: Gets the ragdoll object of the specified index.

Function:    CRagdollProp::GetRagdollObjectCount
Signature:   int CRagdollProp::GetRagdollObjectCount()
Description: Gets the number of ragdoll objects on this ragdoll.

Function:    CRagdollProp::GetSourceClassName
Signature:   string CRagdollProp::GetSourceClassName()
Description: Gets the ragdoll's source classname.

Function:    CRagdollProp::HasPhysgunInteraction
Signature:   bool CRagdollProp::HasPhysgunInteraction(string, string)
Description: Checks if the ragdoll has the specified interaction.

Function:    CRagdollProp::SetSourceClassName
Signature:   void CRagdollProp::SetSourceClassName(string)
Description: Sets the ragdoll's source classname.

Function:    CSceneEntity::AddBroadcastTeamTarget
Signature:   void CSceneEntity::AddBroadcastTeamTarget(int)
Description: Adds a team (by index) to the broadcast list

Function:    CSceneEntity::EstimateLength
Signature:   float CSceneEntity::EstimateLength()
Description: Returns length of this scene in seconds.

Function:    CSceneEntity::FindNamedEntity
Signature:   handle CSceneEntity::FindNamedEntity(string)
Description: given an entity reference, such as !target, get actual entity from scene object

Function:    CSceneEntity::IsPaused
Signature:   bool CSceneEntity::IsPaused()
Description: If this scene is currently paused.

Function:    CSceneEntity::IsPlayingBack
Signature:   bool CSceneEntity::IsPlayingBack()
Description: If this scene is currently playing.

Function:    CSceneEntity::LoadSceneFromString
Signature:   bool CSceneEntity::LoadSceneFromString(string, string)
Description: given a dummy scene name and a vcd string, load the scene

Function:    CSceneEntity::RemoveBroadcastTeamTarget
Signature:   void CSceneEntity::RemoveBroadcastTeamTarget(int)
Description: Removes a team (by index) from the broadcast list

Function:    CSceneListManager::GetScene
Signature:   handle CSceneListManager::GetScene(int)
Description: Gets the specified scene index from this manager.

Function:    CScriptKeyValues::FindKey
Signature:   handle CScriptKeyValues::FindKey(string)
Description: Given a KeyValues object and a key name, find a KeyValues object associated with the key name

Function:    CScriptKeyValues::FindOrCreateKey
Signature:   handle CScriptKeyValues::FindOrCreateKey(string)
Description: Given a KeyValues object and a key name, find or create a KeyValues object associated with the key name

Function:    CScriptKeyValues::GetBool
Signature:   bool CScriptKeyValues::GetBool()
Description: Given a KeyValues object, return its own associated bool value

Function:    CScriptKeyValues::GetFirstSubKey
Signature:   handle CScriptKeyValues::GetFirstSubKey()
Description: Given a KeyValues object, return the first sub key object

Function:    CScriptKeyValues::GetFloat
Signature:   float CScriptKeyValues::GetFloat()
Description: Given a KeyValues object, return its own associated float value

Function:    CScriptKeyValues::GetInt
Signature:   int CScriptKeyValues::GetInt()
Description: Given a KeyValues object, return its own associated integer value

Function:    CScriptKeyValues::GetKeyBool
Signature:   bool CScriptKeyValues::GetKeyBool(string)
Description: Given a KeyValues object and a key name, return associated bool value

Function:    CScriptKeyValues::GetKeyFloat
Signature:   float CScriptKeyValues::GetKeyFloat(string)
Description: Given a KeyValues object and a key name, return associated float value

Function:    CScriptKeyValues::GetKeyInt
Signature:   int CScriptKeyValues::GetKeyInt(string)
Description: Given a KeyValues object and a key name, return associated integer value

Function:    CScriptKeyValues::GetKeyString
Signature:   string CScriptKeyValues::GetKeyString(string)
Description: Given a KeyValues object and a key name, return associated string value

Function:    CScriptKeyValues::GetName
Signature:   string CScriptKeyValues::GetName()
Description: Given a KeyValues object, return its name

Function:    CScriptKeyValues::GetNextKey
Signature:   handle CScriptKeyValues::GetNextKey()
Description: Given a KeyValues object, return the next key object in a sub key group

Function:    CScriptKeyValues::GetString
Signature:   string CScriptKeyValues::GetString()
Description: Given a KeyValues object, return its own associated string value

Function:    CScriptKeyValues::IsKeyEmpty
Signature:   bool CScriptKeyValues::IsKeyEmpty(string)
Description: Given a KeyValues object and a key name, return true if key name has no value

Function:    CScriptKeyValues::ReleaseKeyValues
Signature:   void CScriptKeyValues::ReleaseKeyValues()
Description: Given a root KeyValues object, release its contents

Function:    CScriptKeyValues::SetBool
Signature:   void CScriptKeyValues::SetBool(bool)
Description: Given a KeyValues object, set its own associated bool value

Function:    CScriptKeyValues::SetFloat
Signature:   void CScriptKeyValues::SetFloat(float)
Description: Given a KeyValues object, set its own associated float value

Function:    CScriptKeyValues::SetInt
Signature:   void CScriptKeyValues::SetInt(int)
Description: Given a KeyValues object, set its own associated integer value

Function:    CScriptKeyValues::SetKeyBool
Signature:   void CScriptKeyValues::SetKeyBool(string, bool)
Description: Given a KeyValues object and a key name, set associated bool value

Function:    CScriptKeyValues::SetKeyFloat
Signature:   void CScriptKeyValues::SetKeyFloat(string, float)
Description: Given a KeyValues object and a key name, set associated float value

Function:    CScriptKeyValues::SetKeyInt
Signature:   void CScriptKeyValues::SetKeyInt(string, int)
Description: Given a KeyValues object and a key name, set associated integer value

Function:    CScriptKeyValues::SetKeyString
Signature:   void CScriptKeyValues::SetKeyString(string, string)
Description: Given a KeyValues object and a key name, set associated string value

Function:    CScriptKeyValues::SetName
Signature:   void CScriptKeyValues::SetName(string)
Description: Given a KeyValues object, set its name

Function:    CScriptKeyValues::SetString
Signature:   void CScriptKeyValues::SetString(string)
Description: Given a KeyValues object, set its own associated string value

Function:    CScriptKeyValues::SubKeysToTable
Signature:   void CScriptKeyValues::SubKeysToTable(handle)
Description: Converts to script table.

Function:    CScriptKeyValues::TableToSubKeys
Signature:   void CScriptKeyValues::TableToSubKeys(handle)
Description: Converts a script table to KeyValues.

Function:    CSound::DoesSoundExpire
Signature:   bool CSound::DoesSoundExpire()
Description: Returns true if the sound expires.

Function:    CSound::GetOwner
Signature:   handle CSound::GetOwner()
Description: Gets the sound's owner.

Function:    CSound::GetSoundOrigin
Signature:   Vector CSound::GetSoundOrigin()
Description: Gets the sound's origin.

Function:    CSound::GetSoundReactOrigin
Signature:   Vector CSound::GetSoundReactOrigin()
Description: Gets the sound's react origin.

Function:    CSound::GetTarget
Signature:   handle CSound::GetTarget()
Description: Gets the sound's target.

Function:    CSound::IsScent
Signature:   bool CSound::IsScent()
Description: Returns true if this is a type of scent (as opposed to a sound).

Function:    CSound::IsSound
Signature:   bool CSound::IsSound()
Description: Returns true if this is a type of sound (as opposed to a scent).

Function:    CSound::IsSoundType
Signature:   bool CSound::IsSoundType(int)
Description: Returns true if the sound type is the specified type.

Function:    CSound::OccludedVolume
Signature:   float CSound::OccludedVolume()
Description: Gets the sound's occluded volume.

Function:    CSound::Reset
Signature:   void CSound::Reset()
Description: Clears the volume, type, and origin for the sound without actually removing it.

Function:    CSound::SetSoundOrigin
Signature:   void CSound::SetSoundOrigin(Vector)
Description: Sets the sound's origin.

Function:    CSound::SoundChannel
Signature:   int CSound::SoundChannel()
Description: Gets the sound's channel.

Function:    CSound::SoundContext
Signature:   int CSound::SoundContext()
Description: Gets the sound type with contexts only.

Function:    CSound::SoundExpirationTime
Signature:   float CSound::SoundExpirationTime()
Description: Gets the sound's expiration time.

Function:    CSound::SoundType
Signature:   int CSound::SoundType()
Description: Gets the raw sound type.

Function:    CSound::SoundTypeNoContext
Signature:   int CSound::SoundTypeNoContext()
Description: Gets the sound type with contexts excluded.

Function:    CSound::ValidateOwner
Signature:   bool CSound::ValidateOwner()
Description: Returns true if the sound's owner is still valid or if the sound never had an owner in the first place.

Function:    CSound::Volume
Signature:   int CSound::Volume()
Description: Gets the sound's volume.

Function:    CTakeDamageInfo::AddDamage
Signature:   void CTakeDamageInfo::AddDamage(float)
Description: Adds to the damage.

Function:    CTakeDamageInfo::AddDamageType
Signature:   void CTakeDamageInfo::AddDamageType(int)
Description: Adds to the damage type.

Function:    CTakeDamageInfo::BaseDamageIsValid
Signature:   bool CTakeDamageInfo::BaseDamageIsValid()
Description: Checks if the base damage is valid.

Function:    CTakeDamageInfo::GetAmmoName
Signature:   string CTakeDamageInfo::GetAmmoName()
Description: Gets the ammo type name.

Function:    CTakeDamageInfo::GetAmmoType
Signature:   int CTakeDamageInfo::GetAmmoType()
Description: Gets the ammo type.

Function:    CTakeDamageInfo::GetAttacker
Signature:   handle CTakeDamageInfo::GetAttacker()
Description: Gets the attacker.

Function:    CTakeDamageInfo::GetBaseDamage
Signature:   float CTakeDamageInfo::GetBaseDamage()
Description: Gets the base damage.

Function:    CTakeDamageInfo::GetDamage
Signature:   float CTakeDamageInfo::GetDamage()
Description: Gets the damage.

Function:    CTakeDamageInfo::GetDamageBonus
Signature:   float CTakeDamageInfo::GetDamageBonus()
Description: Gets the damage bonus.

Function:    CTakeDamageInfo::GetDamageCustom
Signature:   int CTakeDamageInfo::GetDamageCustom()
Description: Gets the damage custom.

Function:    CTakeDamageInfo::GetDamageForce
Signature:   Vector CTakeDamageInfo::GetDamageForce()
Description: Gets the damage force.

Function:    CTakeDamageInfo::GetDamagePosition
Signature:   Vector CTakeDamageInfo::GetDamagePosition()
Description: Gets the damage position.

Function:    CTakeDamageInfo::GetDamageStats
Signature:   int CTakeDamageInfo::GetDamageStats()
Description: Gets the damage stats.

Function:    CTakeDamageInfo::GetDamageType
Signature:   int CTakeDamageInfo::GetDamageType()
Description: Gets the damage type.

Function:    CTakeDamageInfo::GetDamagedOtherPlayers
Signature:   int CTakeDamageInfo::GetDamagedOtherPlayers()
Description: Gets whether other players have been damaged.

Function:    CTakeDamageInfo::GetInflictor
Signature:   handle CTakeDamageInfo::GetInflictor()
Description: Gets the inflictor.

Function:    CTakeDamageInfo::GetMaxDamage
Signature:   float CTakeDamageInfo::GetMaxDamage()
Description: Gets the max damage.

Function:    CTakeDamageInfo::GetPlayerPenetrationCount
Signature:   int CTakeDamageInfo::GetPlayerPenetrationCount()
Description: Gets the player penetration count.

Function:    CTakeDamageInfo::GetReportedPosition
Signature:   Vector CTakeDamageInfo::GetReportedPosition()
Description: Gets the reported damage position.

Function:    CTakeDamageInfo::GetWeapon
Signature:   handle CTakeDamageInfo::GetWeapon()
Description: Gets the weapon.

Function:    CTakeDamageInfo::IsForceFriendlyFire
Signature:   bool CTakeDamageInfo::IsForceFriendlyFire()
Description: Gets force friendly fire.

Function:    CTakeDamageInfo::ScaleDamage
Signature:   void CTakeDamageInfo::ScaleDamage(float)
Description: Scales the damage.

Function:    CTakeDamageInfo::ScaleDamageForce
Signature:   void CTakeDamageInfo::ScaleDamageForce(float)
Description: Scales the damage force.

Function:    CTakeDamageInfo::SetAmmoType
Signature:   void CTakeDamageInfo::SetAmmoType(int)
Description: Sets the ammo type.

Function:    CTakeDamageInfo::SetAttacker
Signature:   void CTakeDamageInfo::SetAttacker(handle)
Description: Sets the attacker.

Function:    CTakeDamageInfo::SetDamage
Signature:   void CTakeDamageInfo::SetDamage(float)
Description: Sets the damage.

Function:    CTakeDamageInfo::SetDamageBonus
Signature:   void CTakeDamageInfo::SetDamageBonus(float)
Description: Sets the damage bonus.

Function:    CTakeDamageInfo::SetDamageCustom
Signature:   void CTakeDamageInfo::SetDamageCustom(int)
Description: Sets the damage custom.

Function:    CTakeDamageInfo::SetDamageForce
Signature:   void CTakeDamageInfo::SetDamageForce(Vector)
Description: Sets the damage force.

Function:    CTakeDamageInfo::SetDamagePosition
Signature:   void CTakeDamageInfo::SetDamagePosition(Vector)
Description: Sets the damage position.

Function:    CTakeDamageInfo::SetDamageStats
Signature:   void CTakeDamageInfo::SetDamageStats(int)
Description: Sets the damage stats.

Function:    CTakeDamageInfo::SetDamageType
Signature:   void CTakeDamageInfo::SetDamageType(int)
Description: Sets the damage type.

Function:    CTakeDamageInfo::SetDamagedOtherPlayers
Signature:   void CTakeDamageInfo::SetDamagedOtherPlayers(int)
Description: Sets whether other players have been damaged.

Function:    CTakeDamageInfo::SetForceFriendlyFire
Signature:   void CTakeDamageInfo::SetForceFriendlyFire(bool)
Description: Sets force friendly fire.

Function:    CTakeDamageInfo::SetInflictor
Signature:   void CTakeDamageInfo::SetInflictor(handle)
Description: Sets the inflictor.

Function:    CTakeDamageInfo::SetMaxDamage
Signature:   void CTakeDamageInfo::SetMaxDamage(float)
Description: Sets the max damage.

Function:    CTakeDamageInfo::SetPlayerPenetrationCount
Signature:   void CTakeDamageInfo::SetPlayerPenetrationCount(int)
Description: Sets the player penetration count.

Function:    CTakeDamageInfo::SetReportedPosition
Signature:   void CTakeDamageInfo::SetReportedPosition(Vector)
Description: Sets the reported damage position.

Function:    CTakeDamageInfo::SetWeapon
Signature:   void CTakeDamageInfo::SetWeapon(handle)
Description: Sets the weapon.

Function:    CTakeDamageInfo::SubtractDamage
Signature:   void CTakeDamageInfo::SubtractDamage(float)
Description: Removes from the damage.

Function:    CTriggerCamera::GetFov
Signature:   int CTriggerCamera::GetFov()
Description: get camera's current fov setting as integer

Function:    CTriggerCamera::SetFov
Signature:   void CTriggerCamera::SetFov(int, float)
Description: set camera's current fov in integer degrees and fov change rate as float

Function:    CUserCmd::GetButtons
Signature:   int CUserCmd::GetButtons()
Description: Input button state.

Function:    CUserCmd::GetCommandNumber
Signature:   int CUserCmd::GetCommandNumber()
Description: For matching server and client commands for debugging.

Function:    CUserCmd::GetForwardMove
Signature:   float CUserCmd::GetForwardMove()

Function:    CUserCmd::GetImpulse
Signature:   int CUserCmd::GetImpulse()
Description: Impulse command issued.

Function:    CUserCmd::GetMouseX
Signature:   int CUserCmd::GetMouseX()
Description: Mouse accum in x from create move.

Function:    CUserCmd::GetMouseY
Signature:   int CUserCmd::GetMouseY()
Description: Mouse accum in y from create move.

Function:    CUserCmd::GetRandomSeed
Signature:   int CUserCmd::GetRandomSeed()
Description: For shared random functions.

Function:    CUserCmd::GetSideMove
Signature:   float CUserCmd::GetSideMove()

Function:    CUserCmd::GetTickCount
Signature:   int CUserCmd::GetTickCount()
Description: The tick the client created this command.

Function:    CUserCmd::GetUpMove
Signature:   float CUserCmd::GetUpMove()

Function:    CUserCmd::GetViewAngles
Signature:   Vector CUserCmd::GetViewAngles()
Description: Player instantaneous view angles.

Function:    CUserCmd::GetWeaponSelect
Signature:   int CUserCmd::GetWeaponSelect()
Description: Current weapon id.

Function:    CUserCmd::GetWeaponSubtype
Signature:   int CUserCmd::GetWeaponSubtype()
Description: Current weapon subtype id.

Function:    CUserCmd::SetButtons
Signature:   void CUserCmd::SetButtons(int)
Description: Sets input button state.

Function:    CUserCmd::SetForwardMove
Signature:   void CUserCmd::SetForwardMove(float)

Function:    CUserCmd::SetImpulse
Signature:   void CUserCmd::SetImpulse(int)
Description: Sets impulse command issued.

Function:    CUserCmd::SetMouseX
Signature:   void CUserCmd::SetMouseX(int)
Description: Sets mouse accum in x from create move.

Function:    CUserCmd::SetMouseY
Signature:   void CUserCmd::SetMouseY(int)
Description: Sets mouse accum in y from create move.

Function:    CUserCmd::SetSideMove
Signature:   void CUserCmd::SetSideMove(float)

Function:    CUserCmd::SetUpMove
Signature:   void CUserCmd::SetUpMove(float)

Function:    CUserCmd::SetViewAngles
Signature:   void CUserCmd::SetViewAngles(Vector)
Description: Sets player instantaneous view angles.

Function:    CUserCmd::SetWeaponSelect
Signature:   void CUserCmd::SetWeaponSelect(int)
Description: Sets current weapon id.

Function:    CUserCmd::SetWeaponSubtype
Signature:   void CUserCmd::SetWeaponSubtype(int)
Description: Sets current weapon subtype id.

Function:    CalcClosestPointOnAABB
Signature:   Vector CalcClosestPointOnAABB(Vector, Vector, Vector)
Description: Returns the closest point on a bounding box.

Function:    CalcClosestPointOnLine
Signature:   Vector CalcClosestPointOnLine(Vector, Vector, Vector)
Description: Returns the closest point on a line.

Function:    CalcClosestPointOnLineSegment
Signature:   Vector CalcClosestPointOnLineSegment(Vector, Vector, Vector)
Description: Returns the closest point on a line segment.

Function:    CalcDistanceToLine
Signature:   float CalcDistanceToLine(Vector, Vector, Vector)
Description: Returns the distance to a line.

Function:    CalcDistanceToLineSegment
Signature:   float CalcDistanceToLineSegment(Vector, Vector, Vector)
Description: Returns the distance to a line segment.

Function:    CalcSqrDistanceToAABB
Signature:   float CalcSqrDistanceToAABB(Vector, Vector, Vector)
Description: Returns the squared distance to a bounding box.

Function:    CalculateBulletDamageForce
Signature:   void CalculateBulletDamageForce(handle, int, Vector, Vector, float)
Description: Fill out a damage info handle with a damage force for a bullet impact.

Function:    CalculateExplosiveDamageForce
Signature:   void CalculateExplosiveDamageForce(handle, Vector, Vector, float)
Description: Fill out a damage info handle with a damage force for an explosive.

Function:    CalculateMeleeDamageForce
Signature:   void CalculateMeleeDamageForce(handle, Vector, Vector, float)
Description: Fill out a damage info handle with a damage force for a melee impact.

Function:    CancelEntityIOEvent
Signature:   bool CancelEntityIOEvent(int)
Description: Remove entity I/O event.

Function:    ClearSavedTable
Signature:   void ClearSavedTable(string)
Description: Removes the table with the given context.

Function:    Color::GetRawColor
Signature:   int Color::GetRawColor()
Description: Gets the raw color integer.

Function:    Color::SetColor
Signature:   void Color::SetColor(int, int, int, int)
Description: Sets the color.

Function:    Color::SetRawColor
Signature:   void Color::SetRawColor(int)
Description: Sets the raw color integer.

Function:    ConcatTransforms
Signature:   void ConcatTransforms(handle, handle, handle)
Description: Concatenates two transformation matrices into another matrix.

Function:    CreateDamageInfo
Signature:   handle CreateDamageInfo(handle, handle, Vector, Vector, float, int)

Function:    CreateFireBulletsInfo
Signature:   handle CreateFireBulletsInfo(int, Vector, Vector, Vector, float, handle)

Function:    CreateProp
Signature:   handle CreateProp(string, Vector, string, int)
Description: Create a physics prop

Function:    CreateRope
Signature:   handle CreateRope(handle, handle, int, int, float, string, int, int)
Description: Creates a single rope between two entities. Can optionally follow specific attachments.

Function:    CreateRopeWithSecondPointDetached
Signature:   handle CreateRopeWithSecondPointDetached(handle, int, int, float, string, int, bool, int)
Description: Creates a single detached rope hanging from a point. Can optionally follow a specific start attachment.

Function:    CreateSceneEntity
Signature:   handle CreateSceneEntity(string)
Description: Create a scene entity to play the specified scene.

Function:    DecalTrace
Signature:   void DecalTrace(handle, string)
Description: Creates a dynamic decal based on the given trace info. The trace information can be generated by TraceLineComplex() and the decal name must be from decals_subrect.txt.

Function:    DestroyDamageInfo
Signature:   void DestroyDamageInfo(handle)

Function:    DestroyFireBulletsInfo
Signature:   void DestroyFireBulletsInfo(handle)

Function:    DispatchParticleEffect
Signature:   function DispatchParticleEffect(particleName, origin, angles, entity)
Description: Dispatches a one-off particle system

Function:    DispatchSpawn
Signature:   void DispatchSpawn(handle)
Description: Spawns an unspawned entity.

Function:    DoIncludeScript
Signature:   bool DoIncludeScript(string, handle)
Description: Execute a script (internal)

Function:    EmitSoundOn
Signature:   void EmitSoundOn(string, handle)
Description: Play named sound on an entity.

Function:    EmitSoundOnClient
Signature:   void EmitSoundOnClient(string, handle, handle)
Description: Play named sound only on the client for the specified player.

Function:    EmitSoundParamsOn
Signature:   void EmitSoundParamsOn(handle, handle)
Description: Play EmitSound_t params on an entity.

Function:    EmitSound_t::ClearOrigin
Signature:   void EmitSound_t::ClearOrigin()
Description: Clears the sound's origin override if it has one.

Function:    EmitSound_t::GetChannel
Signature:   int EmitSound_t::GetChannel()

Function:    EmitSound_t::GetEmitCloseCaption
Signature:   float EmitSound_t::GetEmitCloseCaption()
Description: Gets whether or not the sound will emit closed captioning/subtitles.

Function:    EmitSound_t::GetFlags
Signature:   int EmitSound_t::GetFlags()
Description: Gets the sound's flags. See the 'SND_' set of constants.

Function:    EmitSound_t::GetOrigin
Signature:   Vector EmitSound_t::GetOrigin()
Description: Gets the sound's origin override.

Function:    EmitSound_t::GetSoundLevel
Signature:   int EmitSound_t::GetSoundLevel()
Description: Gets the sound's level in decibels. (Note that this may not apply to soundscripts)

Function:    EmitSound_t::GetSoundName
Signature:   string EmitSound_t::GetSoundName()
Description: Gets the sound's file path or soundscript name.

Function:    EmitSound_t::GetSoundScriptHandle
Signature:   int EmitSound_t::GetSoundScriptHandle()

Function:    EmitSound_t::GetSoundTime
Signature:   float EmitSound_t::GetSoundTime()
Description: Gets the time the sound will begin, relative to Time().

Function:    EmitSound_t::GetSpeakerEntity
Signature:   int EmitSound_t::GetSpeakerEntity()
Description: Gets the sound's original source if it is being transmitted by a microphone.

Function:    EmitSound_t::GetSpecialDSP
Signature:   int EmitSound_t::GetSpecialDSP()

Function:    EmitSound_t::GetVolume
Signature:   float EmitSound_t::GetVolume()
Description: (Note that this may not apply to soundscripts)

Function:    EmitSound_t::GetWarnOnDirectWaveReference
Signature:   float EmitSound_t::GetWarnOnDirectWaveReference()
Description: Gets whether or not the sound will send a message to the console if it references a direct sound file instead of a soundscript.

Function:    EmitSound_t::GetWarnOnMissingCloseCaption
Signature:   float EmitSound_t::GetWarnOnMissingCloseCaption()
Description: Gets whether or not the sound will send a message to the console if there is no corresponding closed captioning token.

Function:    EmitSound_t::HasOrigin
Signature:   bool EmitSound_t::HasOrigin()
Description: Returns true if the sound has an origin override.

Function:    EmitSound_t::SetChannel
Signature:   void EmitSound_t::SetChannel(int)

Function:    EmitSound_t::SetEmitCloseCaption
Signature:   void EmitSound_t::SetEmitCloseCaption(bool)
Description: Sets whether or not the sound will emit closed captioning/subtitles.

Function:    EmitSound_t::SetFlags
Signature:   void EmitSound_t::SetFlags(int)
Description: Sets the sound's flags. See the 'SND_' set of constants.

Function:    EmitSound_t::SetOrigin
Signature:   void EmitSound_t::SetOrigin(Vector)
Description: Sets the sound's origin override.

Function:    EmitSound_t::SetSoundLevel
Signature:   void EmitSound_t::SetSoundLevel(int)
Description: Sets the sound's level in decibels. (Note that this may not apply to soundscripts)

Function:    EmitSound_t::SetSoundName
Signature:   void EmitSound_t::SetSoundName(string)
Description: Sets the sound's file path or soundscript name.

Function:    EmitSound_t::SetSoundScriptHandle
Signature:   void EmitSound_t::SetSoundScriptHandle(int)

Function:    EmitSound_t::SetSoundTime
Signature:   void EmitSound_t::SetSoundTime(float)
Description: Sets the time the sound will begin, relative to Time().

Function:    EmitSound_t::SetSpeakerEntity
Signature:   void EmitSound_t::SetSpeakerEntity(int)
Description: Sets the sound's original source if it is being transmitted by a microphone.

Function:    EmitSound_t::SetSpecialDSP
Signature:   void EmitSound_t::SetSpecialDSP(int)

Function:    EmitSound_t::SetVolume
Signature:   void EmitSound_t::SetVolume(float)
Description: (Note that this may not apply to soundscripts)

Function:    EmitSound_t::SetWarnOnDirectWaveReference
Signature:   void EmitSound_t::SetWarnOnDirectWaveReference(bool)
Description: Sets whether or not the sound will send a message to the console if it references a direct sound file instead of a soundscript.

Function:    EmitSound_t::SetWarnOnMissingCloseCaption
Signature:   void EmitSound_t::SetWarnOnMissingCloseCaption(bool)
Description: Sets whether or not the sound will send a message to the console if there is no corresponding closed captioning token.

Function:    EntFire
Signature:   function EntFire(target, action, value, delay, activator, caller)
Description: Generate an entity i/o event

Function:    EntFireByHandle
Signature:   function EntFireByHandle(target, action, value, delay, activator, caller)
Description: Generate an entity i/o event. First parameter is an entity instance.

Function:    EntIndexToHScript
Signature:   handle EntIndexToHScript(int)
Description: Returns the script handle for the given entity index.

Function:    EntitiesAtPoint
Signature:   void EntitiesAtPoint(handle, int, Vector, int)
Description: Gets all entities which are intersecting a point in space. This function copies them to an array with a maximum number of elements.

Function:    EntitiesInBox
Signature:   void EntitiesInBox(handle, int, Vector, Vector, int)
Description: Gets all entities which are within a worldspace box. This function copies them to an array with a maximum number of elements.

Function:    EntitiesInSphere
Signature:   void EntitiesInSphere(handle, int, Vector, float, int)
Description: Gets all entities which are within a sphere. This function copies them to an array with a maximum number of elements.

Function:    ExponentialDecay
Signature:   float ExponentialDecay(float, float, float)
Description: decayTo is factor the value should decay to in decayTime

Function:    FLerp
Signature:   float FLerp(float, float, float, float, float)

Function:    FileExists
Signature:   bool FileExists(string)
Description: Returns true if the file exists.

Function:    FileToKeyValues
Signature:   handle FileToKeyValues(string)
Description: Returns the CScriptKeyValues from the file, null if no file or file is too big.

Function:    FileToString
Signature:   string FileToString(string)
Description: Returns the string from the file, null if no file or file is too big.

Function:    FireBulletsInfo_t::GetAdditionalIgnoreEnt
Signature:   handle FireBulletsInfo_t::GetAdditionalIgnoreEnt()

Function:    FireBulletsInfo_t::GetAmmoType
Signature:   int FireBulletsInfo_t::GetAmmoType()

Function:    FireBulletsInfo_t::GetAttacker
Signature:   handle FireBulletsInfo_t::GetAttacker()

Function:    FireBulletsInfo_t::GetDamage
Signature:   float FireBulletsInfo_t::GetDamage()
Description: Gets the damage the bullets should deal. 0 = use ammo type

Function:    FireBulletsInfo_t::GetDamageForceScale
Signature:   float FireBulletsInfo_t::GetDamageForceScale()

Function:    FireBulletsInfo_t::GetDirShooting
Signature:   Vector FireBulletsInfo_t::GetDirShooting()

Function:    FireBulletsInfo_t::GetDistance
Signature:   float FireBulletsInfo_t::GetDistance()
Description: Gets the distance the bullets should travel.

Function:    FireBulletsInfo_t::GetFlags
Signature:   int FireBulletsInfo_t::GetFlags()
Description: Gets the flags the bullets should use.

Function:    FireBulletsInfo_t::GetPlayerDamage
Signature:   int FireBulletsInfo_t::GetPlayerDamage()
Description: Gets the damage the bullets should deal when hitting the player. 0 = use regular damage

Function:    FireBulletsInfo_t::GetPrimaryAttack
Signature:   bool FireBulletsInfo_t::GetPrimaryAttack()
Description: Gets whether the bullets came from a primary attack.

Function:    FireBulletsInfo_t::GetShots
Signature:   int FireBulletsInfo_t::GetShots()
Description: Gets the number of shots which should be fired.

Function:    FireBulletsInfo_t::GetSource
Signature:   Vector FireBulletsInfo_t::GetSource()

Function:    FireBulletsInfo_t::GetSpread
Signature:   Vector FireBulletsInfo_t::GetSpread()

Function:    FireBulletsInfo_t::GetTracerFreq
Signature:   int FireBulletsInfo_t::GetTracerFreq()

Function:    FireBulletsInfo_t::SetAdditionalIgnoreEnt
Signature:   void FireBulletsInfo_t::SetAdditionalIgnoreEnt(handle)

Function:    FireBulletsInfo_t::SetAmmoType
Signature:   void FireBulletsInfo_t::SetAmmoType(int)

Function:    FireBulletsInfo_t::SetAttacker
Signature:   void FireBulletsInfo_t::SetAttacker(handle)

Function:    FireBulletsInfo_t::SetDamage
Signature:   void FireBulletsInfo_t::SetDamage(float)
Description: Sets the damage the bullets should deal. 0 = use ammo type

Function:    FireBulletsInfo_t::SetDamageForceScale
Signature:   void FireBulletsInfo_t::SetDamageForceScale(float)

Function:    FireBulletsInfo_t::SetDirShooting
Signature:   void FireBulletsInfo_t::SetDirShooting(Vector)

Function:    FireBulletsInfo_t::SetDistance
Signature:   void FireBulletsInfo_t::SetDistance(float)
Description: Sets the distance the bullets should travel.

Function:    FireBulletsInfo_t::SetFlags
Signature:   void FireBulletsInfo_t::SetFlags(float)
Description: Sets the flags the bullets should use.

Function:    FireBulletsInfo_t::SetPlayerDamage
Signature:   void FireBulletsInfo_t::SetPlayerDamage(float)
Description: Sets the damage the bullets should deal when hitting the player. 0 = use regular damage

Function:    FireBulletsInfo_t::SetPrimaryAttack
Signature:   void FireBulletsInfo_t::SetPrimaryAttack(bool)
Description: Sets whether the bullets came from a primary attack.

Function:    FireBulletsInfo_t::SetShots
Signature:   void FireBulletsInfo_t::SetShots(int)
Description: Sets the number of shots which should be fired.

Function:    FireBulletsInfo_t::SetSource
Signature:   void FireBulletsInfo_t::SetSource(Vector)

Function:    FireBulletsInfo_t::SetSpread
Signature:   void FireBulletsInfo_t::SetSpread(Vector)

Function:    FireBulletsInfo_t::SetTracerFreq
Signature:   void FireBulletsInfo_t::SetTracerFreq(int)

Function:    FireGameEvent
Signature:   void FireGameEvent(string, handle)
Description: Fire a game event.

Function:    FireGameEventLocal
Signature:   void FireGameEventLocal(string, handle)
Description: Fire a game event without broadcasting to the client.

Function:    FrameTime
Signature:   float FrameTime()
Description: Get the time spent on the server in the last frame

Function:    FreeMatrixInstance
Signature:   void FreeMatrixInstance(handle)
Description: Frees an allocated matrix instance.

Function:    FreeQuaternionInstance
Signature:   void FreeQuaternionInstance(handle)
Description: Frees an allocated quaternion instance.

Function:    Gain
Signature:   float Gain(float, float)
Description: Gain is similar to Bias, but biasAmt biases towards or away from 0.5.

Function:    GameOver
Signature:   handle GameOver(string, float, float, float, int, int, int)
Description: Ends the game and reloads the last save.

Function:    GetActivityName
Signature:   string GetActivityName(int)
Description: Gets the name of the specified activity index.

Function:    GetCPUUsage
Signature:   float GetCPUUsage()
Description: Get CPU usage percentage.

Function:    GetEntityIOEventTimeLeft
Signature:   float GetEntityIOEventTimeLeft(int)
Description: Get time left on entity I/O event.

Function:    GetFrameCount
Signature:   int GetFrameCount()
Description: Absolute frame counter

Function:    GetLoadType
Signature:   int GetLoadType()
Description: Get the way the current game was loaded (corresponds to the MapLoad enum)

Function:    GetMapName
Signature:   string GetMapName()
Description: Get the name of the map.

Function:    GetPhysAngVelocity
Signature:   Vector GetPhysAngVelocity(handle)
Description: Gets physics angular velocity for the given VPhysics object

Function:    GetPhysVelocity
Signature:   Vector GetPhysVelocity(handle)
Description: Gets physics velocity for the given VPhysics object

Function:    GuessDamageForce
Signature:   void GuessDamageForce(handle, Vector, Vector, float)
Description: Try and guess the physics force to use.

Function:    IPhysicsObject::ApplyForceCenter
Signature:   void IPhysicsObject::ApplyForceCenter(Vector)

Function:    IPhysicsObject::ApplyForceOffset
Signature:   void IPhysicsObject::ApplyForceOffset(Vector, Vector)

Function:    IPhysicsObject::ApplyTorqueCenter
Signature:   void IPhysicsObject::ApplyTorqueCenter(Vector)

Function:    IPhysicsObject::EnableCollisions
Signature:   void IPhysicsObject::EnableCollisions(bool)

Function:    IPhysicsObject::EnableDrag
Signature:   void IPhysicsObject::EnableDrag(bool)

Function:    IPhysicsObject::EnableGravity
Signature:   void IPhysicsObject::EnableGravity(bool)

Function:    IPhysicsObject::EnableMotion
Signature:   void IPhysicsObject::EnableMotion(bool)

Function:    IPhysicsObject::GetInertia
Signature:   Vector IPhysicsObject::GetInertia()

Function:    IPhysicsObject::GetInvInertia
Signature:   Vector IPhysicsObject::GetInvInertia()

Function:    IPhysicsObject::GetInvMass
Signature:   float IPhysicsObject::GetInvMass()

Function:    IPhysicsObject::GetMass
Signature:   float IPhysicsObject::GetMass()

Function:    IPhysicsObject::GetName
Signature:   string IPhysicsObject::GetName()

Function:    IPhysicsObject::IsAsleep
Signature:   bool IPhysicsObject::IsAsleep()

Function:    IPhysicsObject::IsAttachedToConstraint
Signature:   bool IPhysicsObject::IsAttachedToConstraint(bool)

Function:    IPhysicsObject::IsCollisionEnabled
Signature:   bool IPhysicsObject::IsCollisionEnabled()

Function:    IPhysicsObject::IsDragEnabled
Signature:   bool IPhysicsObject::IsDragEnabled()

Function:    IPhysicsObject::IsFluid
Signature:   bool IPhysicsObject::IsFluid()

Function:    IPhysicsObject::IsGravityEnabled
Signature:   bool IPhysicsObject::IsGravityEnabled()

Function:    IPhysicsObject::IsHinged
Signature:   bool IPhysicsObject::IsHinged()

Function:    IPhysicsObject::IsMotionEnabled
Signature:   bool IPhysicsObject::IsMotionEnabled()

Function:    IPhysicsObject::IsMoveable
Signature:   bool IPhysicsObject::IsMoveable()

Function:    IPhysicsObject::IsStatic
Signature:   bool IPhysicsObject::IsStatic()

Function:    IPhysicsObject::IsTrigger
Signature:   bool IPhysicsObject::IsTrigger()

Function:    IPhysicsObject::SetInertia
Signature:   void IPhysicsObject::SetInertia(Vector)

Function:    IPhysicsObject::SetMass
Signature:   void IPhysicsObject::SetMass(float)

Function:    IPhysicsObject::Sleep
Signature:   void IPhysicsObject::Sleep()

Function:    IPhysicsObject::Wake
Signature:   void IPhysicsObject::Wake()

Function:    ImpulseScale
Signature:   float ImpulseScale(float, float)
Description: Returns an impulse scale required to push an object.

Function:    InsertAISound
Signature:   void InsertAISound(int, Vector, int, float, handle, int, handle)
Description: Inserts an AI sound.

Function:    IntervalPerTick
Signature:   float IntervalPerTick()
Description: Simulation tick interval

Function:    IsClient
Signature:   bool IsClient()
Description: Returns true if the script is being run on the client.

Function:    IsDedicatedServer
Signature:   bool IsDedicatedServer()
Description: Is this a dedicated server?

Function:    IsLinux
Signature:   bool IsLinux()
Description: Returns true if the game is being run on a Linux machine.

Function:    IsOSX
Signature:   bool IsOSX()
Description: Returns true if the game is being run on an OSX machine.

Function:    IsPosix
Signature:   bool IsPosix()
Description: Returns true if the game is being run on a Posix machine.

Function:    IsServer
Signature:   bool IsServer()
Description: Returns true if the script is being run on the server.

Function:    IsWindows
Signature:   bool IsWindows()
Description: Returns true if the game is being run on a Windows machine.

Function:    KeyValuesToFile
Signature:   bool KeyValuesToFile(string, handle)
Description: Stores the CScriptKeyValues into the file

Function:    Lerp
Signature:   float Lerp(float, float, float)

Function:    ListenToGameEvent
Signature:   int ListenToGameEvent(string, handle, string)
Description: Register as a listener for a game event from script.

Function:    Matcher_Match
Signature:   bool Matcher_Match(string, string)
Description: Compares a string to a query using Mapbase's matcher system, supporting wildcards, RS matchers, etc.

Function:    Matcher_NamesMatch
Signature:   bool Matcher_NamesMatch(string, string)
Description: Compares a string to a query using Mapbase's matcher system using wildcards only.

Function:    MatricesAreEqual
Signature:   void MatricesAreEqual(handle, handle)
Description: Checks if two matrices are equal.

Function:    MatrixAngles
Signature:   void MatrixAngles(handle, Vector, Vector)
Description: Gets the angles and position of a matrix.

Function:    MatrixCopy
Signature:   void MatrixCopy(handle, handle)
Description: Copies a matrix to another matrix.

Function:    MatrixGetColumn
Signature:   Vector MatrixGetColumn(handle, int)
Description: Gets the column of a matrix.

Function:    MatrixGetTranslation
Signature:   Vector MatrixGetTranslation(handle)
Description: Gets a matrix's translation.

Function:    MatrixInvert
Signature:   void MatrixInvert(handle, handle)
Description: Inverts a matrix and copies the result to another matrix.

Function:    MatrixQuaternion
Signature:   void MatrixQuaternion(handle, handle)
Description: Converts a matrix to a quaternion.

Function:    MatrixScaleBy
Signature:   void MatrixScaleBy(float, handle)
Description: Scales a matrix.

Function:    MatrixScaleByZero
Signature:   void MatrixScaleByZero(handle)
Description: Scales a matrix by zero.

Function:    MatrixSetColumn
Signature:   void MatrixSetColumn(Vector, int, handle)
Description: Sets the column of a matrix.

Function:    MatrixSetTranslation
Signature:   void MatrixSetTranslation(Vector, handle)
Description: Sets a matrix's translation.

Function:    MaxPlayers
Signature:   int MaxPlayers()
Description: Get the maximum number of players allowed on this server

Function:    MegaPhyscannonActive
Signature:   bool MegaPhyscannonActive()
Description: Checks if supercharged gravity gun mode is enabled.

Function:    Msg
Signature:   void Msg(string)

Function:    NPrint
Signature:   void NPrint(int, string)
Description: Notification print

Function:    NXPrint
Signature:   void NXPrint(int, int, int, int, bool, float, string)
Description: Notification print, customised

Function:    PrecacheEntityFromTable
Signature:   void PrecacheEntityFromTable(string, handle)
Description: Precache an entity from KeyValues in a table.

Function:    PrecacheMaterial
Signature:   void PrecacheMaterial(string)
Description: Precaches a material for later usage.

Function:    PrecacheModel
Signature:   int PrecacheModel(string, bool)
Description: Precaches a model for later usage.

Function:    PrecacheOther
Signature:   void PrecacheOther(string, string)
Description: Precaches an entity class for later usage.

Function:    PrecacheParticleSystem
Signature:   void PrecacheParticleSystem(string)
Description: Precaches a particle system for later usage.

Function:    PredictedPosition
Signature:   Vector PredictedPosition(handle, float)
Description: Predicts what an entity's position will be in a given amount of time.

Function:    Quaternion::Init
Signature:   void Quaternion::Init(float, float, float, float)
Description: Creates a quaternion with the given values.

Function:    QuaternionAdd
Signature:   void QuaternionAdd(handle, handle, handle)
Description: Adds two quaternions together into another quaternion.

Function:    QuaternionAngles
Signature:   Vector QuaternionAngles(handle)
Description: Converts a quaternion to angles.

Function:    QuaternionMatrix
Signature:   void QuaternionMatrix(handle, handle)
Description: Converts a quaternion to a matrix.

Function:    RandomFloat
Signature:   float RandomFloat(float, float)
Description: Generate a random floating point number within a range, inclusive.

Function:    RandomInt
Signature:   int RandomInt(int, int)
Description: Generate a random integer within a range, inclusive.

Function:    RegisterActivityConstants
Signature:   void RegisterActivityConstants()
Description: Registers all activity IDs as usable constants.

Function:    RemapVal
Signature:   float RemapVal(float, float, float, float, float)

Function:    RemapValClamped
Signature:   float RemapValClamped(float, float, float, float, float)

Function:    RestoreTable
Signature:   void RestoreTable(string, handle)
Description: Retrieves a table from storage. Write into input table.

Function:    SaveEntityKVToTable
Signature:   void SaveEntityKVToTable(handle, handle)
Description: Saves an entity's keyvalues to a table.

Function:    SaveTable
Signature:   void SaveTable(string, handle)
Description: Store a table with primitive values that will persist across level transitions and save loads.

Function:    SendToConsole
Signature:   void SendToConsole(string)
Description: Send a string to the console as a command

Function:    SendToConsoleServer
Signature:   void SendToConsoleServer(string)
Description: Send a string to the server console as a command

Function:    SetIdentityMatrix
Signature:   void SetIdentityMatrix(handle)
Description: Turns a matrix into an identity matrix.

Function:    SetPhysVelocity
Signature:   void SetPhysVelocity(handle, Vector, Vector)
Description: Sets physics velocity for the given VPhysics object

Function:    SetScaleMatrix
Signature:   void SetScaleMatrix(float, float, float, handle)
Description: Builds a scale matrix.

Function:    ShowMessage
Signature:   void ShowMessage(string)
Description: Print a hud message on all clients

Function:    SimpleSpline
Signature:   float SimpleSpline(float)

Function:    SimpleSplineRemapVal
Signature:   float SimpleSplineRemapVal(float, float, float, float, float)
Description: remaps a value in [startInterval, startInterval+rangeInterval] from linear to spline using SimpleSpline

Function:    SimpleSplineRemapValClamped
Signature:   float SimpleSplineRemapValClamped(float, float, float, float, float)
Description: remaps a value in [startInterval, startInterval+rangeInterval] from linear to spline using SimpleSpline

Function:    SmoothCurve
Signature:   float SmoothCurve(float)
Description: SmoothCurve maps a 0-1 value into another 0-1 value based on a cosine wave

Function:    SmoothCurve_Tweak
Signature:   float SmoothCurve_Tweak(float, float, float)
Description: SmoothCurve peaks at flPeakPos, flPeakSharpness controls the sharpness of the peak

Function:    SpawnEntityFromKeyValues
Signature:   handle SpawnEntityFromKeyValues(string, handle)
Description: Spawns an entity with the keyvalues in a CScriptKeyValues handle.

Function:    SpawnEntityFromTable
Signature:   handle SpawnEntityFromTable(string, handle)
Description: Native function for entity spawning.

Function:    StopListeningToAllGameEvents
Signature:   void StopListeningToAllGameEvents(string)
Description: Stop listening to all game events within a specific context.

Function:    StopListeningToGameEvent
Signature:   bool StopListeningToGameEvent(int)
Description: Stop the specified event listener.

Function:    StringToFile
Signature:   bool StringToFile(string, string)
Description: Stores the string into the file

Function:    Time
Signature:   float Time()
Description: Get the current server time

Function:    TraceHullComplex
Signature:   handle TraceHullComplex(Vector, Vector, Vector, Vector, handle, int, int)
Description: Takes 2 points, min/max hull bounds, an ent to ignore, a trace mask, and a collision group to trace to a point using a hull. Returns a handle which can access all trace info.

Function:    TraceLine
Signature:   float TraceLine(Vector, Vector, handle)
Description: given 2 points & ent to ignore, return fraction along line that hits world or models

Function:    TraceLineComplex
Signature:   handle TraceLineComplex(Vector, Vector, handle, int, int)
Description: Complex version of TraceLine which takes 2 points, an ent to ignore, a trace mask, and a collision group. Returns a handle which can access all trace info.

Function:    UniqueString
Signature:   function UniqueString(string)
Description: Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table.

Function:    Vector::Cross
Signature:   float Vector::Cross(vector)
Description: Return the vector product of two vectors.

Function:    Vector::Dot
Signature:   float Vector::Dot(vector)
Description: Return the dot/scalar product of two vectors.

Function:    Vector::Length
Signature:   float Vector::Length()
Description: Return the vector's length.

Function:    Vector::Length2D
Signature:   float Vector::Length2D()
Description: Return the vector's 2D length.

Function:    Vector::Length2DSqr
Signature:   float Vector::Length2DSqr()
Description: Return the vector's squared 2D length.

Function:    Vector::LengthSqr
Signature:   float Vector::LengthSqr()
Description: Return the vector's squared length.

Function:    Vector::Norm
Signature:   void Vector::Norm()
Description: Normalize the vector in place.

Function:    Vector::Normalized
Signature:   float Vector::Normalized()
Description: Return a normalized version of the vector.

Function:    Vector::Scale
Signature:   vector Vector::Scale(float)
Description: Scale the vector's magnitude and return the result.

Function:    Vector::ToKVString
Signature:   string Vector::ToKVString()
Description: Return a vector as a string in KeyValue form, without separation commas.

Function:    VectorAngles
Signature:   Vector VectorAngles(Vector)
Description: Turns a direction vector into an angle.

Function:    VectorIRotate
Signature:   Vector VectorIRotate(Vector, handle)
Description: Rotates a vector with the inverse of a matrix.

Function:    VectorITransform
Signature:   Vector VectorITransform(Vector, handle)
Description: Transforms a vector with the inverse of a matrix.

Function:    VectorRotate
Signature:   Vector VectorRotate(Vector, handle)
Description: Rotates a vector with a matrix.

Function:    VectorTransform
Signature:   Vector VectorTransform(Vector, handle)
Description: Transforms a vector with a matrix.

Function:    clamp
Signature:   float clamp(float, float, float)

Function:    csurface_t::Name
Signature:   string csurface_t::Name()

Function:    csurface_t::SurfaceProps
Signature:   handle csurface_t::SurfaceProps()
Description: The surface's properties.

Function:    matrix3x4_t::Init
Signature:   void matrix3x4_t::Init(Vector, Vector, Vector, Vector)
Description: Creates a matrix where the X axis = forward, the Y axis = left, and the Z axis = up.

Function:    max
Signature:   float max(float, float)

Function:    min
Signature:   float min(float, float)

Function:    printc
Signature:   void printc(int, int, int, string)
Description: Version of print() which takes a color before the message.

Function:    printcl
Signature:   void printcl(int, int, int, string)
Description: Version of printl() which takes a color before the message.

Function:    scriptanimevent_t::GetCycle
Signature:   float scriptanimevent_t::GetCycle()

Function:    scriptanimevent_t::GetEvent
Signature:   int scriptanimevent_t::GetEvent()

Function:    scriptanimevent_t::GetEventTime
Signature:   float scriptanimevent_t::GetEventTime()

Function:    scriptanimevent_t::GetOptions
Signature:   string scriptanimevent_t::GetOptions()

Function:    scriptanimevent_t::GetSource
Signature:   handle scriptanimevent_t::GetSource()
Description: Gets the event's source entity.

Function:    scriptanimevent_t::GetType
Signature:   int scriptanimevent_t::GetType()
Description: Gets the event's type flags. See the 'AE_TYPE_' set of constants for valid flags.

Function:    scriptanimevent_t::SetCycle
Signature:   void scriptanimevent_t::SetCycle(float)

Function:    scriptanimevent_t::SetEvent
Signature:   void scriptanimevent_t::SetEvent(int)

Function:    scriptanimevent_t::SetEventTime
Signature:   void scriptanimevent_t::SetEventTime(float)

Function:    scriptanimevent_t::SetOptions
Signature:   void scriptanimevent_t::SetOptions(string)

Function:    scriptanimevent_t::SetSource
Signature:   void scriptanimevent_t::SetSource(handle)
Description: Sets the event's source entity.

Function:    scriptanimevent_t::SetType
Signature:   void scriptanimevent_t::SetType(int)
Description: Sets the event's type flags. See the 'AE_TYPE_' set of constants for valid flags.

Function:    surfacedata_t::GetFriction
Signature:   float surfacedata_t::GetFriction()

Function:    surfacedata_t::GetJumpFactor
Signature:   float surfacedata_t::GetJumpFactor()

Function:    surfacedata_t::GetMaterialChar
Signature:   char surfacedata_t::GetMaterialChar()

Function:    surfacedata_t::GetSoundBreak
Signature:   string surfacedata_t::GetSoundBreak()

Function:    surfacedata_t::GetSoundBulletImpact
Signature:   string surfacedata_t::GetSoundBulletImpact()

Function:    surfacedata_t::GetSoundImpactHard
Signature:   string surfacedata_t::GetSoundImpactHard()

Function:    surfacedata_t::GetSoundImpactSoft
Signature:   string surfacedata_t::GetSoundImpactSoft()

Function:    surfacedata_t::GetSoundRolling
Signature:   string surfacedata_t::GetSoundRolling()

Function:    surfacedata_t::GetSoundScrapeRough
Signature:   string surfacedata_t::GetSoundScrapeRough()

Function:    surfacedata_t::GetSoundScrapeSmooth
Signature:   string surfacedata_t::GetSoundScrapeSmooth()

Function:    surfacedata_t::GetSoundStepLeft
Signature:   string surfacedata_t::GetSoundStepLeft()

Function:    surfacedata_t::GetSoundStepRight
Signature:   string surfacedata_t::GetSoundStepRight()

Function:    surfacedata_t::GetSoundStrain
Signature:   string surfacedata_t::GetSoundStrain()

Function:    surfacedata_t::GetThickness
Signature:   float surfacedata_t::GetThickness()

Member:      Color.a
Signature:   char Color.a
Description: Member variable for alpha. (transparency)

Member:      Color.b
Signature:   char Color.b
Description: Member variable for blue.

Member:      Color.g
Signature:   char Color.g
Description: Member variable for green.

Member:      Color.r
Signature:   char Color.r
Description: Member variable for red.

Member:      Quaternion.w
Signature:   float Quaternion.w
Description: The quaternion's scalar component.

Member:      Quaternion.x
Signature:   float Quaternion.x
Description: The quaternion's i axis component.

Member:      Quaternion.y
Signature:   float Quaternion.y
Description: The quaternion's j axis component.

Member:      Quaternion.z
Signature:   float Quaternion.z
Description: The quaternion's k axis component.

Member:      Vector.x
Signature:   float Vector.x
Description: The vector's X coordinate on the cartesian X axis.

Member:      Vector.y
Signature:   float Vector.y
Description: The vector's Y coordinate on the cartesian Y axis.

Member:      Vector.z
Signature:   float Vector.z
Description: The vector's Z coordinate on the cartesian Z axis.

Hook:        CAI_BaseNPC -> GetActualShootPosition
Signature:   Vector CAI_BaseNPC -> GetActualShootPosition(Vector [shootOrigin], handle [target])
Description: Called when the NPC is getting their actual shoot position, using the default shoot position as the parameter. (NOTE: NPCs which override this themselves might not always use this hook!)

Hook:        CAI_BaseNPC -> NPC_TranslateActivity
Signature:   variant CAI_BaseNPC -> NPC_TranslateActivity(string [activity], int [activity_id])
Description: Called when the NPC is translating their current activity. The activity is provided in both string and ID form. Should return either an activity string or an activity ID. Return -1 to not translate.

Hook:        CAI_BaseNPC -> NPC_TranslateSchedule
Signature:   variant CAI_BaseNPC -> NPC_TranslateSchedule(string [schedule], int [schedule_id])
Description: Called when the NPC is translating their current schedule. The schedule is provided in both string and ID form. Should return either a schedule string or a schedule ID. Return -1 to not translate.

Hook:        CAI_BaseNPC -> OverrideMove
Signature:   void CAI_BaseNPC -> OverrideMove(float [interval])
Description: Called when the NPC runs movement code, allowing the NPC's movement to be overridden by some other method. (NOTE: NPCs which override this themselves might not always use this hook!)

Hook:        CAI_BaseNPC -> QueryHearSound
Signature:   bool CAI_BaseNPC -> QueryHearSound(handle [sound])
Description: Called when the NPC is deciding whether to hear a CSound or not.

Hook:        CAI_BaseNPC -> QuerySeeEntity
Signature:   bool CAI_BaseNPC -> QuerySeeEntity(handle [entity])
Description: Called when the NPC is deciding whether to see an entity or not.

Hook:        CAI_BaseNPC -> ShouldPlayFakeSequenceGesture
Signature:   bool CAI_BaseNPC -> ShouldPlayFakeSequenceGesture(string [activity], string [translatedActivity])
Description: Called when an activity is set on a NPC. Returning true will make the NPC convert the activity into a gesture (if a gesture is available) and continue their current activity instead.

Hook:        CBaseAnimating -> HandleAnimEvent
Signature:   bool CBaseAnimating -> HandleAnimEvent(handle [event])
Description: Called when handling animation events. Return false to cancel base handling.

Hook:        CBaseAnimating -> OnServerRagdoll
Signature:   void CBaseAnimating -> OnServerRagdoll(handle [ragdoll], bool [submodel])
Description: Called when this entity creates/turns into a server-side ragdoll.

Hook:        CBaseCombatCharacter -> RelationshipPriority
Signature:   int CBaseCombatCharacter -> RelationshipPriority(handle [entity], int [def])
Description: Called when a character's relationship priority for another entity is requested. Returning a number will make the game use that priority instead of the default priority. (note: 'default' in this case includes overrides from ai_relationship/SetRelationship)

Hook:        CBaseCombatCharacter -> RelationshipType
Signature:   int CBaseCombatCharacter -> RelationshipType(handle [entity], int [def])
Description: Called when a character's relationship to another entity is requested. Returning a disposition will make the game use that disposition instead of the default relationship. (note: 'default' in this case includes overrides from ai_relationship/SetRelationship)

Hook:        CBaseEntity -> FireBullets
Signature:   void CBaseEntity -> FireBullets(handle [entity], float [speed], Vector [point], Vector [normal])
Description: Called for every single VPhysics-related collision experienced by this entity.

Hook:        CBaseEntity -> HandleInteraction
Signature:   bool CBaseEntity -> HandleInteraction(int [interaction], handle [sourceEnt])
Description: Called for internal game interactions. See the g_interaction set of constants for more information. Returning true or false will return that value without falling to any internal handling. Returning nothing will allow the interaction to fall to any internal handling.

Hook:        CBaseEntity -> ModifyEmitSoundParams
Signature:   void CBaseEntity -> ModifyEmitSoundParams(handle [params])
Description: Called every time a sound is emitted on this entity, allowing for its parameters to be modified.

Hook:        CBaseEntity -> ModifySentenceParams
Signature:   void CBaseEntity -> ModifySentenceParams(handle [params])
Description: Called every time a sentence is emitted on this entity, allowing for its parameters to be modified.

Hook:        CBaseEntity -> OnDeath
Signature:   bool CBaseEntity -> OnDeath(handle [info])
Description: Called when the entity dies (Event_Killed). Returning false makes the entity cancel death, although this could have unforeseen consequences. For hooking any damage instead of just death, see filter_script and PassesFinalDamageFilter.

Hook:        CBaseEntity -> OnEntText
Signature:   string CBaseEntity -> OnEntText()
Description: Called every frame when ent_text is enabled on the entity. Return a string to be added to the ent_text printout.

Hook:        CBaseEntity -> OnKilledOther
Signature:   void CBaseEntity -> OnKilledOther(handle [victim], handle [info])
Description: Called when the entity kills another entity.

Hook:        CBaseEntity -> UpdateOnRemove
Signature:   void CBaseEntity -> UpdateOnRemove()
Description: Called when the entity is being removed.

Hook:        CBaseEntity -> VPhysicsCollision
Signature:   void CBaseEntity -> VPhysicsCollision(handle [entity], float [speed], Vector [point], Vector [normal])
Description: Called for every single VPhysics-related collision experienced by this entity.

Hook:        CBasePlayer -> PlayerRunCommand
Signature:   void CBasePlayer -> PlayerRunCommand(handle [command])
Description: Called when running a player command on the server.

Hook:        CEntities -> OnEntityCreated
Signature:   void CEntities -> OnEntityCreated(handle [entity])
Description: Called when an entity is created. Requires EnableEntityListening() to be fired beforehand.

Hook:        CEntities -> OnEntityDeleted
Signature:   void CEntities -> OnEntityDeleted(handle [entity])
Description: Called when an entity is deleted. Requires EnableEntityListening() to be fired beforehand.

Hook:        CEntities -> OnEntitySpawned
Signature:   void CEntities -> OnEntitySpawned(handle [entity])
Description: Called when an entity spawns. Requires EnableEntityListening() to be fired beforehand.

Hook:        CFilterScript -> BloodAllowed
Signature:   bool CFilterScript -> BloodAllowed(handle [caller], handle [info])
Description: A completely optional hook used by filter_script to determine if a caller is allowed to emit blood after taking damage. Return true if blood should be allowed or false if it should not. If this hook is not defined, it will always return true.

Hook:        CFilterScript -> DamageMod
Signature:   bool CFilterScript -> DamageMod(handle [caller], handle [info])
Description: A completely optional hook used by filter_script to modify damage being taken by an entity. You are free to use CTakeDamageInfo functions on the damage info handle and it will change how the caller is damaged. Returning true or false currently has no effect on vanilla code, but you should generally return true if the damage info has been modified by your code and false if it was not. If this hook is not defined, it will always return false.

Hook:        CFilterScript -> PassesDamageFilter
Signature:   bool CFilterScript -> PassesDamageFilter(handle [caller], handle [info])
Description: A hook used by filter_script to determine what damage should pass it when it's being used as a damage filter. Return true if the info should pass or false if it should not. If this hook is not defined in a filter_script, damage filter requests will instead check PassesFilter with the attacker as the activator.

Hook:        CFilterScript -> PassesFilter
Signature:   bool CFilterScript -> PassesFilter(handle [caller], handle [activator])
Description: A hook used by filter_script to determine what entities should pass it. Return true if the entity should pass or false if it should not. This hook is required for regular filtering.

Hook:        CFilterScript -> PassesFinalDamageFilter
Signature:   bool CFilterScript -> PassesFinalDamageFilter(handle [caller], handle [info])
Description: A completely optional hook used by filter_script which only runs when the entity will take damage. This is different from PassesDamageFilter, which is sometimes used in cases where damage is not actually about to be taken. This also runs after a regular PassesDamageFilter check. Return true if the info should pass or false if it should not. If this hook is not defined, it will always return true.

Hook:        CNPC_Citizen -> SelectModel
Signature:   string CNPC_Citizen -> SelectModel(string [model_path], string [model_head], int [gender])
Description: Called when a citizen is selecting a random model. 'model_path' is the directory of the selected model and 'model_head' is the name. The 'gender' parameter uses the 'GENDER_' constants and is based only on the citizen's random head spawnflags. If a full model path string is returned, it will be used as the model instead.

Hook:        CPointCommentaryNode -> PreStartCommentary
Signature:   bool CPointCommentaryNode -> PreStartCommentary()
Description: Called just before commentary begins. Use this to modify variables or commentary behavior before it begins. Returning false will prevent the commentary from starting.

Hook:        CWeaponCustomScripted -> AbortReload
Signature:   void CWeaponCustomScripted -> AbortReload()

Hook:        CWeaponCustomScripted -> ActivityList
Signature:   handle CWeaponCustomScripted -> ActivityList()

Hook:        CWeaponCustomScripted -> ActivityListCount
Signature:   int CWeaponCustomScripted -> ActivityListCount()

Hook:        CWeaponCustomScripted -> AddViewKick
Signature:   void CWeaponCustomScripted -> AddViewKick()

Hook:        CWeaponCustomScripted -> CanDeploy
Signature:   bool CWeaponCustomScripted -> CanDeploy()
Description: Should return true if weapon can be deployed

Hook:        CWeaponCustomScripted -> CanHolster
Signature:   bool CWeaponCustomScripted -> CanHolster()
Description: Should return true if weapon can be holstered

Hook:        CWeaponCustomScripted -> CheckReload
Signature:   void CWeaponCustomScripted -> CheckReload()

Hook:        CWeaponCustomScripted -> Deploy
Signature:   bool CWeaponCustomScripted -> Deploy()
Description: Called when weapon is being deployed

Hook:        CWeaponCustomScripted -> FinishReload
Signature:   void CWeaponCustomScripted -> FinishReload()

Hook:        CWeaponCustomScripted -> GetBulletSpread
Signature:   Vector CWeaponCustomScripted -> GetBulletSpread()

Hook:        CWeaponCustomScripted -> GetBulletSpreadForProficiency
Signature:   Vector CWeaponCustomScripted -> GetBulletSpreadForProficiency(int [proficiency])
Description: Returns the bullet spread of a specific proficiency level. If this isn't defined, it will fall back to GetBulletSpread.

Hook:        CWeaponCustomScripted -> GetDefaultAnimSpeed
Signature:   float CWeaponCustomScripted -> GetDefaultAnimSpeed()

Hook:        CWeaponCustomScripted -> GetDrawActivity
Signature:   variant CWeaponCustomScripted -> GetDrawActivity()

Hook:        CWeaponCustomScripted -> GetFireRate
Signature:   float CWeaponCustomScripted -> GetFireRate()

Hook:        CWeaponCustomScripted -> GetMaxBurst
Signature:   int CWeaponCustomScripted -> GetMaxBurst()

Hook:        CWeaponCustomScripted -> GetMaxRestTime
Signature:   float CWeaponCustomScripted -> GetMaxRestTime()

Hook:        CWeaponCustomScripted -> GetMinBurst
Signature:   int CWeaponCustomScripted -> GetMinBurst()

Hook:        CWeaponCustomScripted -> GetMinRestTime
Signature:   float CWeaponCustomScripted -> GetMinRestTime()

Hook:        CWeaponCustomScripted -> GetPrimaryAttackActivity
Signature:   variant CWeaponCustomScripted -> GetPrimaryAttackActivity()

Hook:        CWeaponCustomScripted -> GetSecondaryAttackActivity
Signature:   variant CWeaponCustomScripted -> GetSecondaryAttackActivity()

Hook:        CWeaponCustomScripted -> HandleFireOnEmpty
Signature:   void CWeaponCustomScripted -> HandleFireOnEmpty()
Description: Called when they have the attack button down but they are out of ammo. The default implementation either reloads, switches weapons, or plays an empty sound.

Hook:        CWeaponCustomScripted -> HasAnyAmmo
Signature:   bool CWeaponCustomScripted -> HasAnyAmmo()
Description: Should return true if weapon has ammo

Hook:        CWeaponCustomScripted -> HasPrimaryAmmo
Signature:   bool CWeaponCustomScripted -> HasPrimaryAmmo()
Description: Should return true if weapon has primary ammo

Hook:        CWeaponCustomScripted -> HasSecondaryAmmo
Signature:   bool CWeaponCustomScripted -> HasSecondaryAmmo()
Description: Should return true if weapon has secondary ammo

Hook:        CWeaponCustomScripted -> Holster
Signature:   bool CWeaponCustomScripted -> Holster(handle [switchingto])
Description: Called when weapon is being holstered

Hook:        CWeaponCustomScripted -> ItemBusyFrame
Signature:   void CWeaponCustomScripted -> ItemBusyFrame()
Description: Called each frame by the player PostThink, if the player's not ready to attack yet

Hook:        CWeaponCustomScripted -> ItemHolsterFrame
Signature:   void CWeaponCustomScripted -> ItemHolsterFrame()
Description: Called each frame by the player PreThink, if the weapon is holstered

Hook:        CWeaponCustomScripted -> ItemPostFrame
Signature:   void CWeaponCustomScripted -> ItemPostFrame()
Description: Called each frame by the player PostThink

Hook:        CWeaponCustomScripted -> ItemPreFrame
Signature:   void CWeaponCustomScripted -> ItemPreFrame()
Description: Called each frame by the player PreThink

Hook:        CWeaponCustomScripted -> PrimaryAttack
Signature:   void CWeaponCustomScripted -> PrimaryAttack()

Hook:        CWeaponCustomScripted -> Reload
Signature:   bool CWeaponCustomScripted -> Reload()

Hook:        CWeaponCustomScripted -> Reload_NPC
Signature:   void CWeaponCustomScripted -> Reload_NPC()

Hook:        CWeaponCustomScripted -> SecondaryAttack
Signature:   void CWeaponCustomScripted -> SecondaryAttack()

Hook:        CWeaponCustomScripted -> WeaponIdle
Signature:   void CWeaponCustomScripted -> WeaponIdle()
Description: Called when no buttons pressed

Hook:        CWeaponCustomScripted -> WeaponLOSCondition
Signature:   bool CWeaponCustomScripted -> WeaponLOSCondition()

Hook:        CWeaponCustomScripted -> WeaponMeleeAttack1Condition
Signature:   int CWeaponCustomScripted -> WeaponMeleeAttack1Condition()

Hook:        CWeaponCustomScripted -> WeaponMeleeAttack2Condition
Signature:   int CWeaponCustomScripted -> WeaponMeleeAttack2Condition()

Hook:        CWeaponCustomScripted -> WeaponRangeAttack1Condition
Signature:   int CWeaponCustomScripted -> WeaponRangeAttack1Condition()

Hook:        CWeaponCustomScripted -> WeaponRangeAttack2Condition
Signature:   int CWeaponCustomScripted -> WeaponRangeAttack2Condition()

Hook:        OnRestore
Signature:   void OnRestore()
Description: Called when the game is restored.

Hook:        OnSave
Signature:   void OnSave()
Description: Called when the game is saved.
DOCUMENTATION_CLIENT
=====================================
Enum:        Alignment
Elements:    9
=====================================

=====================================
Enum:        AnalogCode
Elements:    6
=====================================

=====================================
Enum:        ButtonCode
Elements:    125
=====================================

=====================================
Enum:        CursorCode
Elements:    15
=====================================

=====================================
Enum:        Hitgroup
Elements:    9
Description: Hit groups from traces
=====================================

=====================================
Enum:        IN
Elements:    26
Description: Button mask bindings
=====================================

=====================================
Enum:        MapLoad
Elements:    4
Description: Map load enum for GetLoadType()
=====================================

=====================================
Enum:        RenderMode
Elements:    11
Description: Render modes used by Get/SetRenderMode
=====================================

=====================================
Enum:        WeaponSound
Elements:    17
Description: Weapon sounds.
=====================================

Constant:    AE_TYPE_CLIENT
Value:       16 (int)
Description: Animation event flag which indicates an event is supposed to be clientside only.

Constant:    AE_TYPE_FACEPOSER
Value:       32 (int)
Description: Animation event flag with an unknown purpose. Presumably related to Faceposer.

Constant:    AE_TYPE_NEWEVENTSYSTEM
Value:       1024 (int)
Description: Animation event flag which indicates an event is using the new system. This is often used by class-specific events from NPCs.

Constant:    AE_TYPE_SCRIPTED
Value:       2 (int)
Description: Animation event flag with an unknown purpose.

Constant:    AE_TYPE_SERVER
Value:       1 (int)
Description: Animation event flag which indicates an event is supposed to be serverside only.

Constant:    AE_TYPE_SHARED
Value:       4 (int)
Description: Animation event flag which indicates an event is supposed to be shared between the server and client.

Constant:    AE_TYPE_WEAPON
Value:       8 (int)
Description: Animation event flag which indicates an event is part of a weapon.

Constant:    ALL_VISIBLE_CONTENTS
Value:       255 (int)
Description: Contains all visible spatial content flags.

Constant:    AUTOAIM_10DEGREES
Value:       0.173648 (float)
Description: 10-degree autoaim cone.

Constant:    AUTOAIM_20DEGREES
Value:       0.349066 (float)
Description: 20-degree autoaim cone.

Constant:    AUTOAIM_2DEGREES
Value:       0.034899 (float)
Description: 2-degree autoaim cone.

Constant:    AUTOAIM_5DEGREES
Value:       0.087156 (float)
Description: 5-degree autoaim cone.

Constant:    AUTOAIM_8DEGREES
Value:       0.139173 (float)
Description: 8-degree autoaim cone.

Constant:    AUTOAIM_SCALE_DEFAULT
Value:       1.000000 (float)
Description: Indicates default auto aim scale.

Constant:    AUTOAIM_SCALE_DIRECT_ONLY
Value:       0.000000 (float)
Description: Indicates auto aim should not be used except for direct hits.

Constant:    Alignment.center
Value:       4

Constant:    Alignment.east
Value:       5

Constant:    Alignment.north
Value:       1

Constant:    Alignment.northeast
Value:       2

Constant:    Alignment.northwest
Value:       0

Constant:    Alignment.south
Value:       7

Constant:    Alignment.southeast
Value:       8

Constant:    Alignment.southwest
Value:       6

Constant:    Alignment.west
Value:       3

Constant:    AnalogCode.JOYSTICK_FIRST_AXIS
Value:       4

Constant:    AnalogCode.JOYSTICK_LAST_AXIS
Value:       9

Constant:    AnalogCode.MOUSE_WHEEL
Value:       3

Constant:    AnalogCode.MOUSE_X
Value:       0

Constant:    AnalogCode.MOUSE_XY
Value:       2

Constant:    AnalogCode.MOUSE_Y
Value:       1

Constant:    ButtonCode.JOYSTICK_FIRST
Value:       114

Constant:    ButtonCode.JOYSTICK_FIRST_AXIS_BUTTON
Value:       150

Constant:    ButtonCode.JOYSTICK_FIRST_BUTTON
Value:       114

Constant:    ButtonCode.JOYSTICK_FIRST_POV_BUTTON
Value:       146

Constant:    ButtonCode.JOYSTICK_LAST
Value:       161

Constant:    ButtonCode.JOYSTICK_LAST_AXIS_BUTTON
Value:       161

Constant:    ButtonCode.JOYSTICK_LAST_BUTTON
Value:       145

Constant:    ButtonCode.JOYSTICK_LAST_POV_BUTTON
Value:       149

Constant:    ButtonCode.KEY_0
Value:       1

Constant:    ButtonCode.KEY_1
Value:       2

Constant:    ButtonCode.KEY_2
Value:       3

Constant:    ButtonCode.KEY_3
Value:       4

Constant:    ButtonCode.KEY_4
Value:       5

Constant:    ButtonCode.KEY_5
Value:       6

Constant:    ButtonCode.KEY_6
Value:       7

Constant:    ButtonCode.KEY_7
Value:       8

Constant:    ButtonCode.KEY_8
Value:       9

Constant:    ButtonCode.KEY_9
Value:       10

Constant:    ButtonCode.KEY_A
Value:       11

Constant:    ButtonCode.KEY_APOSTROPHE
Value:       56

Constant:    ButtonCode.KEY_APP
Value:       87

Constant:    ButtonCode.KEY_B
Value:       12

Constant:    ButtonCode.KEY_BACKQUOTE
Value:       57

Constant:    ButtonCode.KEY_BACKSLASH
Value:       61

Constant:    ButtonCode.KEY_BACKSPACE
Value:       66

Constant:    ButtonCode.KEY_BREAK
Value:       78

Constant:    ButtonCode.KEY_C
Value:       13

Constant:    ButtonCode.KEY_CAPSLOCK
Value:       68

Constant:    ButtonCode.KEY_CAPSLOCKTOGGLE
Value:       104

Constant:    ButtonCode.KEY_COMMA
Value:       58

Constant:    ButtonCode.KEY_D
Value:       14

Constant:    ButtonCode.KEY_DELETE
Value:       73

Constant:    ButtonCode.KEY_DOWN
Value:       90

Constant:    ButtonCode.KEY_E
Value:       15

Constant:    ButtonCode.KEY_END
Value:       75

Constant:    ButtonCode.KEY_ENTER
Value:       64

Constant:    ButtonCode.KEY_EQUAL
Value:       63

Constant:    ButtonCode.KEY_ESCAPE
Value:       70

Constant:    ButtonCode.KEY_F
Value:       16

Constant:    ButtonCode.KEY_F1
Value:       92

Constant:    ButtonCode.KEY_F10
Value:       101

Constant:    ButtonCode.KEY_F11
Value:       102

Constant:    ButtonCode.KEY_F12
Value:       103

Constant:    ButtonCode.KEY_F2
Value:       93

Constant:    ButtonCode.KEY_F3
Value:       94

Constant:    ButtonCode.KEY_F4
Value:       95

Constant:    ButtonCode.KEY_F5
Value:       96

Constant:    ButtonCode.KEY_F6
Value:       97

Constant:    ButtonCode.KEY_F7
Value:       98

Constant:    ButtonCode.KEY_F8
Value:       99

Constant:    ButtonCode.KEY_F9
Value:       100

Constant:    ButtonCode.KEY_FIRST
Value:       0

Constant:    ButtonCode.KEY_G
Value:       17

Constant:    ButtonCode.KEY_H
Value:       18

Constant:    ButtonCode.KEY_HOME
Value:       74

Constant:    ButtonCode.KEY_I
Value:       19

Constant:    ButtonCode.KEY_INSERT
Value:       72

Constant:    ButtonCode.KEY_J
Value:       20

Constant:    ButtonCode.KEY_K
Value:       21

Constant:    ButtonCode.KEY_L
Value:       22

Constant:    ButtonCode.KEY_LALT
Value:       81

Constant:    ButtonCode.KEY_LAST
Value:       106

Constant:    ButtonCode.KEY_LBRACKET
Value:       53

Constant:    ButtonCode.KEY_LCONTROL
Value:       83

Constant:    ButtonCode.KEY_LEFT
Value:       89

Constant:    ButtonCode.KEY_LSHIFT
Value:       79

Constant:    ButtonCode.KEY_LWIN
Value:       85

Constant:    ButtonCode.KEY_M
Value:       23

Constant:    ButtonCode.KEY_MINUS
Value:       62

Constant:    ButtonCode.KEY_N
Value:       24

Constant:    ButtonCode.KEY_NUMLOCK
Value:       69

Constant:    ButtonCode.KEY_NUMLOCKTOGGLE
Value:       105

Constant:    ButtonCode.KEY_O
Value:       25

Constant:    ButtonCode.KEY_P
Value:       26

Constant:    ButtonCode.KEY_PAD_0
Value:       37

Constant:    ButtonCode.KEY_PAD_1
Value:       38

Constant:    ButtonCode.KEY_PAD_2
Value:       39

Constant:    ButtonCode.KEY_PAD_3
Value:       40

Constant:    ButtonCode.KEY_PAD_4
Value:       41

Constant:    ButtonCode.KEY_PAD_5
Value:       42

Constant:    ButtonCode.KEY_PAD_6
Value:       43

Constant:    ButtonCode.KEY_PAD_7
Value:       44

Constant:    ButtonCode.KEY_PAD_8
Value:       45

Constant:    ButtonCode.KEY_PAD_9
Value:       46

Constant:    ButtonCode.KEY_PAD_DECIMAL
Value:       52

Constant:    ButtonCode.KEY_PAD_DIVIDE
Value:       47

Constant:    ButtonCode.KEY_PAD_ENTER
Value:       51

Constant:    ButtonCode.KEY_PAD_MINUS
Value:       49

Constant:    ButtonCode.KEY_PAD_MULTIPLY
Value:       48

Constant:    ButtonCode.KEY_PAD_PLUS
Value:       50

Constant:    ButtonCode.KEY_PAGEDOWN
Value:       77

Constant:    ButtonCode.KEY_PAGEUP
Value:       76

Constant:    ButtonCode.KEY_PERIOD
Value:       59

Constant:    ButtonCode.KEY_Q
Value:       27

Constant:    ButtonCode.KEY_R
Value:       28

Constant:    ButtonCode.KEY_RALT
Value:       82

Constant:    ButtonCode.KEY_RBRACKET
Value:       54

Constant:    ButtonCode.KEY_RCONTROL
Value:       84

Constant:    ButtonCode.KEY_RIGHT
Value:       91

Constant:    ButtonCode.KEY_RSHIFT
Value:       80

Constant:    ButtonCode.KEY_RWIN
Value:       86

Constant:    ButtonCode.KEY_S
Value:       29

Constant:    ButtonCode.KEY_SCROLLLOCK
Value:       71

Constant:    ButtonCode.KEY_SCROLLLOCKTOGGLE
Value:       106

Constant:    ButtonCode.KEY_SEMICOLON
Value:       55

Constant:    ButtonCode.KEY_SLASH
Value:       60

Constant:    ButtonCode.KEY_SPACE
Value:       65

Constant:    ButtonCode.KEY_T
Value:       30

Constant:    ButtonCode.KEY_TAB
Value:       67

Constant:    ButtonCode.KEY_U
Value:       31

Constant:    ButtonCode.KEY_UP
Value:       88

Constant:    ButtonCode.KEY_V
Value:       32

Constant:    ButtonCode.KEY_W
Value:       33

Constant:    ButtonCode.KEY_X
Value:       34

Constant:    ButtonCode.KEY_Y
Value:       35

Constant:    ButtonCode.KEY_Z
Value:       36

Constant:    ButtonCode.MOUSE_4
Value:       110

Constant:    ButtonCode.MOUSE_5
Value:       111

Constant:    ButtonCode.MOUSE_FIRST
Value:       107

Constant:    ButtonCode.MOUSE_LAST
Value:       113

Constant:    ButtonCode.MOUSE_LEFT
Value:       107

Constant:    ButtonCode.MOUSE_MIDDLE
Value:       109

Constant:    ButtonCode.MOUSE_RIGHT
Value:       108

Constant:    ButtonCode.MOUSE_WHEEL_DOWN
Value:       113

Constant:    ButtonCode.MOUSE_WHEEL_UP
Value:       112

Constant:    CHAN_AUTO
Value:       0 (int)
Description: The default generic sound channel.

Constant:    CHAN_BODY
Value:       4 (int)
Description: The sound channel used for clothing, ragdoll impacts, footsteps, knocking/pounding/punching etc.

Constant:    CHAN_ITEM
Value:       3 (int)
Description: The sound channel used for generic physics impact sounds, health/suit chargers, +use sounds.

Constant:    CHAN_REPLACE
Value:       -1 (int)
Description: The sound channel used when playing sounds through console commands.

Constant:    CHAN_STATIC
Value:       6 (int)
Description: The sound channel for constant/background sound that doesn't require any reaction.

Constant:    CHAN_STREAM
Value:       5 (int)
Description: The sound channel for sounds that can be delayed by an async load, i.e. aren't responses to particular events.

Constant:    CHAN_VOICE
Value:       2 (int)
Description: The sound channel used for dialogue, voice lines, etc.

Constant:    CHAN_VOICE2
Value:       7 (int)
Description: An additional sound channel for voices. Used in TF2 for the announcer.

Constant:    CHAN_VOICE_BASE
Value:       8 (int)
Description: The sound channel used for network voice data (online voice communications).

Constant:    CHAN_WEAPON
Value:       1 (int)
Description: The sound channel for player and NPC weapons.

Constant:    CLIENT_DLL
Value:       1 (int)

Constant:    COLLISION_GROUP_BREAKABLE_GLASS
Value:       6 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_DEBRIS
Value:       1 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_DEBRIS_TRIGGER
Value:       2 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_DISSOLVING
Value:       16 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_DOOR_BLOCKER
Value:       14 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_INTERACTIVE
Value:       4 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_INTERACTIVE_DEBRIS
Value:       3 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_IN_VEHICLE
Value:       10 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_NONE
Value:       0 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_NPC
Value:       9 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_NPC_ACTOR
Value:       18 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_NPC_SCRIPTED
Value:       19 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_PASSABLE_DOOR
Value:       15 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_PLAYER
Value:       5 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_PLAYER_MOVEMENT
Value:       8 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_PROJECTILE
Value:       13 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_PUSHAWAY
Value:       17 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_VEHICLE
Value:       7 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_VEHICLE_CLIP
Value:       12 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    COLLISION_GROUP_WEAPON
Value:       11 (int)
Description: Collision group used in GetCollisionGroup(), etc.

Constant:    CONTENTS_AREAPORTAL
Value:       32768 (int)
Description: Spatial content flags.

Constant:    CONTENTS_AUX
Value:       4 (int)
Description: Spatial content flags.

Constant:    CONTENTS_BLOCKLOS
Value:       64 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_0
Value:       262144 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_180
Value:       1048576 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_270
Value:       2097152 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_90
Value:       524288 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_DOWN
Value:       8388608 (int)
Description: Spatial content flags.

Constant:    CONTENTS_CURRENT_UP
Value:       4194304 (int)
Description: Spatial content flags.

Constant:    CONTENTS_DEBRIS
Value:       67108864 (int)
Description: Spatial content flags.

Constant:    CONTENTS_DETAIL
Value:       134217728 (int)
Description: Spatial content flags.

Constant:    CONTENTS_EMPTY
Value:       0 (int)
Description: Spatial content flags.

Constant:    CONTENTS_GRATE
Value:       8 (int)
Description: Spatial content flags.

Constant:    CONTENTS_HITBOX
Value:       1073741824 (int)
Description: Spatial content flags.

Constant:    CONTENTS_IGNORE_NODRAW_OPAQUE
Value:       8192 (int)
Description: Spatial content flags.

Constant:    CONTENTS_LADDER
Value:       536870912 (int)
Description: Spatial content flags.

Constant:    CONTENTS_MONSTER
Value:       33554432 (int)
Description: Spatial content flags.

Constant:    CONTENTS_MONSTERCLIP
Value:       131072 (int)
Description: Spatial content flags.

Constant:    CONTENTS_MOVEABLE
Value:       16384 (int)
Description: Spatial content flags.

Constant:    CONTENTS_OPAQUE
Value:       128 (int)
Description: Spatial content flags.

Constant:    CONTENTS_ORIGIN
Value:       16777216 (int)
Description: Spatial content flags.

Constant:    CONTENTS_PLAYERCLIP
Value:       65536 (int)
Description: Spatial content flags.

Constant:    CONTENTS_SLIME
Value:       16 (int)
Description: Spatial content flags.

Constant:    CONTENTS_SOLID
Value:       1 (int)
Description: Spatial content flags.

Constant:    CONTENTS_TEAM1
Value:       2048 (int)
Description: Spatial content flags.

Constant:    CONTENTS_TEAM2
Value:       4096 (int)
Description: Spatial content flags.

Constant:    CONTENTS_TESTFOGVOLUME
Value:       256 (int)
Description: Spatial content flags.

Constant:    CONTENTS_TRANSLUCENT
Value:       268435456 (int)
Description: Spatial content flags.

Constant:    CONTENTS_WATER
Value:       32 (int)
Description: Spatial content flags.

Constant:    CONTENTS_WINDOW
Value:       2 (int)
Description: Spatial content flags.

Constant:    CursorCode.dc_arrow
Value:       2

Constant:    CursorCode.dc_blank
Value:       15

Constant:    CursorCode.dc_crosshair
Value:       6

Constant:    CursorCode.dc_hand
Value:       14

Constant:    CursorCode.dc_hourglass
Value:       4

Constant:    CursorCode.dc_ibeam
Value:       3

Constant:    CursorCode.dc_no
Value:       13

Constant:    CursorCode.dc_none
Value:       1

Constant:    CursorCode.dc_sizeall
Value:       12

Constant:    CursorCode.dc_sizenesw
Value:       9

Constant:    CursorCode.dc_sizens
Value:       11

Constant:    CursorCode.dc_sizenwse
Value:       8

Constant:    CursorCode.dc_sizewe
Value:       10

Constant:    CursorCode.dc_up
Value:       7

Constant:    CursorCode.dc_waitarrow
Value:       5

Constant:    DAMAGE_AIM
Value:       3 (int)
Description: (Use with GetTakeDamage/SetTakeDamage)

Constant:    DAMAGE_EVENTS_ONLY
Value:       1 (int)
Description: Call damage functions, but don't modify health (Use with GetTakeDamage/SetTakeDamage)

Constant:    DAMAGE_NO
Value:       0 (int)
Description: Don't take damage (Use with GetTakeDamage/SetTakeDamage)

Constant:    DAMAGE_YES
Value:       2 (int)
Description: Allow damage to be taken (Use with GetTakeDamage/SetTakeDamage)

Constant:    DEG2RAD
Value:       0.017453 (float)

Constant:    DMG_ACID
Value:       1048576 (int)
Description: Damage type used in damage information.

Constant:    DMG_AIRBOAT
Value:       33554432 (int)
Description: Damage type used in damage information.

Constant:    DMG_ALWAYSGIB
Value:       8192 (int)
Description: Damage type used in damage information.

Constant:    DMG_BLAST
Value:       64 (int)
Description: Damage type used in damage information.

Constant:    DMG_BLAST_SURFACE
Value:       134217728 (int)
Description: Damage type used in damage information.

Constant:    DMG_BUCKSHOT
Value:       536870912 (int)
Description: Damage type used in damage information.

Constant:    DMG_BULLET
Value:       2 (int)
Description: Damage type used in damage information.

Constant:    DMG_BURN
Value:       8 (int)
Description: Damage type used in damage information.

Constant:    DMG_CLUB
Value:       128 (int)
Description: Damage type used in damage information.

Constant:    DMG_CRUSH
Value:       1 (int)
Description: Damage type used in damage information.

Constant:    DMG_DIRECT
Value:       268435456 (int)
Description: Damage type used in damage information.

Constant:    DMG_DISSOLVE
Value:       67108864 (int)
Description: Damage type used in damage information.

Constant:    DMG_DROWN
Value:       16384 (int)
Description: Damage type used in damage information.

Constant:    DMG_DROWNRECOVER
Value:       524288 (int)
Description: Damage type used in damage information.

Constant:    DMG_ENERGYBEAM
Value:       1024 (int)
Description: Damage type used in damage information.

Constant:    DMG_FALL
Value:       32 (int)
Description: Damage type used in damage information.

Constant:    DMG_GENERIC
Value:       0 (int)
Description: Damage type used in damage information.

Constant:    DMG_NERVEGAS
Value:       65536 (int)
Description: Damage type used in damage information.

Constant:    DMG_NEVERGIB
Value:       4096 (int)
Description: Damage type used in damage information.

Constant:    DMG_PARALYZE
Value:       32768 (int)
Description: Damage type used in damage information.

Constant:    DMG_PHYSGUN
Value:       8388608 (int)
Description: Damage type used in damage information.

Constant:    DMG_PLASMA
Value:       16777216 (int)
Description: Damage type used in damage information.

Constant:    DMG_POISON
Value:       131072 (int)
Description: Damage type used in damage information.

Constant:    DMG_PREVENT_PHYSICS_FORCE
Value:       2048 (int)
Description: Damage type used in damage information.

Constant:    DMG_RADIATION
Value:       262144 (int)
Description: Damage type used in damage information.

Constant:    DMG_REMOVENORAGDOLL
Value:       4194304 (int)
Description: Damage type used in damage information.

Constant:    DMG_SHOCK
Value:       256 (int)
Description: Damage type used in damage information.

Constant:    DMG_SLASH
Value:       4 (int)
Description: Damage type used in damage information.

Constant:    DMG_SLOWBURN
Value:       2097152 (int)
Description: Damage type used in damage information.

Constant:    DMG_SONIC
Value:       512 (int)
Description: Damage type used in damage information.

Constant:    DMG_VEHICLE
Value:       16 (int)
Description: Damage type used in damage information.

Constant:    EFL_BOT_FROZEN
Value:       256 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_CHECK_UNTOUCH
Value:       16777216 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_ABSANGVELOCITY
Value:       8192 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_ABSTRANSFORM
Value:       2048 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_ABSVELOCITY
Value:       4096 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_SHADOWUPDATE
Value:       32 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_SPATIAL_PARTITION
Value:       32768 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS
Value:       16384 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DONTBLOCKLOS
Value:       33554432 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DONTWALKON
Value:       67108864 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_DORMANT
Value:       2 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_FORCE_CHECK_TRANSMIT
Value:       128 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_HAS_PLAYER_CHILD
Value:       16 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_IN_SKYBOX
Value:       131072 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_IS_BEING_LIFTED_BY_BARNACLE
Value:       1048576 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_KEEP_ON_RECREATE_ENTITIES
Value:       16 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_KILLME
Value:       1 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NOCLIP_ACTIVE
Value:       4 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NOTIFY
Value:       64 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_AUTO_EDICT_ATTACH
Value:       1024 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_DAMAGE_FORCES
Value:       -2147483648 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_DISSOLVE
Value:       134217728 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_GAME_PHYSICS_SIMULATION
Value:       8388608 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_MEGAPHYSCANNON_RAGDOLL
Value:       268435456 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_PHYSCANNON_INTERACTION
Value:       1073741824 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_ROTORWASH_PUSH
Value:       2097152 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_THINK_FUNCTION
Value:       4194304 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_NO_WATER_VELOCITY_CHANGE
Value:       536870912 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_PLUGIN_BASED_BOT
Value:       65536 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_SERVER_ONLY
Value:       512 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_SETTING_UP_BONES
Value:       8 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_TOUCHING_FLUID
Value:       524288 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EFL_USE_PARTITION_WHEN_NOT_SOLID
Value:       262144 (int)
Description: Entity flag used in GetEFlags(), etc.

Constant:    EF_BONEMERGE
Value:       1 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_BONEMERGE_FASTCULL
Value:       128 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_BRIGHTLIGHT
Value:       2 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_DIMLIGHT
Value:       4 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_ITEM_BLINK
Value:       256 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_NODRAW
Value:       32 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_NOINTERP
Value:       8 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_NORECEIVESHADOW
Value:       64 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_NOSHADOW
Value:       16 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    EF_PARENT_ANIMATES
Value:       512 (int)
Description: Effect flag used in GetEffects(), etc.

Constant:    FCVAR_ACCESSIBLE_FROM_THREADS
Value:       33554432 (int)
Description: If this convar flag is set, it will be accessible from the material system thread.

Constant:    FCVAR_ARCHIVE
Value:       128 (int)
Description: If this convar flag is set, its value will be saved when the game is exited.

Constant:    FCVAR_ARCHIVE_XBOX
Value:       16777216 (int)
Description: If this convar flag is set, it will be archived on the Xbox config.

Constant:    FCVAR_CHEAT
Value:       16384 (int)
Description: Only useable in singleplayer / debug / multiplayer & sv_cheats

Constant:    FCVAR_CLIENTCMD_CAN_EXECUTE
Value:       1073741824 (int)
Description: If this convar flag is set, any client will be allowed to execute this command.

Constant:    FCVAR_CLIENTDLL
Value:       8 (int)
Description: This convar flag is defined in client DLL convars.

Constant:    FCVAR_DEMO
Value:       65536 (int)
Description: If this convar flag is set, it will be recorded when starting a demo file.

Constant:    FCVAR_DEVELOPMENTONLY
Value:       2 (int)
Description: If this convar flag is set, it's hidden in "retail" DLLs.

Constant:    FCVAR_DONTRECORD
Value:       131072 (int)
Description: If this convar flag is set, it will NOT be recorded when starting a demo file.

Constant:    FCVAR_GAMEDLL
Value:       4 (int)
Description: This convar flag is defined in server DLL convars.

Constant:    FCVAR_HIDDEN
Value:       16 (int)
Description: If this convar flag is set, it doesn't appear in the console or any searching tools, but it can still be set.

Constant:    FCVAR_MATERIAL_SYSTEM_THREAD
Value:       8388608 (int)
Description: This convar flag indicates it's read from the material system thread.

Constant:    FCVAR_NEVER_AS_STRING
Value:       4096 (int)
Description: If this convar flag is set, it will never be printed as a string.

Constant:    FCVAR_NONE
Value:       0 (int)
Description: Empty convar flag.

Constant:    FCVAR_NOTIFY
Value:       256 (int)
Description: If this convar flag is set, it will notify players when it is changed.

Constant:    FCVAR_NOT_CONNECTED
Value:       4194304 (int)
Description: If this convar flag is set, it cannot be changed by a client connected to the server.

Constant:    FCVAR_PRINTABLEONLY
Value:       1024 (int)
Description: If this convar flag is set, it cannot contain unprintable characters. Used for player name cvars, etc.

Constant:    FCVAR_PROTECTED
Value:       32 (int)
Description: This convar flag prevents convars with secure data (e.g. passwords) from sending full data to clients, only sending 1 if non-zero and 0 otherwise.

Constant:    FCVAR_RELOAD_MATERIALS
Value:       1048576 (int)
Description: If this convar flag is set, it will force a material reload when it changes.

Constant:    FCVAR_RELOAD_TEXTURES
Value:       2097152 (int)
Description: If this convar flag is set, it will force a texture reload when it changes.

Constant:    FCVAR_REPLICATED
Value:       8192 (int)
Description: If this convar flag is set, it will enforce a serverside value on any clientside counterparts. (also known as FCVAR_SERVER)

Constant:    FCVAR_SERVER_CANNOT_QUERY
Value:       536870912 (int)
Description: If this convar flag is set, the server will not be allowed to query its value.

Constant:    FCVAR_SERVER_CAN_EXECUTE
Value:       268435456 (int)
Description: If this convar flag is set, the server will be allowed to execute it as a client command.

Constant:    FCVAR_SPONLY
Value:       64 (int)
Description: If this convar flag is set, it can't be changed by clients connected to a multiplayer server.

Constant:    FCVAR_UNLOGGED
Value:       2048 (int)
Description: If this convar flag is set, it will not log its changes if a log is being created.

Constant:    FCVAR_UNREGISTERED
Value:       1 (int)
Description: If this convar flag is set, it isn't added to linked list, etc.

Constant:    FCVAR_USERINFO
Value:       512 (int)
Description: If this convar flag is set, it will be marked as info which plays a part in how the server identifies a client.

Constant:    FL_AIMTARGET
Value:       131072 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_ATCONTROLS
Value:       128 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_BASEVELOCITY
Value:       16777216 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_CLIENT
Value:       256 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_CONVEYOR
Value:       8192 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_DISSOLVING
Value:       536870912 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_DONTTOUCH
Value:       8388608 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_DUCKING
Value:       2 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_FAKECLIENT
Value:       512 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_FLY
Value:       2048 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_FROZEN
Value:       64 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_GODMODE
Value:       32768 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_GRAPHED
Value:       1048576 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_GRENADE
Value:       2097152 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_INRAIN
Value:       32 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_INWATER
Value:       1024 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_KILLME
Value:       134217728 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_NOTARGET
Value:       65536 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_NPC
Value:       16384 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_OBJECT
Value:       67108864 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_ONFIRE
Value:       268435456 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_ONGROUND
Value:       1 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_ONTRAIN
Value:       16 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_PARTIALGROUND
Value:       262144 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_STATICPROP
Value:       524288 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_STEPMOVEMENT
Value:       4194304 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_SWIM
Value:       4096 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_TRANSRAGDOLL
Value:       1073741824 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_UNBLOCKABLE_BY_PLAYER
Value:       -2147483648 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_WATERJUMP
Value:       8 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FL_WORLDBRUSH
Value:       33554432 (int)
Description: Flag used in GetFlags(), etc.

Constant:    FSOLID_COLLIDE_WITH_OWNER
Value:       1024 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_CUSTOMBOXTEST
Value:       2 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_CUSTOMRAYTEST
Value:       1 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_FORCE_WORLD_ALIGNED
Value:       64 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_NOT_SOLID
Value:       4 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_NOT_STANDABLE
Value:       16 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_ROOT_PARENT_ALIGNED
Value:       256 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_TRIGGER
Value:       8 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_TRIGGER_TOUCH_DEBRIS
Value:       512 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_USE_TRIGGER_BOUNDS
Value:       128 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    FSOLID_VOLUME_CONTENTS
Value:       32 (int)
Description: Solid flag used in GetSolidFlags(), etc.

Constant:    GENDER_FEMALE
Value:       2 (int)
Description: A standard value used to represent female gender. Usually used for sounds.

Constant:    GENDER_MALE
Value:       1 (int)
Description: A standard value used to represent male gender. Usually used for sounds.

Constant:    GENDER_NONE
Value:       0 (int)
Description: A standard value used to represent no specific gender. Usually used for sounds.

Constant:    Hitgroup.Chest
Value:       2 (int)

Constant:    Hitgroup.Gear
Value:       10 (int)

Constant:    Hitgroup.Generic
Value:       0 (int)

Constant:    Hitgroup.Head
Value:       1 (int)

Constant:    Hitgroup.LeftArm
Value:       4 (int)

Constant:    Hitgroup.LeftLeg
Value:       6 (int)

Constant:    Hitgroup.RightArm
Value:       5 (int)

Constant:    Hitgroup.RightLeg
Value:       7 (int)

Constant:    Hitgroup.Stomach
Value:       3 (int)

Constant:    IN.ALT1
Value:       16384 (int)
Description: Button for +alt1

Constant:    IN.ALT2
Value:       32768 (int)
Description: Button for +alt2

Constant:    IN.ATTACK
Value:       1 (int)
Description: Button for +attack

Constant:    IN.ATTACK2
Value:       2048 (int)
Description: Button for +attack2

Constant:    IN.ATTACK3
Value:       33554432 (int)
Description: Button for +attack3

Constant:    IN.BACK
Value:       16 (int)
Description: Button for +back

Constant:    IN.BULLRUSH
Value:       4194304 (int)
Description: Unused button

Constant:    IN.CANCEL
Value:       64 (int)
Description: Special button flag for attack cancel

Constant:    IN.DUCK
Value:       4 (int)
Description: Button for +duck

Constant:    IN.FORWARD
Value:       8 (int)
Description: Button for +forward

Constant:    IN.GRENADE1
Value:       8388608 (int)
Description: Button for +grenade1

Constant:    IN.GRENADE2
Value:       16777216 (int)
Description: Button for +grenade2

Constant:    IN.JUMP
Value:       2 (int)
Description: Button for +jump

Constant:    IN.LEFT
Value:       128 (int)
Description: Button for +left

Constant:    IN.MOVELEFT
Value:       512 (int)
Description: Button for +moveleft

Constant:    IN.MOVERIGHT
Value:       1024 (int)
Description: Button for +moveright

Constant:    IN.RELOAD
Value:       8192 (int)
Description: Button for +reload

Constant:    IN.RIGHT
Value:       256 (int)
Description: Button for +right

Constant:    IN.RUN
Value:       4096 (int)
Description: Unused button (see IN.SPEED for sprint)

Constant:    IN.SCORE
Value:       65536 (int)
Description: Button for +score

Constant:    IN.SPEED
Value:       131072 (int)
Description: Button for +speed

Constant:    IN.USE
Value:       32 (int)
Description: Button for +use

Constant:    IN.WALK
Value:       262144 (int)
Description: Button for +walk

Constant:    IN.WEAPON1
Value:       1048576 (int)
Description: Special button used by weapons themselves

Constant:    IN.WEAPON2
Value:       2097152 (int)
Description: Special button used by weapons themselves

Constant:    IN.ZOOM
Value:       524288 (int)
Description: Button for +zoom

Constant:    LAST_VISIBLE_CONTENTS
Value:       128 (int)
Description: Contains last visible spatial content flags.

Constant:    MAPBASE_VERSION
Value:       "7.1" (string)
Description: The current Mapbase version according to when the VScript library was last compiled.

Constant:    MAPBASE_VER_INT
Value:       7100 (int)
Description: The current Mapbase version integer according to when the VScript library was last compiled.

Constant:    MASK_BLOCKLOS
Value:       16449 (int)
Description: Spatial content mask representing objects which block LOS for AI (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_BLOCKLOS)

Constant:    MASK_BLOCKLOS_AND_NPCS
Value:       33570881 (int)
Description: Spatial content mask equivalent to MASK_BLOCKLOS, but also including NPCs (MASK_BLOCKLOS|CONTENTS_MONSTER)

Constant:    MASK_NPCSOLID
Value:       33701899 (int)
Description: Spatial content mask representing objects solid to NPCs, including NPC clips (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_MONSTERCLIP|CONTENTS_WINDOW|CONTENTS_MONSTER|CONTENTS_GRATE)

Constant:    MASK_NPCSOLID_BRUSHONLY
Value:       147467 (int)
Description: Spatial content mask equivalent to MASK_NPCSOLID, but without NPCs (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_MONSTERCLIP|CONTENTS_GRATE)

Constant:    MASK_NPCWORLDSTATIC
Value:       131083 (int)
Description: Spatial content mask representing objects static to NPCs, used for nodegraph rebuilding (CONTENTS_SOLID|CONTENTS_WINDOW|CONTENTS_MONSTERCLIP|CONTENTS_GRATE)

Constant:    MASK_OPAQUE
Value:       16513 (int)
Description: Spatial content mask representing objects which block lighting (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_OPAQUE)

Constant:    MASK_OPAQUE_AND_NPCS
Value:       33570945 (int)
Description: Spatial content mask equivalent to MASK_OPAQUE, but also including NPCs (MASK_OPAQUE|CONTENTS_MONSTER)

Constant:    MASK_PLAYERSOLID
Value:       33636363 (int)
Description: Spatial content mask representing objects solid to the player, including player clips (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_PLAYERCLIP|CONTENTS_WINDOW|CONTENTS_MONSTER|CONTENTS_GRATE)

Constant:    MASK_PLAYERSOLID_BRUSHONLY
Value:       81931 (int)
Description: Spatial content mask equivalent to MASK_PLAYERSOLID, but without NPCs (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_PLAYERCLIP|CONTENTS_GRATE)

Constant:    MASK_SHOT
Value:       1174421507 (int)
Description: Spatial content mask representing objects solid to bullets (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_MONSTER|CONTENTS_WINDOW|CONTENTS_DEBRIS|CONTENTS_HITBOX)

Constant:    MASK_SHOT_HULL
Value:       100679691 (int)
Description: Spatial content mask representing objects solid to non-raycasted weapons, including grates (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_MONSTER|CONTENTS_WINDOW|CONTENTS_DEBRIS|CONTENTS_GRATE)

Constant:    MASK_SHOT_PORTAL
Value:       33570819 (int)
Description: Spatial content mask equivalent to MASK_SHOT, but excluding debris and not using expensive hitbox calculations (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_MONSTER)

Constant:    MASK_SOLID
Value:       33570827 (int)
Description: Spatial content mask representing solid objects (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_MONSTER|CONTENTS_GRATE)

Constant:    MASK_SOLID_BRUSHONLY
Value:       16395 (int)
Description: Spatial content mask equivalent to MASK_SOLID, but without NPCs (CONTENTS_SOLID|CONTENTS_MOVEABLE|CONTENTS_WINDOW|CONTENTS_GRATE)

Constant:    MASK_SPLITAREAPORTAL
Value:       48 (int)
Description: Spatial content mask representing objects which can split areaportals (CONTENTS_WATER|CONTENTS_SLIME)

Constant:    MASK_VISIBLE
Value:       24705 (int)
Description: Spatial content mask representing objects which block LOS for players (MASK_OPAQUE|CONTENTS_IGNORE_NODRAW_OPAQUE)

Constant:    MASK_VISIBLE_AND_NPCS
Value:       33579137 (int)
Description: Spatial content mask equivalent to MASK_VISIBLE, but also including NPCs (MASK_OPAQUE_AND_NPCS|CONTENTS_IGNORE_NODRAW_OPAQUE)

Constant:    MASK_WATER
Value:       16432 (int)
Description: Spatial content mask representing water and slime solids (CONTENTS_WATER|CONTENTS_MOVEABLE|CONTENTS_SLIME)

Constant:    MAX_COORD_FLOAT
Value:       16384.000000 (float)
Description: Maximum float coordinate.

Constant:    MAX_TRACE_LENGTH
Value:       56755.839844 (float)
Description: Maximum traceable distance (assumes cubic world and trace from one corner to opposite).

Constant:    MOVETYPE_CUSTOM
Value:       11 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_FLY
Value:       4 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_FLYGRAVITY
Value:       5 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_ISOMETRIC
Value:       1 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_LADDER
Value:       9 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_NOCLIP
Value:       8 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_NONE
Value:       0 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_OBSERVER
Value:       10 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_PUSH
Value:       7 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_STEP
Value:       3 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_VPHYSICS
Value:       6 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MOVETYPE_WALK
Value:       2 (int)
Description: Move type used in GetMoveType(), etc.

Constant:    MapLoad.Background
Value:       3 (int)
Description: Map was loaded as a background map

Constant:    MapLoad.LoadGame
Value:       1 (int)
Description: Map was loaded from a save file

Constant:    MapLoad.NewGame
Value:       0 (int)
Description: Map was loaded from a new game

Constant:    MapLoad.Transition
Value:       2 (int)
Description: Map was loaded from a level transition

Constant:    PITCH_HIGH
Value:       120 (int)
Description: The standard high pitch value.

Constant:    PITCH_LOW
Value:       95 (int)
Description: The standard low pitch value.

Constant:    PITCH_NORM
Value:       100 (int)
Description: The standard pitch value.

Constant:    RAD2DEG
Value:       57.295780 (float)

Constant:    ROPE_BARBED
Value:       2 (int)
Description: Hack option to draw like a barbed wire. (for use in rope flags)

Constant:    ROPE_BREAKABLE
Value:       16 (int)
Description: Can the endpoints detach? (for use in rope flags)

Constant:    ROPE_COLLIDE
Value:       4 (int)
Description: Collide with the world. (for use in rope flags)

Constant:    ROPE_GRAVITY
Value:       Vector( 0.000000, 0.000000, 0.000000 ) (Vector)
Description: Default rope gravity vector.

Constant:    ROPE_INITIAL_HANG
Value:       64 (int)
Description: By default, ropes will simulate for a bit internally when they are created so they sag, but dynamically created ropes for things like harpoons don't want this. (for use in rope flags)

Constant:    ROPE_NO_GRAVITY
Value:       256 (int)
Description: Disable gravity on this rope. (for use in rope flags)

Constant:    ROPE_NUMFLAGS
Value:       9 (int)
Description: The number of rope flags recognized by the game.

Constant:    ROPE_PLAYER_WPN_ATTACH
Value:       128 (int)
Description: If this flag is set, then the second attachment must be a player. The rope will attach to "buff_attach" on the player's active weapon. This is a flag because it requires special code on the client to find the weapon. (for use in rope flags)

Constant:    ROPE_RESIZE
Value:       1 (int)
Description: Try to keep the rope dangling the same amount even as the rope length changes. (for use in rope flags)

Constant:    ROPE_SIMULATE
Value:       8 (int)
Description: Is the rope valid? (for use in rope flags)

Constant:    ROPE_USE_WIND
Value:       32 (int)
Description: Wind simulation on this rope. (for use in rope flags)

Constant:    RenderMode.Additive
Value:       5 (int)

Constant:    RenderMode.AdditiveFractionalFrame
Value:       7 (int)

Constant:    RenderMode.AlphaAdd
Value:       8 (int)

Constant:    RenderMode.Color
Value:       1 (int)

Constant:    RenderMode.Environmental
Value:       6 (int)

Constant:    RenderMode.Glow
Value:       3 (int)

Constant:    RenderMode.None
Value:       10 (int)

Constant:    RenderMode.Normal
Value:       0 (int)

Constant:    RenderMode.Solid
Value:       4 (int)

Constant:    RenderMode.Texture
Value:       2 (int)

Constant:    RenderMode.WorldSpaceGlow
Value:       9 (int)

Constant:    SERVER_DLL
Value:       0 (int)

Constant:    SNDLVL_100dB
Value:       100 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_105dB
Value:       105 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_110dB
Value:       110 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_120dB
Value:       120 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_130dB
Value:       130 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_140dB
Value:       140 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_150dB
Value:       150 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_180dB
Value:       180 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_20dB
Value:       20 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_25dB
Value:       25 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_30dB
Value:       30 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_35dB
Value:       35 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_40dB
Value:       40 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_45dB
Value:       45 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_50dB
Value:       50 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_55dB
Value:       55 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_60dB
Value:       60 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_65dB
Value:       65 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_70dB
Value:       70 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_75dB
Value:       75 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_80dB
Value:       80 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_85dB
Value:       85 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_90dB
Value:       90 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_95dB
Value:       95 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_GUNFIRE
Value:       140 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_IDLE
Value:       60 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_NONE
Value:       0 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_NORM
Value:       75 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_STATIC
Value:       66 (int)
Description: A standard value used for a sound's sound level.

Constant:    SNDLVL_TALKING
Value:       80 (int)
Description: A standard value used for a sound's sound level.

Constant:    SND_CHANGE_PITCH
Value:       2 (int)
Description: Indicates a sound is a pitch change to an already-playing sound.

Constant:    SND_CHANGE_VOL
Value:       1 (int)
Description: Indicates a sound is a volume change to an already-playing sound.

Constant:    SND_DELAY
Value:       16 (int)
Description: Indicates a sound has an initial delay.

Constant:    SND_DO_NOT_OVERWRITE_EXISTING_ON_CHANNEL
Value:       1024 (int)
Description: Prevents a sound from interrupting other sounds on a channel (if the channel supports interruption).

Constant:    SND_IGNORE_NAME
Value:       512 (int)
Description: Used to change all sounds emitted by an entity, regardless of name.

Constant:    SND_IGNORE_PHONEMES
Value:       256 (int)
Description: Prevents the entity emitting this sound from using its phonemes (no lip-syncing).

Constant:    SND_SHOULDPAUSE
Value:       128 (int)
Description: Forces a sound to pause if the game is paused.

Constant:    SND_SPAWNING
Value:       8 (int)
Description: Indicates a sound is spawning, used in some cases for ambients. Not networked.

Constant:    SND_SPEAKER
Value:       64 (int)
Description: Indicates a sound is being played again by a microphone through a speaker.

Constant:    SND_STOP
Value:       4 (int)
Description: Indicates a sound is stopping an already-playing sound.

Constant:    SND_STOP_LOOPING
Value:       32 (int)
Description: Stops all looping sounds on an entity.

Constant:    VECTOR_CONE_10DEGREES
Value:       Vector( 0.087160, 0.087160, 0.087160 ) (Vector)
Description: 10-degree weapon vector cone.

Constant:    VECTOR_CONE_15DEGREES
Value:       Vector( 0.130530, 0.130530, 0.130530 ) (Vector)
Description: 15-degree weapon vector cone.

Constant:    VECTOR_CONE_1DEGREES
Value:       Vector( 0.008730, 0.008730, 0.008730 ) (Vector)
Description: 1-degree weapon vector cone.

Constant:    VECTOR_CONE_20DEGREES
Value:       Vector( 0.173650, 0.173650, 0.173650 ) (Vector)
Description: 20-degree weapon vector cone.

Constant:    VECTOR_CONE_2DEGREES
Value:       Vector( 0.017450, 0.017450, 0.017450 ) (Vector)
Description: 2-degree weapon vector cone.

Constant:    VECTOR_CONE_3DEGREES
Value:       Vector( 0.026180, 0.026180, 0.026180 ) (Vector)
Description: 3-degree weapon vector cone.

Constant:    VECTOR_CONE_4DEGREES
Value:       Vector( 0.034900, 0.034900, 0.034900 ) (Vector)
Description: 4-degree weapon vector cone.

Constant:    VECTOR_CONE_5DEGREES
Value:       Vector( 0.043620, 0.043620, 0.043620 ) (Vector)
Description: 5-degree weapon vector cone.

Constant:    VECTOR_CONE_6DEGREES
Value:       Vector( 0.052340, 0.052340, 0.052340 ) (Vector)
Description: 6-degree weapon vector cone.

Constant:    VECTOR_CONE_7DEGREES
Value:       Vector( 0.061050, 0.061050, 0.061050 ) (Vector)
Description: 7-degree weapon vector cone.

Constant:    VECTOR_CONE_8DEGREES
Value:       Vector( 0.069760, 0.069760, 0.069760 ) (Vector)
Description: 8-degree weapon vector cone.

Constant:    VECTOR_CONE_9DEGREES
Value:       Vector( 0.078460, 0.078460, 0.078460 ) (Vector)
Description: 9-degree weapon vector cone.

Constant:    VECTOR_CONE_PRECALCULATED
Value:       Vector( 0.000000, 0.000000, 0.000000 ) (Vector)
Description: This is just a zero vector, but it adds some context indicating that the person writing the code is not allowing FireBullets() to modify the direction of the shot because the shot direction being passed into the function has already been modified by another piece of code and should be fired as specified.

Constant:    VOL_NORM
Value:       1.000000 (float)
Description: The standard volume value.

Constant:    WEAPON_PROFICIENCY_AVERAGE
Value:       1 (int)
Description: Average weapon proficiency. Causes average accuracy.

Constant:    WEAPON_PROFICIENCY_GOOD
Value:       2 (int)
Description: Good weapon proficiency. Causes good accuracy.

Constant:    WEAPON_PROFICIENCY_INVALID
Value:       -1 (int)
Description: Invalid weapon proficiency.

Constant:    WEAPON_PROFICIENCY_PERFECT
Value:       4 (int)
Description: Perfect weapon proficiency. Causes perfect accuracy.

Constant:    WEAPON_PROFICIENCY_POOR
Value:       0 (int)
Description: Poor weapon proficiency. Causes low accuracy.

Constant:    WEAPON_PROFICIENCY_VERY_GOOD
Value:       3 (int)
Description: Very good weapon proficiency. Causes very good accuracy.

Constant:    WEPCLASS_HANDGUN
Value:       1 (int)
Description: Weapon class for pistols, revolvers, etc.

Constant:    WEPCLASS_HEAVY
Value:       4 (int)
Description: Weapon class for RPGs, etc.

Constant:    WEPCLASS_INVALID
Value:       0 (int)
Description: Invalid weapon class.

Constant:    WEPCLASS_MELEE
Value:       5 (int)
Description: Weapon class for melee weapons.

Constant:    WEPCLASS_RIFLE
Value:       2 (int)
Description: Weapon class for (assault) rifles, SMGs, etc.

Constant:    WEPCLASS_SHOTGUN
Value:       3 (int)
Description: Weapon class for shotguns.

Constant:    WeaponSound.BURST
Value:       5 (int)

Constant:    WeaponSound.DEPLOY
Value:       15 (int)

Constant:    WeaponSound.DOUBLE_NPC
Value:       4 (int)

Constant:    WeaponSound.EMPTY
Value:       0 (int)

Constant:    WeaponSound.MELEE_HIT
Value:       9 (int)

Constant:    WeaponSound.MELEE_HIT_WORLD
Value:       10 (int)

Constant:    WeaponSound.MELEE_MISS
Value:       8 (int)

Constant:    WeaponSound.NUM_SHOOT_SOUND_TYPES
Value:       16 (int)

Constant:    WeaponSound.RELOAD
Value:       6 (int)

Constant:    WeaponSound.RELOAD_NPC
Value:       7 (int)

Constant:    WeaponSound.SINGLE
Value:       1 (int)

Constant:    WeaponSound.SINGLE_NPC
Value:       2 (int)

Constant:    WeaponSound.SPECIAL1
Value:       11 (int)

Constant:    WeaponSound.SPECIAL2
Value:       12 (int)

Constant:    WeaponSound.SPECIAL3
Value:       13 (int)

Constant:    WeaponSound.TAUNT
Value:       14 (int)

Constant:    WeaponSound.WPN_DOUBLE
Value:       3 (int)

=====================================
Class:       AvatarImage
Base:        IScriptVGUIObject
=====================================

=====================================
Class:       Button
Base:        IScriptVGUIObject
=====================================

=====================================
Class:       CAmmoDef
Base:
Description: The ammo type definition manager.
=====================================

=====================================
Class:       CConvars
Base:
Description: Provides an interface to convars.
=====================================

=====================================
Class:       CDebugOverlayScriptHelper
Base:
Description: CDebugOverlayScriptHelper
=====================================

=====================================
Class:       CEffects
Base:
=====================================

=====================================
Class:       CEntities
Base:
Description: The global list of entities
=====================================

=====================================
Class:       CGameRules
Base:
Description: The container of the game's rules, handling behavior which could be different on a game-by-game basis.
=====================================

=====================================
Class:       CGameTrace
Base:
Description: trace_t
=====================================

=====================================
Class:       CGlobalSys
Base:
Description: GlobalSys
=====================================

=====================================
Class:       CGlowObjectManager
Base:
=====================================

=====================================
Class:       CLocalize
Base:
Description: Accesses functions related to localization strings.
=====================================

=====================================
Class:       CMapbaseSystem
Base:
Description: All-purpose Mapbase system primarily used for map-specific files.
=====================================

=====================================
Class:       CNetMsg
Base:
Description: Network messages
=====================================

=====================================
Class:       CNetPropManager
Base:
Description: Allows reading and updating the network properties of an entity.
=====================================

=====================================
Class:       CScriptKeyValues
Base:
Description: Wrapper class over KeyValues instance
=====================================

=====================================
Class:       CScriptMaterialProxy
Base:
Description: Material proxy for VScript
=====================================

=====================================
Class:       CSteamAPI
Base:
=====================================

=====================================
Class:       CTakeDamageInfo
Base:
Description: Damage information handler.
=====================================

=====================================
Class:       CUserCmd
Base:
=====================================

=====================================
Class:       C_BaseAnimating
Base:        C_BaseEntity
Description: Animating models client-side
=====================================

=====================================
Class:       C_BaseCombatCharacter
Base:        C_BaseEntity
=====================================

=====================================
Class:       C_BaseCombatWeapon
Base:        C_BaseAnimating
Description: The base class for all equippable weapons.
=====================================

=====================================
Class:       C_BaseEntity
Base:
Description: Root class of all client-side entities
=====================================

=====================================
Class:       C_BaseGrenade
Base:        C_BaseAnimating
Description: The base class for grenades.
=====================================

=====================================
Class:       C_ClientRagdoll
Base:        C_BaseAnimating
Description: Client-side ragdolls
=====================================

=====================================
Class:       C_PointCommentaryNode
Base:        C_BaseAnimating
Description: Commentary nodes which play commentary in commentary mode.
=====================================

=====================================
Class:       C_RopeKeyframe
Base:        C_BaseEntity
Description: The clientside class of move_rope and keyframe_rope
=====================================

=====================================
Class:       C_WeaponCustomScripted
Base:        C_BaseCombatWeapon
Description: Special weapon class with tons of hooks
=====================================

=====================================
Class:       Color
Base:
=====================================

=====================================
Class:       EmitSound_t
Base:
=====================================

=====================================
Class:       FireBulletsInfo_t
Base:
=====================================

=====================================
Class:       Frame
Base:        IScriptVGUIObject
=====================================

=====================================
Class:       IInput
Base:
=====================================

=====================================
Class:       IPhysicsObject
Base:
Description: VPhysics object class.
=====================================

=====================================
Class:       ISurface
Base:
=====================================

=====================================
Class:       IVGui
Base:
=====================================

=====================================
Class:       ImagePanel
Base:        IScriptVGUIObject
=====================================

=====================================
Class:       Label
Base:        IScriptVGUIObject
=====================================

=====================================
Class:       Panel
Base:        IScriptVGUIObject
=====================================

=====================================
Class:       Quaternion
Base:
Description: A quaternion.
=====================================

=====================================
Class:       RichText
Base:        IScriptVGUIObject
=====================================

=====================================
Class:       TextEntry
Base:        IScriptVGUIObject
=====================================

=====================================
Class:       Vector
Base:
Description: Basic 3-float Vector class.
=====================================

=====================================
Class:       cplane_t
Base:
=====================================

=====================================
Class:       csurface_t
Base:
=====================================

=====================================
Class:       matrix3x4_t
Base:
Description: A 3x4 matrix transform.
=====================================

=====================================
Class:       scriptanimevent_t
Base:
=====================================

=====================================
Class:       surfacedata_t
Base:
=====================================

Function:    AddPhysVelocity
Signature:   void AddPhysVelocity(handle, Vector, Vector)
Description: Adds physics velocity for the given VPhysics object

Function:    AngleDiff
Signature:   float AngleDiff(float, float)
Description: Returns the degrees difference between two yaw angles.

Function:    AngleDistance
Signature:   float AngleDistance(float, float)

Function:    AngleIMatrix
Signature:   void AngleIMatrix(Vector, Vector, handle)
Description: Sets the inverted angles and position of a matrix.

Function:    AngleMatrix
Signature:   void AngleMatrix(Vector, Vector, handle)
Description: Sets the angles and position of a matrix.

Function:    AngleNormalize
Signature:   float AngleNormalize(float)
Description: Clamps an angle to be in between -360 and 360.

Function:    AngleNormalizePositive
Signature:   float AngleNormalizePositive(float)
Description: Clamps an angle to be in between 0 and 360.

Function:    AngleVectors
Signature:   Vector AngleVectors(Vector)
Description: Turns an angle into a direction vector.

Function:    AnglesAreEqual
Signature:   bool AnglesAreEqual(float, float, float)
Description: Checks if two angles are equal based on a given tolerance value.

Function:    AppearsToBeANumber
Signature:   bool AppearsToBeANumber(string)
Description: Checks if the given string appears to be a number.

Function:    Approach
Signature:   float Approach(float, float, float)

Function:    ApproachAngle
Signature:   float ApproachAngle(float, float, float)
Description: Returns an angle which approaches the target angle from the input angle with the specified speed.

Function:    AvatarImage::AddTickSignal
Signature:   void AvatarImage::AddTickSignal(int)

Function:    AvatarImage::Destroy
Signature:   void AvatarImage::Destroy()

Function:    AvatarImage::DrawBox
Signature:   void AvatarImage::DrawBox(int, int, int, int, int, int, int, int, bool)

Function:    AvatarImage::DrawBoxFade
Signature:   void AvatarImage::DrawBoxFade(int, int, int, int, int, int, int, int, int, int, bool, bool)

Function:    AvatarImage::GetAlpha
Signature:   int AvatarImage::GetAlpha()

Function:    AvatarImage::GetChildren
Signature:   void AvatarImage::GetChildren(handle)

Function:    AvatarImage::GetName
Signature:   string AvatarImage::GetName()

Function:    AvatarImage::GetParent
Signature:   handle AvatarImage::GetParent()

Function:    AvatarImage::GetTall
Signature:   int AvatarImage::GetTall()

Function:    AvatarImage::GetWide
Signature:   int AvatarImage::GetWide()

Function:    AvatarImage::GetXPos
Signature:   int AvatarImage::GetXPos()

Function:    AvatarImage::GetYPos
Signature:   int AvatarImage::GetYPos()

Function:    AvatarImage::GetZPos
Signature:   int AvatarImage::GetZPos()

Function:    AvatarImage::HasFocus
Signature:   bool AvatarImage::HasFocus()

Function:    AvatarImage::IsCursorOver
Signature:   bool AvatarImage::IsCursorOver()

Function:    AvatarImage::IsEnabled
Signature:   bool AvatarImage::IsEnabled()

Function:    AvatarImage::IsVisible
Signature:   bool AvatarImage::IsVisible()

Function:    AvatarImage::IsWithin
Signature:   bool AvatarImage::IsWithin(int, int)

Function:    AvatarImage::MakePopup
Signature:   void AvatarImage::MakePopup()

Function:    AvatarImage::MakeReadyForUse
Signature:   void AvatarImage::MakeReadyForUse()

Function:    AvatarImage::MoveToFront
Signature:   void AvatarImage::MoveToFront()

Function:    AvatarImage::RequestFocus
Signature:   void AvatarImage::RequestFocus()

Function:    AvatarImage::SetAlpha
Signature:   void AvatarImage::SetAlpha(int)

Function:    AvatarImage::SetBgColor
Signature:   void AvatarImage::SetBgColor(int, int, int, int)

Function:    AvatarImage::SetCursor
Signature:   void AvatarImage::SetCursor(int)

Function:    AvatarImage::SetDefaultAvatar
Signature:   void AvatarImage::SetDefaultAvatar(string)

Function:    AvatarImage::SetEnabled
Signature:   void AvatarImage::SetEnabled(bool)

Function:    AvatarImage::SetFgColor
Signature:   void AvatarImage::SetFgColor(int, int, int, int)

Function:    AvatarImage::SetKeyBoardInputEnabled
Signature:   void AvatarImage::SetKeyBoardInputEnabled(bool)

Function:    AvatarImage::SetMouseInputEnabled
Signature:   void AvatarImage::SetMouseInputEnabled(bool)

Function:    AvatarImage::SetPaintBackgroundEnabled
Signature:   void AvatarImage::SetPaintBackgroundEnabled(bool)

Function:    AvatarImage::SetPaintBackgroundType
Signature:   void AvatarImage::SetPaintBackgroundType(int)

Function:    AvatarImage::SetPaintBorderEnabled
Signature:   void AvatarImage::SetPaintBorderEnabled(bool)

Function:    AvatarImage::SetPaintEnabled
Signature:   void AvatarImage::SetPaintEnabled(bool)

Function:    AvatarImage::SetParent
Signature:   void AvatarImage::SetParent(handle)

Function:    AvatarImage::SetPlayer
Signature:   void AvatarImage::SetPlayer(string, int)

Function:    AvatarImage::SetPlayerByIndex
Signature:   void AvatarImage::SetPlayerByIndex(int, int)

Function:    AvatarImage::SetPos
Signature:   void AvatarImage::SetPos(int, int)

Function:    AvatarImage::SetPostChildPaintEnabled
Signature:   void AvatarImage::SetPostChildPaintEnabled(bool)

Function:    AvatarImage::SetShouldScaleImage
Signature:   void AvatarImage::SetShouldScaleImage(bool)

Function:    AvatarImage::SetSize
Signature:   void AvatarImage::SetSize(int, int)

Function:    AvatarImage::SetTall
Signature:   void AvatarImage::SetTall(int)

Function:    AvatarImage::SetVisible
Signature:   void AvatarImage::SetVisible(bool)

Function:    AvatarImage::SetWide
Signature:   void AvatarImage::SetWide(int)

Function:    AvatarImage::SetZPos
Signature:   void AvatarImage::SetZPos(int)

Function:    Bias
Signature:   float Bias(float, float)
Description: The curve is biased towards 0 or 1 based on biasAmt, which is between 0 and 1.

Function:    Button::AddColorChange
Signature:   void Button::AddColorChange(int, int, int, int, int)

Function:    Button::AddTickSignal
Signature:   void Button::AddTickSignal(int)

Function:    Button::ClearColorChangeStream
Signature:   void Button::ClearColorChangeStream()

Function:    Button::Destroy
Signature:   void Button::Destroy()

Function:    Button::DrawBox
Signature:   void Button::DrawBox(int, int, int, int, int, int, int, int, bool)

Function:    Button::DrawBoxFade
Signature:   void Button::DrawBoxFade(int, int, int, int, int, int, int, int, int, int, bool, bool)

Function:    Button::ForceDepressed
Signature:   void Button::ForceDepressed(bool)

Function:    Button::GetAlpha
Signature:   int Button::GetAlpha()

Function:    Button::GetChildren
Signature:   void Button::GetChildren(handle)

Function:    Button::GetName
Signature:   string Button::GetName()

Function:    Button::GetParent
Signature:   handle Button::GetParent()

Function:    Button::GetTall
Signature:   int Button::GetTall()

Function:    Button::GetWide
Signature:   int Button::GetWide()

Function:    Button::GetXPos
Signature:   int Button::GetXPos()

Function:    Button::GetYPos
Signature:   int Button::GetYPos()

Function:    Button::GetZPos
Signature:   int Button::GetZPos()

Function:    Button::HasFocus
Signature:   bool Button::HasFocus()

Function:    Button::IsArmed
Signature:   bool Button::IsArmed()

Function:    Button::IsCursorOver
Signature:   bool Button::IsCursorOver()

Function:    Button::IsDepressed
Signature:   bool Button::IsDepressed()

Function:    Button::IsEnabled
Signature:   bool Button::IsEnabled()

Function:    Button::IsMouseClickEnabled
Signature:   bool Button::IsMouseClickEnabled(int)

Function:    Button::IsSelected
Signature:   bool Button::IsSelected()

Function:    Button::IsVisible
Signature:   bool Button::IsVisible()

Function:    Button::IsWithin
Signature:   bool Button::IsWithin(int, int)

Function:    Button::MakePopup
Signature:   void Button::MakePopup()

Function:    Button::MakeReadyForUse
Signature:   void Button::MakeReadyForUse()

Function:    Button::MoveToFront
Signature:   void Button::MoveToFront()

Function:    Button::RequestFocus
Signature:   void Button::RequestFocus()

Function:    Button::SetAllCaps
Signature:   void Button::SetAllCaps(bool)

Function:    Button::SetAlpha
Signature:   void Button::SetAlpha(int)

Function:    Button::SetArmed
Signature:   void Button::SetArmed(bool)

Function:    Button::SetArmedColor
Signature:   void Button::SetArmedColor(int, int, int, int, int, int, int, int)

Function:    Button::SetArmedSound
Signature:   void Button::SetArmedSound(string)

Function:    Button::SetAssociatedControl
Signature:   void Button::SetAssociatedControl(handle)

Function:    Button::SetBgColor
Signature:   void Button::SetBgColor(int, int, int, int)

Function:    Button::SetButtonActivationType
Signature:   void Button::SetButtonActivationType(int)

Function:    Button::SetCallback
Signature:   void Button::SetCallback(string, handle)

Function:    Button::SetCenterWrap
Signature:   void Button::SetCenterWrap(bool)

Function:    Button::SetContentAlignment
Signature:   void Button::SetContentAlignment(int)

Function:    Button::SetCursor
Signature:   void Button::SetCursor(int)

Function:    Button::SetDefaultColor
Signature:   void Button::SetDefaultColor(int, int, int, int, int, int, int, int)

Function:    Button::SetDepressedColor
Signature:   void Button::SetDepressedColor(int, int, int, int, int, int, int, int)

Function:    Button::SetDepressedSound
Signature:   void Button::SetDepressedSound(string)

Function:    Button::SetEnabled
Signature:   void Button::SetEnabled(bool)

Function:    Button::SetFgColor
Signature:   void Button::SetFgColor(int, int, int, int)

Function:    Button::SetFont
Signature:   void Button::SetFont(int)

Function:    Button::SetKeyBoardInputEnabled
Signature:   void Button::SetKeyBoardInputEnabled(bool)

Function:    Button::SetMouseClickEnabled
Signature:   void Button::SetMouseClickEnabled(int, bool)

Function:    Button::SetMouseInputEnabled
Signature:   void Button::SetMouseInputEnabled(bool)

Function:    Button::SetPaintBackgroundEnabled
Signature:   void Button::SetPaintBackgroundEnabled(bool)

Function:    Button::SetPaintBackgroundType
Signature:   void Button::SetPaintBackgroundType(int)

Function:    Button::SetPaintBorderEnabled
Signature:   void Button::SetPaintBorderEnabled(bool)

Function:    Button::SetPaintEnabled
Signature:   void Button::SetPaintEnabled(bool)

Function:    Button::SetParent
Signature:   void Button::SetParent(handle)

Function:    Button::SetPos
Signature:   void Button::SetPos(int, int)

Function:    Button::SetPostChildPaintEnabled
Signature:   void Button::SetPostChildPaintEnabled(bool)

Function:    Button::SetReleasedSound
Signature:   void Button::SetReleasedSound(string)

Function:    Button::SetSelected
Signature:   void Button::SetSelected(bool)

Function:    Button::SetSelectedColor
Signature:   void Button::SetSelectedColor(int, int, int, int, int, int, int, int)

Function:    Button::SetSize
Signature:   void Button::SetSize(int, int)

Function:    Button::SetTall
Signature:   void Button::SetTall(int)

Function:    Button::SetText
Signature:   void Button::SetText(string)

Function:    Button::SetTextInset
Signature:   void Button::SetTextInset(int, int)

Function:    Button::SetVisible
Signature:   void Button::SetVisible(bool)

Function:    Button::SetWide
Signature:   void Button::SetWide(int)

Function:    Button::SetWrap
Signature:   void Button::SetWrap(bool)

Function:    Button::SetZPos
Signature:   void Button::SetZPos(int)

Function:    Button::SizeToContents
Signature:   void Button::SizeToContents()

Function:    CAmmoDef::DamageForce
Signature:   float CAmmoDef::DamageForce(int)
Description: Gets the amount of force this ammo type deals.

Function:    CAmmoDef::DamageType
Signature:   int CAmmoDef::DamageType(int)
Description: Gets the type of damage this ammo type deals.

Function:    CAmmoDef::Flags
Signature:   int CAmmoDef::Flags(int)
Description: Gets the flags this ammo type uses.

Function:    CAmmoDef::GetNumAmmoTypes
Signature:   int CAmmoDef::GetNumAmmoTypes()
Description: Gets the number of ammo types which currently exist.

Function:    CAmmoDef::Index
Signature:   int CAmmoDef::Index(string)
Description: Gets the index of the specified ammo type name.

Function:    CAmmoDef::MaxCarry
Signature:   int CAmmoDef::MaxCarry(int)
Description: Gets the maximum amount of this ammo type which players should be able to carry.

Function:    CAmmoDef::MaxSplashSize
Signature:   int CAmmoDef::MaxSplashSize(int)
Description: Gets the maximum size of water splashes caused by impacts from this ammo type.

Function:    CAmmoDef::MinSplashSize
Signature:   int CAmmoDef::MinSplashSize(int)
Description: Gets the minimum size of water splashes caused by impacts from this ammo type.

Function:    CAmmoDef::NPCDamage
Signature:   int CAmmoDef::NPCDamage(int)
Description: Gets the damage NPCs deal for the specified ammo type.

Function:    CAmmoDef::Name
Signature:   string CAmmoDef::Name(int)
Description: Gets the name of the specified ammo type index.

Function:    CAmmoDef::PlrDamage
Signature:   int CAmmoDef::PlrDamage(int)
Description: Gets the damage players deal for the specified ammo type.

Function:    CAmmoDef::TracerType
Signature:   int CAmmoDef::TracerType(int)
Description: Gets the type of tracer this ammo type uses.

Function:    CConvars::GetBool
Signature:   bool CConvars::GetBool(string)
Description: Returns the convar as a bool. May return null if no such convar.

Function:    CConvars::GetCommandClient
Signature:   handle CConvars::GetCommandClient()
Description: returns the player who issued this console command.

Function:    CConvars::GetDefaultValue
Signature:   string CConvars::GetDefaultValue(string)
Description: Returns the convar's default value as a string. May return null if no such convar.

Function:    CConvars::GetFloat
Signature:   float CConvars::GetFloat(string)
Description: Returns the convar as a float. May return null if no such convar.

Function:    CConvars::GetInt
Signature:   int CConvars::GetInt(string)
Description: Returns the convar as an int. May return null if no such convar.

Function:    CConvars::GetStr
Signature:   string CConvars::GetStr(string)
Description: Returns the convar as a string. May return null if no such convar.

Function:    CConvars::IsFlagSet
Signature:   bool CConvars::IsFlagSet(string, int)
Description: Returns the convar's flags. May return null if no such convar.

Function:    CConvars::RegisterCommand
Signature:   void CConvars::RegisterCommand(string, handle, string, int)
Description: register a console command.

Function:    CConvars::RegisterConvar
Signature:   void CConvars::RegisterConvar(string, string, string, int)
Description: register a new console variable.

Function:    CConvars::SetBool
Signature:   void CConvars::SetBool(string, bool)
Description: Sets the value of the convar as a bool.

Function:    CConvars::SetChangeCallback
Signature:   void CConvars::SetChangeCallback(string, handle)
Description: callback is called with 5 parameters (var, szOldValue, flOldValue, szNewValue, flNewValue)

Function:    CConvars::SetCompletionCallback
Signature:   void CConvars::SetCompletionCallback(string, handle)
Description: callback is called with 3 parameters (cmd, partial, commands), user strings must be appended to 'commands' array

Function:    CConvars::SetFloat
Signature:   void CConvars::SetFloat(string, float)
Description: Sets the value of the convar as a float.

Function:    CConvars::SetInt
Signature:   void CConvars::SetInt(string, int)
Description: Sets the value of the convar as an int.

Function:    CConvars::SetStr
Signature:   void CConvars::SetStr(string, string)
Description: Sets the value of the convar as a string.

Function:    CConvars::UnregisterCommand
Signature:   void CConvars::UnregisterCommand(string)
Description: unregister a console command.

Function:    CDebugOverlayScriptHelper::Axis
Signature:   void CDebugOverlayScriptHelper::Axis(Vector, Vector, float, bool, float)
Description: Draws an axis. Specify origin + orientation in world space.

Function:    CDebugOverlayScriptHelper::Box
Signature:   void CDebugOverlayScriptHelper::Box(Vector, Vector, Vector, int, int, int, int, float)
Description: Draws a world-space axis-aligned box. Specify bounds in world space.

Function:    CDebugOverlayScriptHelper::BoxAngles
Signature:   void CDebugOverlayScriptHelper::BoxAngles(Vector, Vector, Vector, Vector, int, int, int, int, float)
Description: Draws an oriented box at the origin. Specify bounds in local space.

Function:    CDebugOverlayScriptHelper::BoxDirection
Signature:   void CDebugOverlayScriptHelper::BoxDirection(Vector, Vector, Vector, Vector, int, int, int, int, float)
Description: Draw box oriented to a Vector direction

Function:    CDebugOverlayScriptHelper::Circle
Signature:   void CDebugOverlayScriptHelper::Circle(Vector, Vector, Vector, float, int, int, int, int, bool, float)
Description: Draws a circle. Specify center in world space.

Function:    CDebugOverlayScriptHelper::CircleOriented
Signature:   void CDebugOverlayScriptHelper::CircleOriented(Vector, Vector, float, int, int, int, int, bool, float)
Description: Draws a circle oriented. Specify center in world space.

Function:    CDebugOverlayScriptHelper::ClearAllOverlays
Signature:   void CDebugOverlayScriptHelper::ClearAllOverlays()
Description: Clear all debug overlays at once

Function:    CDebugOverlayScriptHelper::Cross3D
Signature:   void CDebugOverlayScriptHelper::Cross3D(Vector, float, int, int, int, bool, float)
Description: Draws a world-aligned cross. Specify origin in world space.

Function:    CDebugOverlayScriptHelper::Cross3DOriented
Signature:   void CDebugOverlayScriptHelper::Cross3DOriented(Vector, Vector, float, int, int, int, bool, float)
Description: Draws an oriented cross. Specify origin in world space.

Function:    CDebugOverlayScriptHelper::DrawTickMarkedLine
Signature:   void CDebugOverlayScriptHelper::DrawTickMarkedLine(Vector, Vector, float, int, int, int, int, bool, float)
Description: Draws a dashed line. Specify endpoints in world space.

Function:    CDebugOverlayScriptHelper::EntityBounds
Signature:   void CDebugOverlayScriptHelper::EntityBounds(handle, int, int, int, int, float)
Description: Draws bounds of an entity

Function:    CDebugOverlayScriptHelper::EntityText
Signature:   void CDebugOverlayScriptHelper::EntityText(int, int, string, float, int, int, int, int)
Description: Draws text on an entity

Function:    CDebugOverlayScriptHelper::EntityTextAtPosition
Signature:   void CDebugOverlayScriptHelper::EntityTextAtPosition(Vector, int, string, float, int, int, int, int)
Description: Draw entity text overlay at a specific position

Function:    CDebugOverlayScriptHelper::Grid
Signature:   void CDebugOverlayScriptHelper::Grid(Vector)
Description: Add grid overlay

Function:    CDebugOverlayScriptHelper::HorzArrow
Signature:   void CDebugOverlayScriptHelper::HorzArrow(Vector, Vector, float, int, int, int, int, bool, float)
Description: Draws a horizontal arrow. Specify endpoints in world space.

Function:    CDebugOverlayScriptHelper::Line
Signature:   void CDebugOverlayScriptHelper::Line(Vector, Vector, int, int, int, bool, float)
Description: Draws a line between two points

Function:    CDebugOverlayScriptHelper::ScreenText
Signature:   void CDebugOverlayScriptHelper::ScreenText(float, float, string, int, int, int, int, float)
Description: Draws 2D text. Specify coordinates in screen space.

Function:    CDebugOverlayScriptHelper::Sphere
Signature:   void CDebugOverlayScriptHelper::Sphere(Vector, float, int, int, int, bool, float)
Description: Draws a wireframe sphere. Specify center in world space.

Function:    CDebugOverlayScriptHelper::SweptBox
Signature:   void CDebugOverlayScriptHelper::SweptBox(Vector, Vector, Vector, Vector, Vector, int, int, int, int, float)
Description: Draws a swept box. Specify endpoints in world space and the bounds in local space.

Function:    CDebugOverlayScriptHelper::Text
Signature:   void CDebugOverlayScriptHelper::Text(Vector, string, float)
Description: Draws 2D text. Specify origin in world space.

Function:    CDebugOverlayScriptHelper::Triangle
Signature:   void CDebugOverlayScriptHelper::Triangle(Vector, Vector, Vector, int, int, int, int, bool, float)
Description: Draws a filled triangle. Specify vertices in world space.

Function:    CDebugOverlayScriptHelper::VertArrow
Signature:   void CDebugOverlayScriptHelper::VertArrow(Vector, Vector, float, int, int, int, int, bool, float)
Description: Draws a vertical arrow. Specify endpoints in world space.

Function:    CDebugOverlayScriptHelper::YawArrow
Signature:   void CDebugOverlayScriptHelper::YawArrow(Vector, float, float, float, int, int, int, int, bool, float)
Description: Draws a arrow associated with a specific yaw. Specify endpoints in world space.

Function:    CEffects::Bubbles
Signature:   void CEffects::Bubbles(Vector, Vector, float, int, int, float)

Function:    CEffects::ClientProjectile
Signature:   void CEffects::ClientProjectile(Vector, Vector, Vector, int, int, handle, string, string)

Function:    CEffects::Dust
Signature:   void CEffects::Dust(Vector, Vector, float, float)

Function:    CEffects::DynamicLight
Signature:   void CEffects::DynamicLight(int, Vector, int, int, int, int, float, float, float, int, int)

Function:    CEffects::Explosion
Signature:   void CEffects::Explosion(Vector, float, int, int, int)

Function:    CEffects::MetalSparks
Signature:   void CEffects::MetalSparks(Vector, Vector)

Function:    CEffects::Sparks
Signature:   void CEffects::Sparks(Vector, int, int, Vector)

Function:    CEffects::Sprite
Signature:   void CEffects::Sprite(Vector, Vector, float, int, int, int, int, float, int)

Function:    CEntities::CreateByClassname
Signature:   handle CEntities::CreateByClassname(string)
Description: Creates an entity by classname

Function:    CEntities::DisableEntityListening
Signature:   void CEntities::DisableEntityListening()
Description: Disables the 'OnEntity' hooks.

Function:    CEntities::EnableEntityListening
Signature:   void CEntities::EnableEntityListening()
Description: Enables the 'OnEntity' hooks. This function must be called before using them.

Function:    CEntities::FindByClassname
Signature:   handle CEntities::FindByClassname(handle, string)
Description: Find entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::FindByName
Signature:   handle CEntities::FindByName(handle, string)
Description: Find entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

Function:    CEntities::First
Signature:   handle CEntities::First()
Description: Begin an iteration over the list of entities

Function:    CEntities::GetLocalPlayer
Signature:   handle CEntities::GetLocalPlayer()
Description: Get local player

Function:    CEntities::Next
Signature:   handle CEntities::Next(handle)
Description: Continue an iteration over the list of entities, providing reference to a previously found entity

Function:    CGameRules::AllowMapParticleEffect
Signature:   bool CGameRules::AllowMapParticleEffect(string)

Function:    CGameRules::AllowMapVisionFilterShaders
Signature:   bool CGameRules::AllowMapVisionFilterShaders()

Function:    CGameRules::AllowThirdPersonCamera
Signature:   bool CGameRules::AllowThirdPersonCamera()
Description: Returns true if third-person camera is allowed.

Function:    CGameRules::AllowWeatherParticles
Signature:   bool CGameRules::AllowWeatherParticles()

Function:    CGameRules::Damage_IsTimeBased
Signature:   bool CGameRules::Damage_IsTimeBased(int)
Description: Damage types that are time-based.

Function:    CGameRules::Damage_NoPhysicsForce
Signature:   bool CGameRules::Damage_NoPhysicsForce(int)
Description: Damage types that don't have to supply a physics force & position.

Function:    CGameRules::Damage_ShouldGibCorpse
Signature:   bool CGameRules::Damage_ShouldGibCorpse(int)
Description: Damage types that gib the corpse.

Function:    CGameRules::Damage_ShouldNotBleed
Signature:   bool CGameRules::Damage_ShouldNotBleed(int)
Description: Damage types that don't make the player bleed.

Function:    CGameRules::Damage_ShowOnHUD
Signature:   bool CGameRules::Damage_ShowOnHUD(int)
Description: Damage types that have client HUD art.

Function:    CGameRules::DefaultFOV
Signature:   int CGameRules::DefaultFOV()
Description: Default player FOV in this game.

Function:    CGameRules::GetDamageMultiplier
Signature:   float CGameRules::GetDamageMultiplier()
Description: Ammo type damage multiplier.

Function:    CGameRules::GetGameType
Signature:   int CGameRules::GetGameType()

Function:    CGameRules::GetGameTypeName
Signature:   string CGameRules::GetGameTypeName()

Function:    CGameRules::InRoundRestart
Signature:   bool CGameRules::InRoundRestart()
Description: Returns true if the round is restarting.

Function:    CGameRules::IsBonusChallengeTimeBased
Signature:   bool CGameRules::IsBonusChallengeTimeBased()

Function:    CGameRules::IsLocalPlayer
Signature:   bool CGameRules::IsLocalPlayer(int)

Function:    CGameRules::IsMultiplayer
Signature:   bool CGameRules::IsMultiplayer()
Description: Returns true if this is a multiplayer game (like co-op or deathmatch).

Function:    CGameRules::Name
Signature:   string CGameRules::Name()
Description: Gets the name of these rules.

Function:    CGameRules::ShouldCollide
Signature:   bool CGameRules::ShouldCollide(int, int)
Description: Returns whether two collision groups collide with each other in this game.

Function:    CGameRules::ShouldWarnOfAbandonOnQuit
Signature:   bool CGameRules::ShouldWarnOfAbandonOnQuit()

Function:    CGameRules::TranslateEffectForVisionFilter
Signature:   string CGameRules::TranslateEffectForVisionFilter(string, string)

Function:    CGameTrace::AllSolid
Signature:   bool CGameTrace::AllSolid()
Description: Returns whether the trace is completely within a solid.

Function:    CGameTrace::Contents
Signature:   int CGameTrace::Contents()
Description: Gets the contents of the surface the trace has hit.

Function:    CGameTrace::Destroy
Signature:   void CGameTrace::Destroy()
Description: Deletes this instance. Important for preventing memory leaks.

Function:    CGameTrace::DidHit
Signature:   bool CGameTrace::DidHit()
Description: Returns whether the trace hit anything.

Function:    CGameTrace::DidHitNonWorldEntity
Signature:   bool CGameTrace::DidHitNonWorldEntity()
Description: Returns whether the trace hit something other than the world entity.

Function:    CGameTrace::DidHitWorld
Signature:   bool CGameTrace::DidHitWorld()
Description: Returns whether the trace hit the world entity or not.

Function:    CGameTrace::DispFlags
Signature:   int CGameTrace::DispFlags()
Description: Gets the displacement flags of the surface the trace has hit.

Function:    CGameTrace::EndPos
Signature:   Vector CGameTrace::EndPos()
Description: Gets the trace's end position.

Function:    CGameTrace::Entity
Signature:   handle CGameTrace::Entity()
Description: Returns the entity this trace has hit.

Function:    CGameTrace::Fraction
Signature:   float CGameTrace::Fraction()
Description: Gets the fraction of the trace completed. For example, if the trace stopped exactly halfway to the end position, this would be 0.5.

Function:    CGameTrace::FractionLeftSolid
Signature:   float CGameTrace::FractionLeftSolid()
Description: If this trace started within a solid, this is the point in the trace's fraction at which it left that solid.

Function:    CGameTrace::GetEntityIndex
Signature:   int CGameTrace::GetEntityIndex()
Description: Returns the index of whatever entity this trace hit.

Function:    CGameTrace::HitBox
Signature:   int CGameTrace::HitBox()
Description: Returns the hitbox of the entity this trace has hit. If it hit the world entity, this returns the static prop index.

Function:    CGameTrace::HitGroup
Signature:   int CGameTrace::HitGroup()
Description: Returns the specific hit group this trace hit if it hit an entity.

Function:    CGameTrace::IsDispSurface
Signature:   bool CGameTrace::IsDispSurface()
Description: Returns whether this trace hit a displacement.

Function:    CGameTrace::IsDispSurfaceBuildable
Signature:   bool CGameTrace::IsDispSurfaceBuildable()
Description: Returns whether DISPSURF_FLAG_BUILDABLE is ticked on the displacement this trace hit.

Function:    CGameTrace::IsDispSurfaceProp1
Signature:   bool CGameTrace::IsDispSurfaceProp1()
Description: Returns whether DISPSURF_FLAG_SURFPROP1 is ticked on the displacement this trace hit.

Function:    CGameTrace::IsDispSurfaceProp2
Signature:   bool CGameTrace::IsDispSurfaceProp2()
Description: Returns whether DISPSURF_FLAG_SURFPROP2 is ticked on the displacement this trace hit.

Function:    CGameTrace::IsDispSurfaceWalkable
Signature:   bool CGameTrace::IsDispSurfaceWalkable()
Description: Returns whether DISPSURF_FLAG_WALKABLE is ticked on the displacement this trace hit.

Function:    CGameTrace::PhysicsBone
Signature:   int CGameTrace::PhysicsBone()
Description: Returns the physics bone this trace hit if it hit an entity.

Function:    CGameTrace::Plane
Signature:   handle CGameTrace::Plane()

Function:    CGameTrace::StartPos
Signature:   Vector CGameTrace::StartPos()
Description: Gets the trace's start position.

Function:    CGameTrace::StartSolid
Signature:   bool CGameTrace::StartSolid()
Description: Returns whether the trace started within a solid.

Function:    CGameTrace::Surface
Signature:   handle CGameTrace::Surface()

Function:    CGlobalSys::CommandLineCheck
Signature:   bool CGlobalSys::CommandLineCheck(string)
Description: returns true if the command line param was used, otherwise false.

Function:    CGlobalSys::CommandLineCheckFloat
Signature:   float CGlobalSys::CommandLineCheckFloat(string)
Description: returns the command line param as a float.

Function:    CGlobalSys::CommandLineCheckInt
Signature:   int CGlobalSys::CommandLineCheckInt(string)
Description: returns the command line param as an int.

Function:    CGlobalSys::CommandLineCheckStr
Signature:   string CGlobalSys::CommandLineCheckStr(string)
Description: returns the command line param as a string.

Function:    CGlobalSys::GetCommandLine
Signature:   string CGlobalSys::GetCommandLine()
Description: returns the command line

Function:    CGlowObjectManager::Register
Signature:   int CGlowObjectManager::Register(handle, int, int, int, int, bool, bool)
Description: ( HSCRIPT hEntity, int r, int g, int b, int a, bool bRenderWhenOccluded, bool bRenderWhenUnoccluded )

Function:    CGlowObjectManager::SetAlpha
Signature:   void CGlowObjectManager::SetAlpha(int, int)

Function:    CGlowObjectManager::SetColor
Signature:   void CGlowObjectManager::SetColor(int, int, int, int)

Function:    CGlowObjectManager::SetEntity
Signature:   void CGlowObjectManager::SetEntity(int, handle)

Function:    CGlowObjectManager::SetRenderFlags
Signature:   void CGlowObjectManager::SetRenderFlags(int, bool, bool)

Function:    CGlowObjectManager::Unregister
Signature:   void CGlowObjectManager::Unregister(int)

Function:    CLocalize::AddStringAsUTF8
Signature:   void CLocalize::AddStringAsUTF8(string, string)
Description: Adds a new localized token as a UTF-8 string (not Unicode).

Function:    CLocalize::GetTokenAsUTF8
Signature:   string CLocalize::GetTokenAsUTF8(string)
Description: Gets the current language's token as a UTF-8 string (not Unicode).

Function:    CMapbaseSystem::AddManifestFile
Signature:   void CMapbaseSystem::AddManifestFile(string)
Description: Loads a manifest file.

Function:    CMapbaseSystem::GetModName
Signature:   string CMapbaseSystem::GetModName()
Description: Gets the name of the mod. This is the name which shows up on Steam, RPC, etc.

Function:    CMapbaseSystem::IsCoreMapbase
Signature:   bool CMapbaseSystem::IsCoreMapbase()
Description: Indicates whether this is one of the original Mapbase mods or just a separate mod using its code.

Function:    CMapbaseSystem::LoadCustomClientSchemeFile
Signature:   void CMapbaseSystem::LoadCustomClientSchemeFile(string)
Description: Loads a custom ClientScheme.res override file.

Function:    CMapbaseSystem::LoadCustomCloseCaptionFile
Signature:   void CMapbaseSystem::LoadCustomCloseCaptionFile(string)
Description: Loads a custom closed captions file.

Function:    CMapbaseSystem::LoadCustomHUDAnimationsFile
Signature:   void CMapbaseSystem::LoadCustomHUDAnimationsFile(string)
Description: Loads a custom HUD animations override file.

Function:    CMapbaseSystem::LoadCustomHUDLayoutFile
Signature:   void CMapbaseSystem::LoadCustomHUDLayoutFile(string)
Description: Loads a custom HUD layout override file.

Function:    CMapbaseSystem::LoadCustomLocalizationFile
Signature:   void CMapbaseSystem::LoadCustomLocalizationFile(string)
Description: Loads a custom localization file.

Function:    CMapbaseSystem::LoadCustomSoundscriptFile
Signature:   void CMapbaseSystem::LoadCustomSoundscriptFile(string)
Description: Loads a custom soundscript file.

Function:    CMapbaseSystem::LoadCustomSurfacePropsFile
Signature:   void CMapbaseSystem::LoadCustomSurfacePropsFile(string)
Description: Loads a custom surface properties file.

Function:    CMapbaseSystem::LoadCustomVGUIFile
Signature:   void CMapbaseSystem::LoadCustomVGUIFile(string)
Description: Loads a custom VGUI definitions file.

Function:    CNetMsg::DispatchUserMessage
Signature:   void CNetMsg::DispatchUserMessage(string)
Description: Dispatch a usermessage on client

Function:    CNetMsg::GetNumBitsWritten
Signature:   int CNetMsg::GetNumBitsWritten()

Function:    CNetMsg::ReadAngle
Signature:   float CNetMsg::ReadAngle()

Function:    CNetMsg::ReadAngles
Signature:   Vector CNetMsg::ReadAngles()

Function:    CNetMsg::ReadBool
Signature:   bool CNetMsg::ReadBool()

Function:    CNetMsg::ReadByte
Signature:   int CNetMsg::ReadByte()

Function:    CNetMsg::ReadChar
Signature:   int CNetMsg::ReadChar()

Function:    CNetMsg::ReadCoord
Signature:   float CNetMsg::ReadCoord()

Function:    CNetMsg::ReadEHandle
Signature:   handle CNetMsg::ReadEHandle()

Function:    CNetMsg::ReadEntity
Signature:   handle CNetMsg::ReadEntity()

Function:    CNetMsg::ReadFloat
Signature:   float CNetMsg::ReadFloat()

Function:    CNetMsg::ReadInt
Signature:   int CNetMsg::ReadInt(int)

Function:    CNetMsg::ReadLong
Signature:   int CNetMsg::ReadLong()

Function:    CNetMsg::ReadNormal
Signature:   float CNetMsg::ReadNormal()

Function:    CNetMsg::ReadShort
Signature:   int CNetMsg::ReadShort()

Function:    CNetMsg::ReadString
Signature:   string CNetMsg::ReadString()

Function:    CNetMsg::ReadUInt
Signature:   int CNetMsg::ReadUInt(int)

Function:    CNetMsg::ReadVec3Coord
Signature:   Vector CNetMsg::ReadVec3Coord()

Function:    CNetMsg::ReadVec3Normal
Signature:   Vector CNetMsg::ReadVec3Normal()

Function:    CNetMsg::ReadWord
Signature:   int CNetMsg::ReadWord()

Function:    CNetMsg::Receive
Signature:   void CNetMsg::Receive(string, handle)
Description: Set custom network message callback

Function:    CNetMsg::Reset
Signature:   void CNetMsg::Reset()
Description: Reset the current network message buffer

Function:    CNetMsg::Send
Signature:   void CNetMsg::Send()
Description: Send a custom network message from the client to the server (max 2044 bytes)

Function:    CNetMsg::Start
Signature:   void CNetMsg::Start(string)
Description: Start writing new custom network message

Function:    CNetMsg::WriteAngle
Signature:   void CNetMsg::WriteAngle(float)
Description: 8 bit unsigned char

Function:    CNetMsg::WriteAngles
Signature:   void CNetMsg::WriteAngles(Vector)

Function:    CNetMsg::WriteBool
Signature:   void CNetMsg::WriteBool(bool)
Description: 1 bit

Function:    CNetMsg::WriteByte
Signature:   void CNetMsg::WriteByte(int)
Description: 8 bit unsigned char

Function:    CNetMsg::WriteChar
Signature:   void CNetMsg::WriteChar(int)
Description: 8 bit char

Function:    CNetMsg::WriteCoord
Signature:   void CNetMsg::WriteCoord(float)

Function:    CNetMsg::WriteEHandle
Signature:   void CNetMsg::WriteEHandle(handle)
Description: 32 bit long

Function:    CNetMsg::WriteEntity
Signature:   void CNetMsg::WriteEntity(handle)
Description: 11 bit (entindex)

Function:    CNetMsg::WriteFloat
Signature:   void CNetMsg::WriteFloat(float)
Description: 32 bit float

Function:    CNetMsg::WriteInt
Signature:   void CNetMsg::WriteInt(int, int)
Description: variable bit signed int

Function:    CNetMsg::WriteLong
Signature:   void CNetMsg::WriteLong(int)
Description: 32 bit long

Function:    CNetMsg::WriteNormal
Signature:   void CNetMsg::WriteNormal(float)
Description: 12 bit

Function:    CNetMsg::WriteShort
Signature:   void CNetMsg::WriteShort(int)
Description: 16 bit short

Function:    CNetMsg::WriteString
Signature:   void CNetMsg::WriteString(string)
Description: max 512 bytes at once

Function:    CNetMsg::WriteUInt
Signature:   void CNetMsg::WriteUInt(int, int)
Description: variable bit unsigned int

Function:    CNetMsg::WriteVec3Coord
Signature:   void CNetMsg::WriteVec3Coord(Vector)

Function:    CNetMsg::WriteVec3Normal
Signature:   void CNetMsg::WriteVec3Normal(Vector)
Description: 27 bit

Function:    CNetMsg::WriteWord
Signature:   void CNetMsg::WriteWord(int)
Description: 16 bit unsigned short

Function:    CNetPropManager::GetPropArraySize
Signature:   int CNetPropManager::GetPropArraySize(handle, string)
Description: Returns the size of an netprop array, or -1.

Function:    CNetPropManager::GetPropEntity
Signature:   handle CNetPropManager::GetPropEntity(handle, string)
Description: Reads an EHANDLE valued netprop (21 bit integer). Returns the script handle of the entity.

Function:    CNetPropManager::GetPropEntityArray
Signature:   handle CNetPropManager::GetPropEntityArray(handle, string, int)
Description: Reads an EHANDLE valued netprop (21 bit integer) from an array. Returns the script handle of the entity.

Function:    CNetPropManager::GetPropFloat
Signature:   float CNetPropManager::GetPropFloat(handle, string)
Description: Reads a float valued netprop.

Function:    CNetPropManager::GetPropFloatArray
Signature:   float CNetPropManager::GetPropFloatArray(handle, string, int)
Description: Reads a float valued netprop from an array.

Function:    CNetPropManager::GetPropInt
Signature:   int CNetPropManager::GetPropInt(handle, string)
Description: Reads an integer valued netprop.

Function:    CNetPropManager::GetPropIntArray
Signature:   int CNetPropManager::GetPropIntArray(handle, string, int)
Description: Reads an integer valued netprop from an array.

Function:    CNetPropManager::GetPropString
Signature:   string CNetPropManager::GetPropString(handle, string)
Description: Reads a string valued netprop.

Function:    CNetPropManager::GetPropStringArray
Signature:   string CNetPropManager::GetPropStringArray(handle, string, int)
Description: Reads a string valued netprop from an array.

Function:    CNetPropManager::GetPropType
Signature:   string CNetPropManager::GetPropType(handle, string)
Description: Returns the name of the netprop type as a string.

Function:    CNetPropManager::GetPropVector
Signature:   Vector CNetPropManager::GetPropVector(handle, string)
Description: Reads a 3D vector valued netprop.

Function:    CNetPropManager::GetPropVectorArray
Signature:   Vector CNetPropManager::GetPropVectorArray(handle, string, int)
Description: Reads a 3D vector valued netprop from an array.

Function:    CNetPropManager::HasProp
Signature:   bool CNetPropManager::HasProp(handle, string)
Description: Checks if a netprop exists.

Function:    CNetPropManager::SetPropEntity
Signature:   void CNetPropManager::SetPropEntity(handle, string, handle)
Description: Sets an EHANDLE valued netprop (21 bit integer) to reference the specified entity.

Function:    CNetPropManager::SetPropEntityArray
Signature:   handle CNetPropManager::SetPropEntityArray(handle, string, handle, int)
Description: Sets an EHANDLE valued netprop (21 bit integer) from an array to reference the specified entity.

Function:    CNetPropManager::SetPropFloat
Signature:   void CNetPropManager::SetPropFloat(handle, string, float)
Description: Sets a netprop to the specified float.

Function:    CNetPropManager::SetPropFloatArray
Signature:   void CNetPropManager::SetPropFloatArray(handle, string, float, int)
Description: Sets a netprop from an array to the specified float.

Function:    CNetPropManager::SetPropInt
Signature:   void CNetPropManager::SetPropInt(handle, string, int)
Description: Sets a netprop to the specified integer.

Function:    CNetPropManager::SetPropIntArray
Signature:   void CNetPropManager::SetPropIntArray(handle, string, int, int)
Description: Sets a netprop from an array to the specified integer.

Function:    CNetPropManager::SetPropString
Signature:   void CNetPropManager::SetPropString(handle, string, string)
Description: Sets a netprop to the specified string.

Function:    CNetPropManager::SetPropStringArray
Signature:   void CNetPropManager::SetPropStringArray(handle, string, string, int)
Description: Sets a netprop from an array to the specified string.

Function:    CNetPropManager::SetPropVector
Signature:   void CNetPropManager::SetPropVector(handle, string, Vector)
Description: Sets a netprop to the specified vector.

Function:    CNetPropManager::SetPropVectorArray
Signature:   void CNetPropManager::SetPropVectorArray(handle, string, Vector, int)
Description: Sets a netprop from an array to the specified vector.

Function:    CScriptKeyValues::FindKey
Signature:   handle CScriptKeyValues::FindKey(string)
Description: Given a KeyValues object and a key name, find a KeyValues object associated with the key name

Function:    CScriptKeyValues::FindOrCreateKey
Signature:   handle CScriptKeyValues::FindOrCreateKey(string)
Description: Given a KeyValues object and a key name, find or create a KeyValues object associated with the key name

Function:    CScriptKeyValues::GetBool
Signature:   bool CScriptKeyValues::GetBool()
Description: Given a KeyValues object, return its own associated bool value

Function:    CScriptKeyValues::GetFirstSubKey
Signature:   handle CScriptKeyValues::GetFirstSubKey()
Description: Given a KeyValues object, return the first sub key object

Function:    CScriptKeyValues::GetFloat
Signature:   float CScriptKeyValues::GetFloat()
Description: Given a KeyValues object, return its own associated float value

Function:    CScriptKeyValues::GetInt
Signature:   int CScriptKeyValues::GetInt()
Description: Given a KeyValues object, return its own associated integer value

Function:    CScriptKeyValues::GetKeyBool
Signature:   bool CScriptKeyValues::GetKeyBool(string)
Description: Given a KeyValues object and a key name, return associated bool value

Function:    CScriptKeyValues::GetKeyFloat
Signature:   float CScriptKeyValues::GetKeyFloat(string)
Description: Given a KeyValues object and a key name, return associated float value

Function:    CScriptKeyValues::GetKeyInt
Signature:   int CScriptKeyValues::GetKeyInt(string)
Description: Given a KeyValues object and a key name, return associated integer value

Function:    CScriptKeyValues::GetKeyString
Signature:   string CScriptKeyValues::GetKeyString(string)
Description: Given a KeyValues object and a key name, return associated string value

Function:    CScriptKeyValues::GetName
Signature:   string CScriptKeyValues::GetName()
Description: Given a KeyValues object, return its name

Function:    CScriptKeyValues::GetNextKey
Signature:   handle CScriptKeyValues::GetNextKey()
Description: Given a KeyValues object, return the next key object in a sub key group

Function:    CScriptKeyValues::GetString
Signature:   string CScriptKeyValues::GetString()
Description: Given a KeyValues object, return its own associated string value

Function:    CScriptKeyValues::IsKeyEmpty
Signature:   bool CScriptKeyValues::IsKeyEmpty(string)
Description: Given a KeyValues object and a key name, return true if key name has no value

Function:    CScriptKeyValues::ReleaseKeyValues
Signature:   void CScriptKeyValues::ReleaseKeyValues()
Description: Given a root KeyValues object, release its contents

Function:    CScriptKeyValues::SetBool
Signature:   void CScriptKeyValues::SetBool(bool)
Description: Given a KeyValues object, set its own associated bool value

Function:    CScriptKeyValues::SetFloat
Signature:   void CScriptKeyValues::SetFloat(float)
Description: Given a KeyValues object, set its own associated float value

Function:    CScriptKeyValues::SetInt
Signature:   void CScriptKeyValues::SetInt(int)
Description: Given a KeyValues object, set its own associated integer value

Function:    CScriptKeyValues::SetKeyBool
Signature:   void CScriptKeyValues::SetKeyBool(string, bool)
Description: Given a KeyValues object and a key name, set associated bool value

Function:    CScriptKeyValues::SetKeyFloat
Signature:   void CScriptKeyValues::SetKeyFloat(string, float)
Description: Given a KeyValues object and a key name, set associated float value

Function:    CScriptKeyValues::SetKeyInt
Signature:   void CScriptKeyValues::SetKeyInt(string, int)
Description: Given a KeyValues object and a key name, set associated integer value

Function:    CScriptKeyValues::SetKeyString
Signature:   void CScriptKeyValues::SetKeyString(string, string)
Description: Given a KeyValues object and a key name, set associated string value

Function:    CScriptKeyValues::SetName
Signature:   void CScriptKeyValues::SetName(string)
Description: Given a KeyValues object, set its name

Function:    CScriptKeyValues::SetString
Signature:   void CScriptKeyValues::SetString(string)
Description: Given a KeyValues object, set its own associated string value

Function:    CScriptKeyValues::SubKeysToTable
Signature:   void CScriptKeyValues::SubKeysToTable(handle)
Description: Converts to script table.

Function:    CScriptKeyValues::TableToSubKeys
Signature:   void CScriptKeyValues::TableToSubKeys(handle)
Description: Converts a script table to KeyValues.

Function:    CScriptMaterialProxy::GetVarFloat
Signature:   float CScriptMaterialProxy::GetVarFloat(int)
Description: Gets a material var's float value

Function:    CScriptMaterialProxy::GetVarInt
Signature:   int CScriptMaterialProxy::GetVarInt(int)
Description: Gets a material var's int value

Function:    CScriptMaterialProxy::GetVarName
Signature:   string CScriptMaterialProxy::GetVarName(int)
Description: Gets a material var's name

Function:    CScriptMaterialProxy::GetVarString
Signature:   string CScriptMaterialProxy::GetVarString(int)
Description: Gets a material var's string value

Function:    CScriptMaterialProxy::GetVarVector
Signature:   Vector CScriptMaterialProxy::GetVarVector(int)
Description: Gets a material var's vector value

Function:    CScriptMaterialProxy::SetVarFloat
Signature:   void CScriptMaterialProxy::SetVarFloat(int, float)
Description: Sets a material var's float value

Function:    CScriptMaterialProxy::SetVarInt
Signature:   void CScriptMaterialProxy::SetVarInt(int, int)
Description: Sets a material var's int value

Function:    CScriptMaterialProxy::SetVarString
Signature:   void CScriptMaterialProxy::SetVarString(int, string)
Description: Sets a material var's string value

Function:    CScriptMaterialProxy::SetVarVector
Signature:   void CScriptMaterialProxy::SetVarVector(int, Vector)
Description: Sets a material var's vector value

Function:    CSteamAPI::GetCurrentBatteryPower
Signature:   int CSteamAPI::GetCurrentBatteryPower()
Description: Return the amount of battery power left in the current system in % [0..100], 255 for being on AC power

Function:    CSteamAPI::GetCurrentBetaName
Signature:   string CSteamAPI::GetCurrentBetaName()
Description: Gets the name of the user's current beta branch. In Source SDK Base 2013 Singleplayer, this will usually return 'upcoming'.

Function:    CSteamAPI::GetCurrentGameLanguage
Signature:   string CSteamAPI::GetCurrentGameLanguage()
Description: Gets the current language that the user has set as API language code. This falls back to the Steam UI language if the user hasn't explicitly picked a language for the title.

Function:    CSteamAPI::GetSecondsSinceComputerActive
Signature:   int CSteamAPI::GetSecondsSinceComputerActive()
Description: Returns the number of seconds since the user last moved the mouse.

Function:    CSteamAPI::GetSteam2ID
Signature:   string CSteamAPI::GetSteam2ID()

Function:    CSteamAPI::IsAppInstalled
Signature:   bool CSteamAPI::IsAppInstalled(int)
Description: Returns true if the user has the specified app ID installed on their computer.

Function:    CTakeDamageInfo::AddDamage
Signature:   void CTakeDamageInfo::AddDamage(float)
Description: Adds to the damage.

Function:    CTakeDamageInfo::AddDamageType
Signature:   void CTakeDamageInfo::AddDamageType(int)
Description: Adds to the damage type.

Function:    CTakeDamageInfo::BaseDamageIsValid
Signature:   bool CTakeDamageInfo::BaseDamageIsValid()
Description: Checks if the base damage is valid.

Function:    CTakeDamageInfo::GetAmmoName
Signature:   string CTakeDamageInfo::GetAmmoName()
Description: Gets the ammo type name.

Function:    CTakeDamageInfo::GetAmmoType
Signature:   int CTakeDamageInfo::GetAmmoType()
Description: Gets the ammo type.

Function:    CTakeDamageInfo::GetAttacker
Signature:   handle CTakeDamageInfo::GetAttacker()
Description: Gets the attacker.

Function:    CTakeDamageInfo::GetBaseDamage
Signature:   float CTakeDamageInfo::GetBaseDamage()
Description: Gets the base damage.

Function:    CTakeDamageInfo::GetDamage
Signature:   float CTakeDamageInfo::GetDamage()
Description: Gets the damage.

Function:    CTakeDamageInfo::GetDamageBonus
Signature:   float CTakeDamageInfo::GetDamageBonus()
Description: Gets the damage bonus.

Function:    CTakeDamageInfo::GetDamageCustom
Signature:   int CTakeDamageInfo::GetDamageCustom()
Description: Gets the damage custom.

Function:    CTakeDamageInfo::GetDamageForce
Signature:   Vector CTakeDamageInfo::GetDamageForce()
Description: Gets the damage force.

Function:    CTakeDamageInfo::GetDamagePosition
Signature:   Vector CTakeDamageInfo::GetDamagePosition()
Description: Gets the damage position.

Function:    CTakeDamageInfo::GetDamageStats
Signature:   int CTakeDamageInfo::GetDamageStats()
Description: Gets the damage stats.

Function:    CTakeDamageInfo::GetDamageType
Signature:   int CTakeDamageInfo::GetDamageType()
Description: Gets the damage type.

Function:    CTakeDamageInfo::GetDamagedOtherPlayers
Signature:   int CTakeDamageInfo::GetDamagedOtherPlayers()
Description: Gets whether other players have been damaged.

Function:    CTakeDamageInfo::GetInflictor
Signature:   handle CTakeDamageInfo::GetInflictor()
Description: Gets the inflictor.

Function:    CTakeDamageInfo::GetMaxDamage
Signature:   float CTakeDamageInfo::GetMaxDamage()
Description: Gets the max damage.

Function:    CTakeDamageInfo::GetPlayerPenetrationCount
Signature:   int CTakeDamageInfo::GetPlayerPenetrationCount()
Description: Gets the player penetration count.

Function:    CTakeDamageInfo::GetReportedPosition
Signature:   Vector CTakeDamageInfo::GetReportedPosition()
Description: Gets the reported damage position.

Function:    CTakeDamageInfo::GetWeapon
Signature:   handle CTakeDamageInfo::GetWeapon()
Description: Gets the weapon.

Function:    CTakeDamageInfo::IsForceFriendlyFire
Signature:   bool CTakeDamageInfo::IsForceFriendlyFire()
Description: Gets force friendly fire.

Function:    CTakeDamageInfo::ScaleDamage
Signature:   void CTakeDamageInfo::ScaleDamage(float)
Description: Scales the damage.

Function:    CTakeDamageInfo::ScaleDamageForce
Signature:   void CTakeDamageInfo::ScaleDamageForce(float)
Description: Scales the damage force.

Function:    CTakeDamageInfo::SetAmmoType
Signature:   void CTakeDamageInfo::SetAmmoType(int)
Description: Sets the ammo type.

Function:    CTakeDamageInfo::SetAttacker
Signature:   void CTakeDamageInfo::SetAttacker(handle)
Description: Sets the attacker.

Function:    CTakeDamageInfo::SetDamage
Signature:   void CTakeDamageInfo::SetDamage(float)
Description: Sets the damage.

Function:    CTakeDamageInfo::SetDamageBonus
Signature:   void CTakeDamageInfo::SetDamageBonus(float)
Description: Sets the damage bonus.

Function:    CTakeDamageInfo::SetDamageCustom
Signature:   void CTakeDamageInfo::SetDamageCustom(int)
Description: Sets the damage custom.

Function:    CTakeDamageInfo::SetDamageForce
Signature:   void CTakeDamageInfo::SetDamageForce(Vector)
Description: Sets the damage force.

Function:    CTakeDamageInfo::SetDamagePosition
Signature:   void CTakeDamageInfo::SetDamagePosition(Vector)
Description: Sets the damage position.

Function:    CTakeDamageInfo::SetDamageStats
Signature:   void CTakeDamageInfo::SetDamageStats(int)
Description: Sets the damage stats.

Function:    CTakeDamageInfo::SetDamageType
Signature:   void CTakeDamageInfo::SetDamageType(int)
Description: Sets the damage type.

Function:    CTakeDamageInfo::SetDamagedOtherPlayers
Signature:   void CTakeDamageInfo::SetDamagedOtherPlayers(int)
Description: Sets whether other players have been damaged.

Function:    CTakeDamageInfo::SetForceFriendlyFire
Signature:   void CTakeDamageInfo::SetForceFriendlyFire(bool)
Description: Sets force friendly fire.

Function:    CTakeDamageInfo::SetInflictor
Signature:   void CTakeDamageInfo::SetInflictor(handle)
Description: Sets the inflictor.

Function:    CTakeDamageInfo::SetMaxDamage
Signature:   void CTakeDamageInfo::SetMaxDamage(float)
Description: Sets the max damage.

Function:    CTakeDamageInfo::SetPlayerPenetrationCount
Signature:   void CTakeDamageInfo::SetPlayerPenetrationCount(int)
Description: Sets the player penetration count.

Function:    CTakeDamageInfo::SetReportedPosition
Signature:   void CTakeDamageInfo::SetReportedPosition(Vector)
Description: Sets the reported damage position.

Function:    CTakeDamageInfo::SetWeapon
Signature:   void CTakeDamageInfo::SetWeapon(handle)
Description: Sets the weapon.

Function:    CTakeDamageInfo::SubtractDamage
Signature:   void CTakeDamageInfo::SubtractDamage(float)
Description: Removes from the damage.

Function:    CUserCmd::GetButtons
Signature:   int CUserCmd::GetButtons()
Description: Input button state.

Function:    CUserCmd::GetCommandNumber
Signature:   int CUserCmd::GetCommandNumber()
Description: For matching server and client commands for debugging.

Function:    CUserCmd::GetForwardMove
Signature:   float CUserCmd::GetForwardMove()

Function:    CUserCmd::GetImpulse
Signature:   int CUserCmd::GetImpulse()
Description: Impulse command issued.

Function:    CUserCmd::GetMouseX
Signature:   int CUserCmd::GetMouseX()
Description: Mouse accum in x from create move.

Function:    CUserCmd::GetMouseY
Signature:   int CUserCmd::GetMouseY()
Description: Mouse accum in y from create move.

Function:    CUserCmd::GetRandomSeed
Signature:   int CUserCmd::GetRandomSeed()
Description: For shared random functions.

Function:    CUserCmd::GetSideMove
Signature:   float CUserCmd::GetSideMove()

Function:    CUserCmd::GetTickCount
Signature:   int CUserCmd::GetTickCount()
Description: The tick the client created this command.

Function:    CUserCmd::GetUpMove
Signature:   float CUserCmd::GetUpMove()

Function:    CUserCmd::GetViewAngles
Signature:   Vector CUserCmd::GetViewAngles()
Description: Player instantaneous view angles.

Function:    CUserCmd::GetWeaponSelect
Signature:   int CUserCmd::GetWeaponSelect()
Description: Current weapon id.

Function:    CUserCmd::GetWeaponSubtype
Signature:   int CUserCmd::GetWeaponSubtype()
Description: Current weapon subtype id.

Function:    CUserCmd::SetButtons
Signature:   void CUserCmd::SetButtons(int)
Description: Sets input button state.

Function:    CUserCmd::SetForwardMove
Signature:   void CUserCmd::SetForwardMove(float)

Function:    CUserCmd::SetImpulse
Signature:   void CUserCmd::SetImpulse(int)
Description: Sets impulse command issued.

Function:    CUserCmd::SetMouseX
Signature:   void CUserCmd::SetMouseX(int)
Description: Sets mouse accum in x from create move.

Function:    CUserCmd::SetMouseY
Signature:   void CUserCmd::SetMouseY(int)
Description: Sets mouse accum in y from create move.

Function:    CUserCmd::SetSideMove
Signature:   void CUserCmd::SetSideMove(float)

Function:    CUserCmd::SetUpMove
Signature:   void CUserCmd::SetUpMove(float)

Function:    CUserCmd::SetViewAngles
Signature:   void CUserCmd::SetViewAngles(Vector)
Description: Sets player instantaneous view angles.

Function:    CUserCmd::SetWeaponSelect
Signature:   void CUserCmd::SetWeaponSelect(int)
Description: Sets current weapon id.

Function:    CUserCmd::SetWeaponSubtype
Signature:   void CUserCmd::SetWeaponSubtype(int)
Description: Sets current weapon subtype id.

Function:    C_BaseAnimating::AttachEntityToBone
Signature:   void C_BaseAnimating::AttachEntityToBone(handle, int, Vector, Vector)
Description: Attaches this entity to the specified target and bone. Also allows for optional local position offset

Function:    C_BaseAnimating::BecomeRagdollOnClient
Signature:   handle C_BaseAnimating::BecomeRagdollOnClient()

Function:    C_BaseAnimating::DestroyBoneAttachments
Signature:   void C_BaseAnimating::DestroyBoneAttachments()
Description: Destroys all bone attachments

Function:    C_BaseAnimating::FindBodygroupByName
Signature:   int C_BaseAnimating::FindBodygroupByName(string)
Description: Finds a bodygroup by name

Function:    C_BaseAnimating::GetAttachmentAngles
Signature:   Vector C_BaseAnimating::GetAttachmentAngles(int)
Description: Get the attachement id's angles as a p,y,r vector

Function:    C_BaseAnimating::GetAttachmentMatrix
Signature:   handle C_BaseAnimating::GetAttachmentMatrix(int)
Description: Get the attachement id's matrix transform

Function:    C_BaseAnimating::GetAttachmentOrigin
Signature:   Vector C_BaseAnimating::GetAttachmentOrigin(int)
Description: Get the attachement id's origin vector

Function:    C_BaseAnimating::GetBodygroup
Signature:   int C_BaseAnimating::GetBodygroup(int)
Description: Gets a bodygroup

Function:    C_BaseAnimating::GetBodygroupCount
Signature:   int C_BaseAnimating::GetBodygroupCount(int)
Description: Gets the number of models in a bodygroup

Function:    C_BaseAnimating::GetBodygroupName
Signature:   string C_BaseAnimating::GetBodygroupName(int)
Description: Gets a bodygroup name

Function:    C_BaseAnimating::GetBoneAttachment
Signature:   handle C_BaseAnimating::GetBoneAttachment(int)
Description: Gets the specified bone attachment

Function:    C_BaseAnimating::GetBoneTransform
Signature:   void C_BaseAnimating::GetBoneTransform(int, handle)
Description: Get the transform for the specified bone

Function:    C_BaseAnimating::GetCycle
Signature:   float C_BaseAnimating::GetCycle()

Function:    C_BaseAnimating::GetForceBone
Signature:   int C_BaseAnimating::GetForceBone()
Description: Gets the entity's force bone, which is used to determine which bone a ragdoll should apply its force to.

Function:    C_BaseAnimating::GetNumBodyGroups
Signature:   int C_BaseAnimating::GetNumBodyGroups()
Description: Gets the number of bodygroups

Function:    C_BaseAnimating::GetNumBoneAttachments
Signature:   int C_BaseAnimating::GetNumBoneAttachments()
Description: Gets the number of bone attachments

Function:    C_BaseAnimating::GetPlaybackRate
Signature:   float C_BaseAnimating::GetPlaybackRate()

Function:    C_BaseAnimating::GetPoseParameter
Signature:   float C_BaseAnimating::GetPoseParameter(string)
Description: Get the specified pose parameter's value

Function:    C_BaseAnimating::GetRagdollForce
Signature:   Vector C_BaseAnimating::GetRagdollForce()
Description: Gets the entity's ragdoll force, which is used to apply velocity to a ragdoll.

Function:    C_BaseAnimating::GetSequence
Signature:   int C_BaseAnimating::GetSequence()
Description: Gets the current sequence

Function:    C_BaseAnimating::GetSequenceActivity
Signature:   int C_BaseAnimating::GetSequenceActivity(int)
Description: Gets the activity ID of the specified sequence index

Function:    C_BaseAnimating::GetSequenceActivityName
Signature:   string C_BaseAnimating::GetSequenceActivityName(int)
Description: Gets the activity name of the specified sequence index

Function:    C_BaseAnimating::GetSequenceMoveDist
Signature:   float C_BaseAnimating::GetSequenceMoveDist(int)
Description: Gets the move distance of the specified sequence

Function:    C_BaseAnimating::GetSequenceName
Signature:   string C_BaseAnimating::GetSequenceName(int)
Description: Gets the name of the specified sequence index

Function:    C_BaseAnimating::GetSkin
Signature:   int C_BaseAnimating::GetSkin()
Description: Gets the model's skin

Function:    C_BaseAnimating::IsRagdoll
Signature:   bool C_BaseAnimating::IsRagdoll()

Function:    C_BaseAnimating::IsSequenceFinished
Signature:   bool C_BaseAnimating::IsSequenceFinished()
Description: Ask whether the main sequence is done playing

Function:    C_BaseAnimating::LookupActivity
Signature:   int C_BaseAnimating::LookupActivity(string)
Description: Gets the ID of the specified activity name

Function:    C_BaseAnimating::LookupAttachment
Signature:   int C_BaseAnimating::LookupAttachment(string)
Description: Get the named attachement id

Function:    C_BaseAnimating::LookupBone
Signature:   int C_BaseAnimating::LookupBone(string)
Description: Get the named bone id

Function:    C_BaseAnimating::LookupSequence
Signature:   int C_BaseAnimating::LookupSequence(string)
Description: Gets the index of the specified sequence name

Function:    C_BaseAnimating::RemoveBoneAttachment
Signature:   void C_BaseAnimating::RemoveBoneAttachment(handle)
Description: Removes the specified bone attachment

Function:    C_BaseAnimating::SelectWeightedSequence
Signature:   int C_BaseAnimating::SelectWeightedSequence(int)
Description: Selects a sequence for the specified activity ID

Function:    C_BaseAnimating::SequenceLoops
Signature:   bool C_BaseAnimating::SequenceLoops()
Description: Does the current sequence loop?

Function:    C_BaseAnimating::SetBodygroup
Signature:   void C_BaseAnimating::SetBodygroup(int, int)
Description: Sets a bodygroup

Function:    C_BaseAnimating::SetBoneTransform
Signature:   void C_BaseAnimating::SetBoneTransform(int, handle)
Description: Set the transform for the specified bone

Function:    C_BaseAnimating::SetCycle
Signature:   void C_BaseAnimating::SetCycle(float)

Function:    C_BaseAnimating::SetForceBone
Signature:   void C_BaseAnimating::SetForceBone(int)
Description: Sets the entity's force bone, which is used to determine which bone a ragdoll should apply its force to.

Function:    C_BaseAnimating::SetPlaybackRate
Signature:   void C_BaseAnimating::SetPlaybackRate(float)

Function:    C_BaseAnimating::SetPoseParameter
Signature:   void C_BaseAnimating::SetPoseParameter(string, float)
Description: Set the specified pose parameter to the specified value

Function:    C_BaseAnimating::SetRagdollForce
Signature:   void C_BaseAnimating::SetRagdollForce(Vector)
Description: Sets the entity's ragdoll force, which is used to apply velocity to a ragdoll.

Function:    C_BaseAnimating::SetSequence
Signature:   void C_BaseAnimating::SetSequence(int)
Description: Sets the current sequence

Function:    C_BaseAnimating::SetSkin
Signature:   void C_BaseAnimating::SetSkin(int)
Description: Sets the model's skin

Function:    C_BaseCombatCharacter::GetActiveWeapon
Signature:   handle C_BaseCombatCharacter::GetActiveWeapon()

Function:    C_BaseCombatCharacter::GetAmmoCount
Signature:   int C_BaseCombatCharacter::GetAmmoCount(int)

Function:    C_BaseCombatCharacter::GetWeapon
Signature:   handle C_BaseCombatCharacter::GetWeapon(int)

Function:    C_BaseCombatWeapon::AddViewKick
Signature:   void C_BaseCombatWeapon::AddViewKick()
Description: Applies the weapon's view kick.

Function:    C_BaseCombatWeapon::AltFiresUnderwater
Signature:   bool C_BaseCombatWeapon::AltFiresUnderwater()
Description: Returns true if this weapon can alt-fire underwater.

Function:    C_BaseCombatWeapon::CanBePickedUpByNPCs
Signature:   bool C_BaseCombatWeapon::CanBePickedUpByNPCs()
Description: Check if the weapon can be picked up by NPCs.

Function:    C_BaseCombatWeapon::Clip1
Signature:   int C_BaseCombatWeapon::Clip1()
Description: Get the weapon's current primary ammo.

Function:    C_BaseCombatWeapon::Clip2
Signature:   int C_BaseCombatWeapon::Clip2()
Description: Get the weapon's current secondary ammo.

Function:    C_BaseCombatWeapon::FireDuration
Signature:   float C_BaseCombatWeapon::FireDuration()
Description: Returns the amount of time that the weapon has sustained firing.

Function:    C_BaseCombatWeapon::FiresUnderwater
Signature:   bool C_BaseCombatWeapon::FiresUnderwater()
Description: Returns true if this weapon can fire underwater.

Function:    C_BaseCombatWeapon::GetBulletSpread
Signature:   Vector C_BaseCombatWeapon::GetBulletSpread()
Description: Returns the weapon's default bullet spread.

Function:    C_BaseCombatWeapon::GetBulletSpreadForProficiency
Signature:   Vector C_BaseCombatWeapon::GetBulletSpreadForProficiency(int)
Description: Returns the weapon's bullet spread for the specified proficiency level.

Function:    C_BaseCombatWeapon::GetDefaultAnimSpeed
Signature:   float C_BaseCombatWeapon::GetDefaultAnimSpeed()
Description: Returns the weapon's default animation speed.

Function:    C_BaseCombatWeapon::GetDefaultClip1
Signature:   int C_BaseCombatWeapon::GetDefaultClip1()
Description: Get the weapon's default primary ammo.

Function:    C_BaseCombatWeapon::GetDefaultClip2
Signature:   int C_BaseCombatWeapon::GetDefaultClip2()
Description: Get the weapon's default secondary ammo.

Function:    C_BaseCombatWeapon::GetDrawActivity
Signature:   int C_BaseCombatWeapon::GetDrawActivity()
Description: Returns the weapon's draw activity.

Function:    C_BaseCombatWeapon::GetDroppedModel
Signature:   string C_BaseCombatWeapon::GetDroppedModel()
Description: Get the weapon's unique dropped model if it has one.

Function:    C_BaseCombatWeapon::GetFireRate
Signature:   float C_BaseCombatWeapon::GetFireRate()
Description: Get the weapon's firing rate.

Function:    C_BaseCombatWeapon::GetMaxClip1
Signature:   int C_BaseCombatWeapon::GetMaxClip1()
Description: Get the weapon's maximum primary ammo.

Function:    C_BaseCombatWeapon::GetMaxClip2
Signature:   int C_BaseCombatWeapon::GetMaxClip2()
Description: Get the weapon's maximum secondary ammo.

Function:    C_BaseCombatWeapon::GetOwner
Signature:   handle C_BaseCombatWeapon::GetOwner()
Description: Get the weapon's owner.

Function:    C_BaseCombatWeapon::GetPosition
Signature:   int C_BaseCombatWeapon::GetPosition()

Function:    C_BaseCombatWeapon::GetPrimaryAmmoType
Signature:   int C_BaseCombatWeapon::GetPrimaryAmmoType()
Description: Get the weapon's primary ammo type.

Function:    C_BaseCombatWeapon::GetPrimaryAttackActivity
Signature:   int C_BaseCombatWeapon::GetPrimaryAttackActivity()
Description: Returns the weapon's primary attack activity.

Function:    C_BaseCombatWeapon::GetPrintName
Signature:   string C_BaseCombatWeapon::GetPrintName()

Function:    C_BaseCombatWeapon::GetSecondaryAmmoType
Signature:   int C_BaseCombatWeapon::GetSecondaryAmmoType()
Description: Get the weapon's secondary ammo type.

Function:    C_BaseCombatWeapon::GetSecondaryAttackActivity
Signature:   int C_BaseCombatWeapon::GetSecondaryAttackActivity()
Description: Returns the weapon's secondary attack activity.

Function:    C_BaseCombatWeapon::GetSlot
Signature:   int C_BaseCombatWeapon::GetSlot()

Function:    C_BaseCombatWeapon::GetSubType
Signature:   int C_BaseCombatWeapon::GetSubType()
Description: Get the weapon's subtype.

Function:    C_BaseCombatWeapon::GetViewModel
Signature:   string C_BaseCombatWeapon::GetViewModel(int)
Description: Get the weapon's view model.

Function:    C_BaseCombatWeapon::GetViewModelSequenceDuration
Signature:   float C_BaseCombatWeapon::GetViewModelSequenceDuration()
Description: Gets the sequence duration of the current view model animation.

Function:    C_BaseCombatWeapon::GetWeaponIdleTime
Signature:   float C_BaseCombatWeapon::GetWeaponIdleTime()
Description: Returns the next time WeaponIdle() will run.

Function:    C_BaseCombatWeapon::GetWeight
Signature:   int C_BaseCombatWeapon::GetWeight()
Description: Get the weapon's weight.

Function:    C_BaseCombatWeapon::GetWorldModel
Signature:   string C_BaseCombatWeapon::GetWorldModel()
Description: Get the weapon's world model.

Function:    C_BaseCombatWeapon::HasAnyAmmo
Signature:   bool C_BaseCombatWeapon::HasAnyAmmo()
Description: Check if the weapon currently has ammo or doesn't need ammo.

Function:    C_BaseCombatWeapon::HasPrimaryAmmo
Signature:   bool C_BaseCombatWeapon::HasPrimaryAmmo()
Description: Check if the weapon currently has ammo or doesn't need primary ammo.

Function:    C_BaseCombatWeapon::HasSecondaryAmmo
Signature:   bool C_BaseCombatWeapon::HasSecondaryAmmo()
Description: Check if the weapon currently has ammo or doesn't need secondary ammo.

Function:    C_BaseCombatWeapon::HasWeaponIdleTimeElapsed
Signature:   bool C_BaseCombatWeapon::HasWeaponIdleTimeElapsed()
Description: Returns true if the idle time has elapsed.

Function:    C_BaseCombatWeapon::IsViewModelSequenceFinished
Signature:   bool C_BaseCombatWeapon::IsViewModelSequenceFinished()
Description: Returns true if the current view model animation is finished.

Function:    C_BaseCombatWeapon::MinRange1
Signature:   float C_BaseCombatWeapon::MinRange1()
Description: Returns the closest this weapon can be used.

Function:    C_BaseCombatWeapon::MinRange2
Signature:   float C_BaseCombatWeapon::MinRange2()
Description: Returns the closest this weapon can be used.

Function:    C_BaseCombatWeapon::NextPrimaryAttack
Signature:   float C_BaseCombatWeapon::NextPrimaryAttack()
Description: Returns the next time PrimaryAttack() will run when the player is pressing +ATTACK.

Function:    C_BaseCombatWeapon::NextSecondaryAttack
Signature:   float C_BaseCombatWeapon::NextSecondaryAttack()
Description: Returns the next time SecondaryAttack() will run when the player is pressing +ATTACK2.

Function:    C_BaseCombatWeapon::ReloadsSingly
Signature:   bool C_BaseCombatWeapon::ReloadsSingly()
Description: Returns true if this weapon reloads 1 round at a time.

Function:    C_BaseCombatWeapon::SendWeaponAnim
Signature:   bool C_BaseCombatWeapon::SendWeaponAnim(int)
Description: Sends a weapon animation.

Function:    C_BaseCombatWeapon::UsesClipsForAmmo1
Signature:   bool C_BaseCombatWeapon::UsesClipsForAmmo1()
Description: Check if the weapon uses clips for primary ammo.

Function:    C_BaseCombatWeapon::UsesClipsForAmmo2
Signature:   bool C_BaseCombatWeapon::UsesClipsForAmmo2()
Description: Check if the weapon uses clips for secondary ammo.

Function:    C_BaseCombatWeapon::UsesPrimaryAmmo
Signature:   bool C_BaseCombatWeapon::UsesPrimaryAmmo()
Description: Check if the weapon uses primary ammo.

Function:    C_BaseCombatWeapon::UsesSecondaryAmmo
Signature:   bool C_BaseCombatWeapon::UsesSecondaryAmmo()
Description: Check if the weapon uses secondary ammo.

Function:    C_BaseCombatWeapon::WeaponClassify
Signature:   int C_BaseCombatWeapon::WeaponClassify()
Description: Returns the weapon's classify class from the WEPCLASS_ constant group

Function:    C_BaseCombatWeapon::WeaponSound
Signature:   void C_BaseCombatWeapon::WeaponSound(int, float)
Description: Plays one of the weapon's sounds.

Function:    C_BaseEntity::AddEFlags
Signature:   void C_BaseEntity::AddEFlags(int)
Description: Add Eflags

Function:    C_BaseEntity::AddEffects
Signature:   void C_BaseEntity::AddEffects(int)
Description: Add effect(s)

Function:    C_BaseEntity::AddFlag
Signature:   void C_BaseEntity::AddFlag(int)
Description: Add flag

Function:    C_BaseEntity::AddSolidFlags
Signature:   void C_BaseEntity::AddSolidFlags(int)
Description: Add solid flags

Function:    C_BaseEntity::ClearEffects
Signature:   void C_BaseEntity::ClearEffects()
Description: Clear effect(s)

Function:    C_BaseEntity::Destroy
Signature:   void C_BaseEntity::Destroy()
Description: Remove clientside entity

Function:    C_BaseEntity::EmitSound
Signature:   void C_BaseEntity::EmitSound(string)
Description: Plays a sound from this entity.

Function:    C_BaseEntity::EntityToWorldTransform
Signature:   handle C_BaseEntity::EntityToWorldTransform()
Description: Get the entity's transform

Function:    C_BaseEntity::EyeAngles
Signature:   Vector C_BaseEntity::EyeAngles()
Description: Get eye pitch, yaw, roll as a vector

Function:    C_BaseEntity::EyePosition
Signature:   Vector C_BaseEntity::EyePosition()
Description: Get vector to eye position - absolute coords

Function:    C_BaseEntity::FirstMoveChild
Signature:   handle C_BaseEntity::FirstMoveChild()

Function:    C_BaseEntity::FollowEntity
Signature:   void C_BaseEntity::FollowEntity(handle, bool)
Description: Begin following the specified entity. This makes this entity non-solid, parents it to the target entity, and teleports it to the specified entity's origin. The second parameter is whether or not to use bonemerging while following.

Function:    C_BaseEntity::GetAngles
Signature:   Vector C_BaseEntity::GetAngles()
Description: Get entity pitch, yaw, roll as a vector

Function:    C_BaseEntity::GetBoundingMaxs
Signature:   Vector C_BaseEntity::GetBoundingMaxs()
Description: Get a vector containing max bounds, centered on object

Function:    C_BaseEntity::GetBoundingMins
Signature:   Vector C_BaseEntity::GetBoundingMins()
Description: Get a vector containing min bounds, centered on object

Function:    C_BaseEntity::GetCenter
Signature:   Vector C_BaseEntity::GetCenter()
Description: Get vector to center of object - absolute coords

Function:    C_BaseEntity::GetClassname
Signature:   string C_BaseEntity::GetClassname()

Function:    C_BaseEntity::GetCollisionGroup
Signature:   int C_BaseEntity::GetCollisionGroup()
Description: Get the collision group

Function:    C_BaseEntity::GetEFlags
Signature:   int C_BaseEntity::GetEFlags()
Description: Get Eflags

Function:    C_BaseEntity::GetEffects
Signature:   int C_BaseEntity::GetEffects()
Description: Get effects

Function:    C_BaseEntity::GetFlags
Signature:   int C_BaseEntity::GetFlags()
Description: Get flags

Function:    C_BaseEntity::GetFollowedEntity
Signature:   handle C_BaseEntity::GetFollowedEntity()
Description: Get the entity we're following.

Function:    C_BaseEntity::GetForwardVector
Signature:   Vector C_BaseEntity::GetForwardVector()
Description: Get the forward vector of the entity

Function:    C_BaseEntity::GetHealth
Signature:   int C_BaseEntity::GetHealth()

Function:    C_BaseEntity::GetLocalAngles
Signature:   Vector C_BaseEntity::GetLocalAngles()
Description: GetLocalAngles

Function:    C_BaseEntity::GetLocalOrigin
Signature:   Vector C_BaseEntity::GetLocalOrigin()
Description: GetLocalOrigin

Function:    C_BaseEntity::GetMaxHealth
Signature:   int C_BaseEntity::GetMaxHealth()

Function:    C_BaseEntity::GetModelName
Signature:   string C_BaseEntity::GetModelName()
Description: Returns the name of the model

Function:    C_BaseEntity::GetMoveParent
Signature:   handle C_BaseEntity::GetMoveParent()
Description: If in hierarchy, retrieves the entity's parent

Function:    C_BaseEntity::GetMoveType
Signature:   int C_BaseEntity::GetMoveType()
Description: Get the move type

Function:    C_BaseEntity::GetName
Signature:   string C_BaseEntity::GetName()

Function:    C_BaseEntity::GetOrCreatePrivateScriptScope
Signature:   handle C_BaseEntity::GetOrCreatePrivateScriptScope()
Description: Create and retrieve the script-side data associated with an entity

Function:    C_BaseEntity::GetOrigin
Signature:   Vector C_BaseEntity::GetOrigin()

Function:    C_BaseEntity::GetOwner
Signature:   handle C_BaseEntity::GetOwner()
Description: Gets this entity's owner

Function:    C_BaseEntity::GetPhysicsObject
Signature:   handle C_BaseEntity::GetPhysicsObject()
Description: Get the entity's physics object if it has one

Function:    C_BaseEntity::GetRenderAlpha
Signature:   int C_BaseEntity::GetRenderAlpha()
Description: Get the render color's alpha value

Function:    C_BaseEntity::GetRenderColorB
Signature:   int C_BaseEntity::GetRenderColorB()
Description: Get the render color's B value

Function:    C_BaseEntity::GetRenderColorG
Signature:   int C_BaseEntity::GetRenderColorG()
Description: Get the render color's G value

Function:    C_BaseEntity::GetRenderColorR
Signature:   int C_BaseEntity::GetRenderColorR()
Description: Get the render color's R value

Function:    C_BaseEntity::GetRenderColorVector
Signature:   Vector C_BaseEntity::GetRenderColorVector()
Description: Get the render color as a vector

Function:    C_BaseEntity::GetRenderMode
Signature:   int C_BaseEntity::GetRenderMode()
Description: Get render mode

Function:    C_BaseEntity::GetRightVector
Signature:   Vector C_BaseEntity::GetRightVector()
Description: Get the right vector of the entity

Function:    C_BaseEntity::GetRootMoveParent
Signature:   handle C_BaseEntity::GetRootMoveParent()
Description: If in hierarchy, walks up the hierarchy to find the root parent

Function:    C_BaseEntity::GetScriptScope
Signature:   handle C_BaseEntity::GetScriptScope()
Description: Retrieve the script-side data associated with an entity

Function:    C_BaseEntity::GetSolidFlags
Signature:   int C_BaseEntity::GetSolidFlags()
Description: Get solid flags

Function:    C_BaseEntity::GetSoundDuration
Signature:   float C_BaseEntity::GetSoundDuration(string, string)
Description: Returns float duration of the sound. Takes soundname and optional actormodelname.

Function:    C_BaseEntity::GetTeam
Signature:   int C_BaseEntity::GetTeam()
Description: Gets this entity's team

Function:    C_BaseEntity::GetUpVector
Signature:   Vector C_BaseEntity::GetUpVector()
Description: Get the up vector of the entity

Function:    C_BaseEntity::GetWaterLevel
Signature:   int C_BaseEntity::GetWaterLevel()
Description: Get current level of water submergence

Function:    C_BaseEntity::IsEffectActive
Signature:   bool C_BaseEntity::IsEffectActive(int)
Description: Check if an effect is active

Function:    C_BaseEntity::IsFollowingEntity
Signature:   bool C_BaseEntity::IsFollowingEntity()
Description: Returns true if this entity is following another entity.

Function:    C_BaseEntity::IsNPC
Signature:   bool C_BaseEntity::IsNPC()
Description: Returns true if this entity is a NPC.

Function:    C_BaseEntity::IsPlayer
Signature:   bool C_BaseEntity::IsPlayer()
Description: Returns true if this entity is a player.

Function:    C_BaseEntity::IsWeapon
Signature:   bool C_BaseEntity::IsWeapon()
Description: Returns true if this entity is a weapon.

Function:    C_BaseEntity::IsWorld
Signature:   bool C_BaseEntity::IsWorld()
Description: Returns true if this entity is the world.

Function:    C_BaseEntity::NextMovePeer
Signature:   handle C_BaseEntity::NextMovePeer()

Function:    C_BaseEntity::PrecacheSoundScript
Signature:   void C_BaseEntity::PrecacheSoundScript(string)
Description: Precache a sound for later playing.

Function:    C_BaseEntity::RemoveEFlags
Signature:   void C_BaseEntity::RemoveEFlags(int)
Description: Remove Eflags

Function:    C_BaseEntity::RemoveEffects
Signature:   void C_BaseEntity::RemoveEffects(int)
Description: Remove effect(s)

Function:    C_BaseEntity::RemoveFlag
Signature:   void C_BaseEntity::RemoveFlag(int)
Description: Remove flag

Function:    C_BaseEntity::RemoveSolidFlags
Signature:   void C_BaseEntity::RemoveSolidFlags(int)
Description: Remove solid flags

Function:    C_BaseEntity::SetAngles
Signature:   void C_BaseEntity::SetAngles(Vector)
Description: Set entity pitch, yaw, roll

Function:    C_BaseEntity::SetCollisionGroup
Signature:   void C_BaseEntity::SetCollisionGroup(int)
Description: Set the collision group

Function:    C_BaseEntity::SetContextThink
Signature:   void C_BaseEntity::SetContextThink(string, handle, float)
Description: Set a think function on this entity.

Function:    C_BaseEntity::SetEffects
Signature:   void C_BaseEntity::SetEffects(int)
Description: Set effect(s)

Function:    C_BaseEntity::SetForwardVector
Signature:   void C_BaseEntity::SetForwardVector(Vector)
Description: Set the orientation of the entity to have this forward vector

Function:    C_BaseEntity::SetLocalAngles
Signature:   void C_BaseEntity::SetLocalAngles(Vector)
Description: SetLocalAngles

Function:    C_BaseEntity::SetLocalOrigin
Signature:   void C_BaseEntity::SetLocalOrigin(Vector)
Description: SetLocalOrigin

Function:    C_BaseEntity::SetModel
Signature:   bool C_BaseEntity::SetModel(string)
Description: Set client-only entity model

Function:    C_BaseEntity::SetMoveType
Signature:   void C_BaseEntity::SetMoveType(int)
Description: Set the move type

Function:    C_BaseEntity::SetOrigin
Signature:   void C_BaseEntity::SetOrigin(Vector)

Function:    C_BaseEntity::SetOwner
Signature:   void C_BaseEntity::SetOwner(handle)
Description: Sets this entity's owner

Function:    C_BaseEntity::SetParent
Signature:   void C_BaseEntity::SetParent(handle, string)

Function:    C_BaseEntity::SetRenderAlpha
Signature:   void C_BaseEntity::SetRenderAlpha(int)
Description: Set the render color's alpha value

Function:    C_BaseEntity::SetRenderColor
Signature:   void C_BaseEntity::SetRenderColor(int, int, int)
Description: Set the render color

Function:    C_BaseEntity::SetRenderColorB
Signature:   void C_BaseEntity::SetRenderColorB(int)
Description: Set the render color's B value

Function:    C_BaseEntity::SetRenderColorG
Signature:   void C_BaseEntity::SetRenderColorG(int)
Description: Set the render color's G value

Function:    C_BaseEntity::SetRenderColorR
Signature:   void C_BaseEntity::SetRenderColorR(int)
Description: Set the render color's R value

Function:    C_BaseEntity::SetRenderColorVector
Signature:   void C_BaseEntity::SetRenderColorVector(Vector)
Description: Set the render color as a vector

Function:    C_BaseEntity::SetRenderMode
Signature:   void C_BaseEntity::SetRenderMode(int)
Description: Set render mode

Function:    C_BaseEntity::SetSize
Signature:   void C_BaseEntity::SetSize(Vector, Vector)

Function:    C_BaseEntity::StopFollowingEntity
Signature:   void C_BaseEntity::StopFollowingEntity()
Description: Stops following an entity if we're following one.

Function:    C_BaseEntity::StopSound
Signature:   void C_BaseEntity::StopSound(string)
Description: Stops a sound from this entity.

Function:    C_BaseEntity::ValidateScriptScope
Signature:   bool C_BaseEntity::ValidateScriptScope()
Description: Ensure that an entity's script scope has been created

Function:    C_BaseEntity::entindex
Signature:   int C_BaseEntity::entindex()

Function:    C_BaseGrenade::GetBlastForce
Signature:   Vector C_BaseGrenade::GetBlastForce()
Description: Gets the grenade's blast force override. Grenades which use base damage force calculations return 0,0,0

Function:    C_BaseGrenade::GetDamage
Signature:   float C_BaseGrenade::GetDamage()
Description: Gets the grenade's blast damage.

Function:    C_BaseGrenade::GetDamageRadius
Signature:   float C_BaseGrenade::GetDamageRadius()
Description: Gets the grenade's blast damage radius.

Function:    C_BaseGrenade::GetOriginalThrower
Signature:   handle C_BaseGrenade::GetOriginalThrower()
Description: Gets the grenade's original thrower after the thrower was changed due to being picked up by a gravity gun or something.

Function:    C_BaseGrenade::GetThrower
Signature:   handle C_BaseGrenade::GetThrower()
Description: Gets the grenade's thrower.

Function:    C_BaseGrenade::GetTimer
Signature:   float C_BaseGrenade::GetTimer()
Description: Gets the grenade's detonate time if it has one.

Function:    C_BaseGrenade::GetWarnAITime
Signature:   float C_BaseGrenade::GetWarnAITime()
Description: Gets the time at which the grenade will warn/has warned AI.

Function:    C_BaseGrenade::HasWarnedAI
Signature:   bool C_BaseGrenade::HasWarnedAI()
Description: Whether or not the grenade has issued its DANGER sound to the world sound list yet.

Function:    C_BaseGrenade::IsLive
Signature:   bool C_BaseGrenade::IsLive()
Description: Whether or not the grenade has issued its DANGER sound to the world sound list yet.

Function:    C_BaseGrenade::SetDamage
Signature:   void C_BaseGrenade::SetDamage(float)
Description: Sets the grenade's blast damage.

Function:    C_BaseGrenade::SetDamageRadius
Signature:   void C_BaseGrenade::SetDamageRadius(float)
Description: Sets the grenade's blast damage radius.

Function:    C_BaseGrenade::SetThrower
Signature:   void C_BaseGrenade::SetThrower(handle)
Description: Sets the grenade's thrower.

Function:    C_ClientRagdoll::FadeOut
Signature:   void C_ClientRagdoll::FadeOut()
Description: Fades out the ragdoll and removes it from the client.

Function:    C_ClientRagdoll::GetRagdollObject
Signature:   handle C_ClientRagdoll::GetRagdollObject(int)
Description: Gets the ragdoll object of the specified index.

Function:    C_ClientRagdoll::GetRagdollObjectCount
Signature:   int C_ClientRagdoll::GetRagdollObjectCount()
Description: Gets the number of ragdoll objects on this ragdoll.

Function:    C_PointCommentaryNode::GetCommentaryFile
Signature:   string C_PointCommentaryNode::GetCommentaryFile()

Function:    C_PointCommentaryNode::GetCommentaryType
Signature:   int C_PointCommentaryNode::GetCommentaryType()

Function:    C_PointCommentaryNode::GetFootnote
Signature:   string C_PointCommentaryNode::GetFootnote()

Function:    C_PointCommentaryNode::GetPrintName
Signature:   string C_PointCommentaryNode::GetPrintName()

Function:    C_PointCommentaryNode::GetSpeakers
Signature:   string C_PointCommentaryNode::GetSpeakers()

Function:    C_PointCommentaryNode::IsActive
Signature:   bool C_PointCommentaryNode::IsActive()

Function:    C_PointCommentaryNode::SetCommentaryFile
Signature:   void C_PointCommentaryNode::SetCommentaryFile(string)

Function:    C_PointCommentaryNode::SetCommentaryType
Signature:   void C_PointCommentaryNode::SetCommentaryType(int)

Function:    C_PointCommentaryNode::SetFootnote
Signature:   void C_PointCommentaryNode::SetFootnote(string)

Function:    C_PointCommentaryNode::SetPrintName
Signature:   void C_PointCommentaryNode::SetPrintName(string)

Function:    C_PointCommentaryNode::SetSpeakers
Signature:   void C_PointCommentaryNode::SetSpeakers(string)

Function:    C_RopeKeyframe::AnyPointsMoved
Signature:   bool C_RopeKeyframe::AnyPointsMoved()
Description: Returns true if any points have moved recently

Function:    C_RopeKeyframe::GetEndEntity
Signature:   handle C_RopeKeyframe::GetEndEntity()
Description: Gets the rope's end entity

Function:    C_RopeKeyframe::GetNodePosition
Signature:   Vector C_RopeKeyframe::GetNodePosition(int)
Description: Gets the position of the specified node index

Function:    C_RopeKeyframe::GetNumNodes
Signature:   int C_RopeKeyframe::GetNumNodes()
Description: Gets the number of nodes available

Function:    C_RopeKeyframe::GetRopeFlags
Signature:   int C_RopeKeyframe::GetRopeFlags()
Description: Gets the rope's flags

Function:    C_RopeKeyframe::GetStartEntity
Signature:   handle C_RopeKeyframe::GetStartEntity()
Description: Gets the rope's start entity

Function:    C_RopeKeyframe::SetColorMod
Signature:   void C_RopeKeyframe::SetColorMod(Vector)
Description: Sets the rope's color mod value

Function:    C_RopeKeyframe::SetRopeFlags
Signature:   void C_RopeKeyframe::SetRopeFlags(int)
Description: Sets the rope's flags

Function:    C_RopeKeyframe::SetSlack
Signature:   void C_RopeKeyframe::SetSlack(int)
Description: Sets the rope's slack value (extra length)

Function:    C_RopeKeyframe::SetupHangDistance
Signature:   void C_RopeKeyframe::SetupHangDistance(float)
Description: Sets the rope's hang distance

Function:    C_RopeKeyframe::ShakeRope
Signature:   void C_RopeKeyframe::ShakeRope(Vector, float, float)
Description: Shakes the rope with the specified center, radius, and magnitude

Function:    CalcClosestPointOnAABB
Signature:   Vector CalcClosestPointOnAABB(Vector, Vector, Vector)
Description: Returns the closest point on a bounding box.

Function:    CalcClosestPointOnLine
Signature:   Vector CalcClosestPointOnLine(Vector, Vector, Vector)
Description: Returns the closest point on a line.

Function:    CalcClosestPointOnLineSegment
Signature:   Vector CalcClosestPointOnLineSegment(Vector, Vector, Vector)
Description: Returns the closest point on a line segment.

Function:    CalcDistanceToLine
Signature:   float CalcDistanceToLine(Vector, Vector, Vector)
Description: Returns the distance to a line.

Function:    CalcDistanceToLineSegment
Signature:   float CalcDistanceToLineSegment(Vector, Vector, Vector)
Description: Returns the distance to a line segment.

Function:    CalcSqrDistanceToAABB
Signature:   float CalcSqrDistanceToAABB(Vector, Vector, Vector)
Description: Returns the squared distance to a bounding box.

Function:    CalculateBulletDamageForce
Signature:   void CalculateBulletDamageForce(handle, int, Vector, Vector, float)
Description: Fill out a damage info handle with a damage force for a bullet impact.

Function:    CalculateExplosiveDamageForce
Signature:   void CalculateExplosiveDamageForce(handle, Vector, Vector, float)
Description: Fill out a damage info handle with a damage force for an explosive.

Function:    CalculateMeleeDamageForce
Signature:   void CalculateMeleeDamageForce(handle, Vector, Vector, float)
Description: Fill out a damage info handle with a damage force for a melee impact.

Function:    ClearSavedTable
Signature:   void ClearSavedTable(string)
Description: Removes the table with the given context.

Function:    Color::GetRawColor
Signature:   int Color::GetRawColor()
Description: Gets the raw color integer.

Function:    Color::SetColor
Signature:   void Color::SetColor(int, int, int, int)
Description: Sets the color.

Function:    Color::SetRawColor
Signature:   void Color::SetRawColor(int)
Description: Sets the raw color integer.

Function:    Con_IsVisible
Signature:   bool Con_IsVisible()
Description: Returns true if the console is visible

Function:    ConcatTransforms
Signature:   void ConcatTransforms(handle, handle, handle)
Description: Concatenates two transformation matrices into another matrix.

Function:    CreateDamageInfo
Signature:   handle CreateDamageInfo(handle, handle, Vector, Vector, float, int)

Function:    CreateFireBulletsInfo
Signature:   handle CreateFireBulletsInfo(int, Vector, Vector, Vector, float, handle)

Function:    CreateProp
Signature:   handle CreateProp(string, Vector, string, int)
Description: Create an animating prop

Function:    CreateRope
Signature:   handle CreateRope(handle, handle, int, int, float, string, int, int)
Description: Creates a single rope between two entities. Can optionally follow specific attachments.

Function:    CurrentViewAngles
Signature:   Vector CurrentViewAngles()

Function:    CurrentViewForward
Signature:   Vector CurrentViewForward()

Function:    CurrentViewOrigin
Signature:   Vector CurrentViewOrigin()

Function:    CurrentViewRight
Signature:   Vector CurrentViewRight()

Function:    CurrentViewUp
Signature:   Vector CurrentViewUp()

Function:    DecalTrace
Signature:   void DecalTrace(handle, string)
Description: Creates a dynamic decal based on the given trace info. The trace information can be generated by TraceLineComplex() and the decal name must be from decals_subrect.txt.

Function:    DestroyDamageInfo
Signature:   void DestroyDamageInfo(handle)

Function:    DestroyFireBulletsInfo
Signature:   void DestroyFireBulletsInfo(handle)

Function:    DispatchParticleEffect
Signature:   function DispatchParticleEffect(particleName, origin, angles, entity)
Description: Dispatches a one-off particle system

Function:    DoIncludeScript
Signature:   bool DoIncludeScript(string, handle)
Description: Execute a script (internal)

Function:    EmitSoundParamsOn
Signature:   void EmitSoundParamsOn(handle, handle)
Description: Play EmitSound_t params on an entity.

Function:    EmitSound_t::ClearOrigin
Signature:   void EmitSound_t::ClearOrigin()
Description: Clears the sound's origin override if it has one.

Function:    EmitSound_t::GetChannel
Signature:   int EmitSound_t::GetChannel()

Function:    EmitSound_t::GetEmitCloseCaption
Signature:   float EmitSound_t::GetEmitCloseCaption()
Description: Gets whether or not the sound will emit closed captioning/subtitles.

Function:    EmitSound_t::GetFlags
Signature:   int EmitSound_t::GetFlags()
Description: Gets the sound's flags. See the 'SND_' set of constants.

Function:    EmitSound_t::GetOrigin
Signature:   Vector EmitSound_t::GetOrigin()
Description: Gets the sound's origin override.

Function:    EmitSound_t::GetSoundLevel
Signature:   int EmitSound_t::GetSoundLevel()
Description: Gets the sound's level in decibels. (Note that this may not apply to soundscripts)

Function:    EmitSound_t::GetSoundName
Signature:   string EmitSound_t::GetSoundName()
Description: Gets the sound's file path or soundscript name.

Function:    EmitSound_t::GetSoundScriptHandle
Signature:   int EmitSound_t::GetSoundScriptHandle()

Function:    EmitSound_t::GetSoundTime
Signature:   float EmitSound_t::GetSoundTime()
Description: Gets the time the sound will begin, relative to Time().

Function:    EmitSound_t::GetSpeakerEntity
Signature:   int EmitSound_t::GetSpeakerEntity()
Description: Gets the sound's original source if it is being transmitted by a microphone.

Function:    EmitSound_t::GetSpecialDSP
Signature:   int EmitSound_t::GetSpecialDSP()

Function:    EmitSound_t::GetVolume
Signature:   float EmitSound_t::GetVolume()
Description: (Note that this may not apply to soundscripts)

Function:    EmitSound_t::GetWarnOnDirectWaveReference
Signature:   float EmitSound_t::GetWarnOnDirectWaveReference()
Description: Gets whether or not the sound will send a message to the console if it references a direct sound file instead of a soundscript.

Function:    EmitSound_t::GetWarnOnMissingCloseCaption
Signature:   float EmitSound_t::GetWarnOnMissingCloseCaption()
Description: Gets whether or not the sound will send a message to the console if there is no corresponding closed captioning token.

Function:    EmitSound_t::HasOrigin
Signature:   bool EmitSound_t::HasOrigin()
Description: Returns true if the sound has an origin override.

Function:    EmitSound_t::SetChannel
Signature:   void EmitSound_t::SetChannel(int)

Function:    EmitSound_t::SetEmitCloseCaption
Signature:   void EmitSound_t::SetEmitCloseCaption(bool)
Description: Sets whether or not the sound will emit closed captioning/subtitles.

Function:    EmitSound_t::SetFlags
Signature:   void EmitSound_t::SetFlags(int)
Description: Sets the sound's flags. See the 'SND_' set of constants.

Function:    EmitSound_t::SetOrigin
Signature:   void EmitSound_t::SetOrigin(Vector)
Description: Sets the sound's origin override.

Function:    EmitSound_t::SetSoundLevel
Signature:   void EmitSound_t::SetSoundLevel(int)
Description: Sets the sound's level in decibels. (Note that this may not apply to soundscripts)

Function:    EmitSound_t::SetSoundName
Signature:   void EmitSound_t::SetSoundName(string)
Description: Sets the sound's file path or soundscript name.

Function:    EmitSound_t::SetSoundScriptHandle
Signature:   void EmitSound_t::SetSoundScriptHandle(int)

Function:    EmitSound_t::SetSoundTime
Signature:   void EmitSound_t::SetSoundTime(float)
Description: Sets the time the sound will begin, relative to Time().

Function:    EmitSound_t::SetSpeakerEntity
Signature:   void EmitSound_t::SetSpeakerEntity(int)
Description: Sets the sound's original source if it is being transmitted by a microphone.

Function:    EmitSound_t::SetSpecialDSP
Signature:   void EmitSound_t::SetSpecialDSP(int)

Function:    EmitSound_t::SetVolume
Signature:   void EmitSound_t::SetVolume(float)
Description: (Note that this may not apply to soundscripts)

Function:    EmitSound_t::SetWarnOnDirectWaveReference
Signature:   void EmitSound_t::SetWarnOnDirectWaveReference(bool)
Description: Sets whether or not the sound will send a message to the console if it references a direct sound file instead of a soundscript.

Function:    EmitSound_t::SetWarnOnMissingCloseCaption
Signature:   void EmitSound_t::SetWarnOnMissingCloseCaption(bool)
Description: Sets whether or not the sound will send a message to the console if there is no corresponding closed captioning token.

Function:    EntIndexToHScript
Signature:   handle EntIndexToHScript(int)
Description: Returns the script handle for the given entity index.

Function:    EntitiesAtPoint
Signature:   void EntitiesAtPoint(handle, int, Vector, int)
Description: Gets all entities which are intersecting a point in space. This function copies them to an array with a maximum number of elements.

Function:    EntitiesInBox
Signature:   void EntitiesInBox(handle, int, Vector, Vector, int)
Description: Gets all entities which are within a worldspace box. This function copies them to an array with a maximum number of elements.

Function:    EntitiesInSphere
Signature:   void EntitiesInSphere(handle, int, Vector, float, int)
Description: Gets all entities which are within a sphere. This function copies them to an array with a maximum number of elements.

Function:    ExponentialDecay
Signature:   float ExponentialDecay(float, float, float)
Description: decayTo is factor the value should decay to in decayTime

Function:    FLerp
Signature:   float FLerp(float, float, float, float, float)

Function:    FileExists
Signature:   bool FileExists(string)
Description: Returns true if the file exists.

Function:    FileToKeyValues
Signature:   handle FileToKeyValues(string)
Description: Returns the CScriptKeyValues from the file, null if no file or file is too big.

Function:    FileToString
Signature:   string FileToString(string)
Description: Returns the string from the file, null if no file or file is too big.

Function:    FireBulletsInfo_t::GetAdditionalIgnoreEnt
Signature:   handle FireBulletsInfo_t::GetAdditionalIgnoreEnt()

Function:    FireBulletsInfo_t::GetAmmoType
Signature:   int FireBulletsInfo_t::GetAmmoType()

Function:    FireBulletsInfo_t::GetAttacker
Signature:   handle FireBulletsInfo_t::GetAttacker()

Function:    FireBulletsInfo_t::GetDamage
Signature:   float FireBulletsInfo_t::GetDamage()
Description: Gets the damage the bullets should deal. 0 = use ammo type

Function:    FireBulletsInfo_t::GetDamageForceScale
Signature:   float FireBulletsInfo_t::GetDamageForceScale()

Function:    FireBulletsInfo_t::GetDirShooting
Signature:   Vector FireBulletsInfo_t::GetDirShooting()

Function:    FireBulletsInfo_t::GetDistance
Signature:   float FireBulletsInfo_t::GetDistance()
Description: Gets the distance the bullets should travel.

Function:    FireBulletsInfo_t::GetFlags
Signature:   int FireBulletsInfo_t::GetFlags()
Description: Gets the flags the bullets should use.

Function:    FireBulletsInfo_t::GetPlayerDamage
Signature:   int FireBulletsInfo_t::GetPlayerDamage()
Description: Gets the damage the bullets should deal when hitting the player. 0 = use regular damage

Function:    FireBulletsInfo_t::GetPrimaryAttack
Signature:   bool FireBulletsInfo_t::GetPrimaryAttack()
Description: Gets whether the bullets came from a primary attack.

Function:    FireBulletsInfo_t::GetShots
Signature:   int FireBulletsInfo_t::GetShots()
Description: Gets the number of shots which should be fired.

Function:    FireBulletsInfo_t::GetSource
Signature:   Vector FireBulletsInfo_t::GetSource()

Function:    FireBulletsInfo_t::GetSpread
Signature:   Vector FireBulletsInfo_t::GetSpread()

Function:    FireBulletsInfo_t::GetTracerFreq
Signature:   int FireBulletsInfo_t::GetTracerFreq()

Function:    FireBulletsInfo_t::SetAdditionalIgnoreEnt
Signature:   void FireBulletsInfo_t::SetAdditionalIgnoreEnt(handle)

Function:    FireBulletsInfo_t::SetAmmoType
Signature:   void FireBulletsInfo_t::SetAmmoType(int)

Function:    FireBulletsInfo_t::SetAttacker
Signature:   void FireBulletsInfo_t::SetAttacker(handle)

Function:    FireBulletsInfo_t::SetDamage
Signature:   void FireBulletsInfo_t::SetDamage(float)
Description: Sets the damage the bullets should deal. 0 = use ammo type

Function:    FireBulletsInfo_t::SetDamageForceScale
Signature:   void FireBulletsInfo_t::SetDamageForceScale(float)

Function:    FireBulletsInfo_t::SetDirShooting
Signature:   void FireBulletsInfo_t::SetDirShooting(Vector)

Function:    FireBulletsInfo_t::SetDistance
Signature:   void FireBulletsInfo_t::SetDistance(float)
Description: Sets the distance the bullets should travel.

Function:    FireBulletsInfo_t::SetFlags
Signature:   void FireBulletsInfo_t::SetFlags(float)
Description: Sets the flags the bullets should use.

Function:    FireBulletsInfo_t::SetPlayerDamage
Signature:   void FireBulletsInfo_t::SetPlayerDamage(float)
Description: Sets the damage the bullets should deal when hitting the player. 0 = use regular damage

Function:    FireBulletsInfo_t::SetPrimaryAttack
Signature:   void FireBulletsInfo_t::SetPrimaryAttack(bool)
Description: Sets whether the bullets came from a primary attack.

Function:    FireBulletsInfo_t::SetShots
Signature:   void FireBulletsInfo_t::SetShots(int)
Description: Sets the number of shots which should be fired.

Function:    FireBulletsInfo_t::SetSource
Signature:   void FireBulletsInfo_t::SetSource(Vector)

Function:    FireBulletsInfo_t::SetSpread
Signature:   void FireBulletsInfo_t::SetSpread(Vector)

Function:    FireBulletsInfo_t::SetTracerFreq
Signature:   void FireBulletsInfo_t::SetTracerFreq(int)

Function:    FireGameEvent
Signature:   void FireGameEvent(string, handle)
Description: Fire a game event.

Function:    Frame::AddTickSignal
Signature:   void Frame::AddTickSignal(int)

Function:    Frame::Close
Signature:   void Frame::Close()

Function:    Frame::Destroy
Signature:   void Frame::Destroy()

Function:    Frame::DrawBox
Signature:   void Frame::DrawBox(int, int, int, int, int, int, int, int, bool)

Function:    Frame::DrawBoxFade
Signature:   void Frame::DrawBoxFade(int, int, int, int, int, int, int, int, int, int, bool, bool)

Function:    Frame::GetAlpha
Signature:   int Frame::GetAlpha()

Function:    Frame::GetChildren
Signature:   void Frame::GetChildren(handle)

Function:    Frame::GetName
Signature:   string Frame::GetName()

Function:    Frame::GetParent
Signature:   handle Frame::GetParent()

Function:    Frame::GetTall
Signature:   int Frame::GetTall()

Function:    Frame::GetWide
Signature:   int Frame::GetWide()

Function:    Frame::GetXPos
Signature:   int Frame::GetXPos()

Function:    Frame::GetYPos
Signature:   int Frame::GetYPos()

Function:    Frame::GetZPos
Signature:   int Frame::GetZPos()

Function:    Frame::HasFocus
Signature:   bool Frame::HasFocus()

Function:    Frame::IsCursorOver
Signature:   bool Frame::IsCursorOver()

Function:    Frame::IsEnabled
Signature:   bool Frame::IsEnabled()

Function:    Frame::IsVisible
Signature:   bool Frame::IsVisible()

Function:    Frame::IsWithin
Signature:   bool Frame::IsWithin(int, int)

Function:    Frame::MakePopup
Signature:   void Frame::MakePopup()

Function:    Frame::MakeReadyForUse
Signature:   void Frame::MakeReadyForUse()

Function:    Frame::MoveToFront
Signature:   void Frame::MoveToFront()

Function:    Frame::RequestFocus
Signature:   void Frame::RequestFocus()

Function:    Frame::SetAlpha
Signature:   void Frame::SetAlpha(int)

Function:    Frame::SetBgColor
Signature:   void Frame::SetBgColor(int, int, int, int)

Function:    Frame::SetCallback
Signature:   void Frame::SetCallback(string, handle)

Function:    Frame::SetCloseButtonVisible
Signature:   void Frame::SetCloseButtonVisible(bool)

Function:    Frame::SetCursor
Signature:   void Frame::SetCursor(int)

Function:    Frame::SetDeleteSelfOnClose
Signature:   void Frame::SetDeleteSelfOnClose(bool)

Function:    Frame::SetEnabled
Signature:   void Frame::SetEnabled(bool)

Function:    Frame::SetFgColor
Signature:   void Frame::SetFgColor(int, int, int, int)

Function:    Frame::SetKeyBoardInputEnabled
Signature:   void Frame::SetKeyBoardInputEnabled(bool)

Function:    Frame::SetMinimumSize
Signature:   void Frame::SetMinimumSize(int, int)

Function:    Frame::SetMouseInputEnabled
Signature:   void Frame::SetMouseInputEnabled(bool)

Function:    Frame::SetMoveable
Signature:   void Frame::SetMoveable(bool)

Function:    Frame::SetPaintBackgroundEnabled
Signature:   void Frame::SetPaintBackgroundEnabled(bool)

Function:    Frame::SetPaintBackgroundType
Signature:   void Frame::SetPaintBackgroundType(int)

Function:    Frame::SetPaintBorderEnabled
Signature:   void Frame::SetPaintBorderEnabled(bool)

Function:    Frame::SetPaintEnabled
Signature:   void Frame::SetPaintEnabled(bool)

Function:    Frame::SetParent
Signature:   void Frame::SetParent(handle)

Function:    Frame::SetPos
Signature:   void Frame::SetPos(int, int)

Function:    Frame::SetPostChildPaintEnabled
Signature:   void Frame::SetPostChildPaintEnabled(bool)

Function:    Frame::SetSize
Signature:   void Frame::SetSize(int, int)

Function:    Frame::SetSizeable
Signature:   void Frame::SetSizeable(bool)

Function:    Frame::SetTall
Signature:   void Frame::SetTall(int)

Function:    Frame::SetTitle
Signature:   void Frame::SetTitle(string)

Function:    Frame::SetTitleBarVisible
Signature:   void Frame::SetTitleBarVisible(bool)

Function:    Frame::SetVisible
Signature:   void Frame::SetVisible(bool)

Function:    Frame::SetWide
Signature:   void Frame::SetWide(int)

Function:    Frame::SetZPos
Signature:   void Frame::SetZPos(int)

Function:    FrameTime
Signature:   float FrameTime()
Description: Get the time spent on the client in the last frame

Function:    FreeMatrixInstance
Signature:   void FreeMatrixInstance(handle)
Description: Frees an allocated matrix instance.

Function:    FreeQuaternionInstance
Signature:   void FreeQuaternionInstance(handle)
Description: Frees an allocated quaternion instance.

Function:    Gain
Signature:   float Gain(float, float)
Description: Gain is similar to Bias, but biasAmt biases towards or away from 0.5.

Function:    GetCPUUsage
Signature:   float GetCPUUsage()
Description: Get CPU usage percentage.

Function:    GetFrameCount
Signature:   int GetFrameCount()
Description: Absolute frame counter

Function:    GetMapName
Signature:   string GetMapName()
Description: Get the name of the map.

Function:    GetPhysAngVelocity
Signature:   Vector GetPhysAngVelocity(handle)
Description: Gets physics angular velocity for the given VPhysics object

Function:    GetPhysVelocity
Signature:   Vector GetPhysVelocity(handle)
Description: Gets physics velocity for the given VPhysics object

Function:    GuessDamageForce
Signature:   void GuessDamageForce(handle, Vector, Vector, float)
Description: Try and guess the physics force to use.

Function:    IInput::BindingForKey
Signature:   string IInput::BindingForKey(int)

Function:    IInput::ButtonCodeToString
Signature:   string IInput::ButtonCodeToString(int)

Function:    IInput::GetAnalogDelta
Signature:   int IInput::GetAnalogDelta(int)

Function:    IInput::GetAnalogValue
Signature:   int IInput::GetAnalogValue(int)

Function:    IInput::IsButtonDown
Signature:   bool IInput::IsButtonDown(int)

Function:    IInput::LookupBinding
Signature:   string IInput::LookupBinding(string)

Function:    IInput::MakeWeaponSelection
Signature:   void IInput::MakeWeaponSelection(handle)

Function:    IInput::SetCursorPos
Signature:   void IInput::SetCursorPos(int, int)

Function:    IInput::StringToButtonCode
Signature:   int IInput::StringToButtonCode(string)

Function:    IPhysicsObject::ApplyForceCenter
Signature:   void IPhysicsObject::ApplyForceCenter(Vector)

Function:    IPhysicsObject::ApplyForceOffset
Signature:   void IPhysicsObject::ApplyForceOffset(Vector, Vector)

Function:    IPhysicsObject::ApplyTorqueCenter
Signature:   void IPhysicsObject::ApplyTorqueCenter(Vector)

Function:    IPhysicsObject::EnableCollisions
Signature:   void IPhysicsObject::EnableCollisions(bool)

Function:    IPhysicsObject::EnableDrag
Signature:   void IPhysicsObject::EnableDrag(bool)

Function:    IPhysicsObject::EnableGravity
Signature:   void IPhysicsObject::EnableGravity(bool)

Function:    IPhysicsObject::EnableMotion
Signature:   void IPhysicsObject::EnableMotion(bool)

Function:    IPhysicsObject::GetInertia
Signature:   Vector IPhysicsObject::GetInertia()

Function:    IPhysicsObject::GetInvInertia
Signature:   Vector IPhysicsObject::GetInvInertia()

Function:    IPhysicsObject::GetInvMass
Signature:   float IPhysicsObject::GetInvMass()

Function:    IPhysicsObject::GetMass
Signature:   float IPhysicsObject::GetMass()

Function:    IPhysicsObject::GetName
Signature:   string IPhysicsObject::GetName()

Function:    IPhysicsObject::IsAsleep
Signature:   bool IPhysicsObject::IsAsleep()

Function:    IPhysicsObject::IsAttachedToConstraint
Signature:   bool IPhysicsObject::IsAttachedToConstraint(bool)

Function:    IPhysicsObject::IsCollisionEnabled
Signature:   bool IPhysicsObject::IsCollisionEnabled()

Function:    IPhysicsObject::IsDragEnabled
Signature:   bool IPhysicsObject::IsDragEnabled()

Function:    IPhysicsObject::IsFluid
Signature:   bool IPhysicsObject::IsFluid()

Function:    IPhysicsObject::IsGravityEnabled
Signature:   bool IPhysicsObject::IsGravityEnabled()

Function:    IPhysicsObject::IsHinged
Signature:   bool IPhysicsObject::IsHinged()

Function:    IPhysicsObject::IsMotionEnabled
Signature:   bool IPhysicsObject::IsMotionEnabled()

Function:    IPhysicsObject::IsMoveable
Signature:   bool IPhysicsObject::IsMoveable()

Function:    IPhysicsObject::IsStatic
Signature:   bool IPhysicsObject::IsStatic()

Function:    IPhysicsObject::IsTrigger
Signature:   bool IPhysicsObject::IsTrigger()

Function:    IPhysicsObject::SetInertia
Signature:   void IPhysicsObject::SetInertia(Vector)

Function:    IPhysicsObject::SetMass
Signature:   void IPhysicsObject::SetMass(float)

Function:    IPhysicsObject::Sleep
Signature:   void IPhysicsObject::Sleep()

Function:    IPhysicsObject::Wake
Signature:   void IPhysicsObject::Wake()

Function:    ISurface::AddCustomFontFile
Signature:   bool ISurface::AddCustomFontFile(string)

Function:    ISurface::CreateFont
Signature:   void ISurface::CreateFont(string, handle)

Function:    ISurface::DrawColoredText
Signature:   void ISurface::DrawColoredText(int, int, int, int, int, int, int, string)

Function:    ISurface::DrawColoredTextRect
Signature:   void ISurface::DrawColoredTextRect(int, int, int, int, int, int, int, int, int, string)

Function:    ISurface::DrawFilledRect
Signature:   void ISurface::DrawFilledRect(int, int, int, int)

Function:    ISurface::DrawFilledRectFade
Signature:   void ISurface::DrawFilledRectFade(int, int, int, int, int, int, bool)

Function:    ISurface::DrawLine
Signature:   void ISurface::DrawLine(int, int, int, int)

Function:    ISurface::DrawOutlinedCircle
Signature:   void ISurface::DrawOutlinedCircle(int, int, int, int)

Function:    ISurface::DrawOutlinedRect
Signature:   void ISurface::DrawOutlinedRect(int, int, int, int, int)

Function:    ISurface::DrawText
Signature:   void ISurface::DrawText(string, int)

Function:    ISurface::DrawTexturedBox
Signature:   void ISurface::DrawTexturedBox(int, int, int, int, int, int, int, int, int)

Function:    ISurface::DrawTexturedRect
Signature:   void ISurface::DrawTexturedRect(int, int, int, int)

Function:    ISurface::DrawTexturedRectRotated
Signature:   void ISurface::DrawTexturedRectRotated(int, int, int, int, float)

Function:    ISurface::DrawTexturedSubRect
Signature:   void ISurface::DrawTexturedSubRect(int, int, int, int, float, float, float, float)

Function:    ISurface::DrawUnicodeChar
Signature:   void ISurface::DrawUnicodeChar(int, int)

Function:    ISurface::GetCharacterWidth
Signature:   int ISurface::GetCharacterWidth(int, int)

Function:    ISurface::GetFont
Signature:   int ISurface::GetFont(string, bool, string)

Function:    ISurface::GetFontTall
Signature:   int ISurface::GetFontTall(int)

Function:    ISurface::GetTextWidth
Signature:   int ISurface::GetTextWidth(int, string)

Function:    ISurface::GetTextureID
Signature:   int ISurface::GetTextureID(string)

Function:    ISurface::GetTextureTall
Signature:   int ISurface::GetTextureTall(int)

Function:    ISurface::GetTextureWide
Signature:   int ISurface::GetTextureWide(int)

Function:    ISurface::PlaySound
Signature:   void ISurface::PlaySound(string)

Function:    ISurface::SetColor
Signature:   void ISurface::SetColor(int, int, int, int)

Function:    ISurface::SetTextColor
Signature:   void ISurface::SetTextColor(int, int, int, int)

Function:    ISurface::SetTextFont
Signature:   void ISurface::SetTextFont(int)

Function:    ISurface::SetTextPos
Signature:   void ISurface::SetTextPos(int, int)

Function:    ISurface::SetTexture
Signature:   void ISurface::SetTexture(int)

Function:    ISurface::SetTextureFile
Signature:   void ISurface::SetTextureFile(int, string, bool)

Function:    ISurface::ValidateTexture
Signature:   int ISurface::ValidateTexture(string, bool, bool, bool)

Function:    IVGui::CreatePanel
Signature:   handle IVGui::CreatePanel(string, handle, string)

Function:    IVGui::GetClientDLLRootPanel
Signature:   handle IVGui::GetClientDLLRootPanel()

Function:    IVGui::GetRootPanel
Signature:   handle IVGui::GetRootPanel()

Function:    ImagePanel::AddTickSignal
Signature:   void ImagePanel::AddTickSignal(int)

Function:    ImagePanel::Destroy
Signature:   void ImagePanel::Destroy()

Function:    ImagePanel::DrawBox
Signature:   void ImagePanel::DrawBox(int, int, int, int, int, int, int, int, bool)

Function:    ImagePanel::DrawBoxFade
Signature:   void ImagePanel::DrawBoxFade(int, int, int, int, int, int, int, int, int, int, bool, bool)

Function:    ImagePanel::GetAlpha
Signature:   int ImagePanel::GetAlpha()

Function:    ImagePanel::GetChildren
Signature:   void ImagePanel::GetChildren(handle)

Function:    ImagePanel::GetName
Signature:   string ImagePanel::GetName()

Function:    ImagePanel::GetParent
Signature:   handle ImagePanel::GetParent()

Function:    ImagePanel::GetTall
Signature:   int ImagePanel::GetTall()

Function:    ImagePanel::GetWide
Signature:   int ImagePanel::GetWide()

Function:    ImagePanel::GetXPos
Signature:   int ImagePanel::GetXPos()

Function:    ImagePanel::GetYPos
Signature:   int ImagePanel::GetYPos()

Function:    ImagePanel::GetZPos
Signature:   int ImagePanel::GetZPos()

Function:    ImagePanel::HasFocus
Signature:   bool ImagePanel::HasFocus()

Function:    ImagePanel::IsCursorOver
Signature:   bool ImagePanel::IsCursorOver()

Function:    ImagePanel::IsEnabled
Signature:   bool ImagePanel::IsEnabled()

Function:    ImagePanel::IsVisible
Signature:   bool ImagePanel::IsVisible()

Function:    ImagePanel::IsWithin
Signature:   bool ImagePanel::IsWithin(int, int)

Function:    ImagePanel::MakePopup
Signature:   void ImagePanel::MakePopup()

Function:    ImagePanel::MakeReadyForUse
Signature:   void ImagePanel::MakeReadyForUse()

Function:    ImagePanel::MoveToFront
Signature:   void ImagePanel::MoveToFront()

Function:    ImagePanel::RequestFocus
Signature:   void ImagePanel::RequestFocus()

Function:    ImagePanel::SetAlpha
Signature:   void ImagePanel::SetAlpha(int)

Function:    ImagePanel::SetBgColor
Signature:   void ImagePanel::SetBgColor(int, int, int, int)

Function:    ImagePanel::SetCursor
Signature:   void ImagePanel::SetCursor(int)

Function:    ImagePanel::SetDrawColor
Signature:   void ImagePanel::SetDrawColor(int, int, int, int)

Function:    ImagePanel::SetEnabled
Signature:   void ImagePanel::SetEnabled(bool)

Function:    ImagePanel::SetFgColor
Signature:   void ImagePanel::SetFgColor(int, int, int, int)

Function:    ImagePanel::SetImage
Signature:   void ImagePanel::SetImage(string, bool)

Function:    ImagePanel::SetKeyBoardInputEnabled
Signature:   void ImagePanel::SetKeyBoardInputEnabled(bool)

Function:    ImagePanel::SetMouseInputEnabled
Signature:   void ImagePanel::SetMouseInputEnabled(bool)

Function:    ImagePanel::SetPaintBackgroundEnabled
Signature:   void ImagePanel::SetPaintBackgroundEnabled(bool)

Function:    ImagePanel::SetPaintBackgroundType
Signature:   void ImagePanel::SetPaintBackgroundType(int)

Function:    ImagePanel::SetPaintBorderEnabled
Signature:   void ImagePanel::SetPaintBorderEnabled(bool)

Function:    ImagePanel::SetPaintEnabled
Signature:   void ImagePanel::SetPaintEnabled(bool)

Function:    ImagePanel::SetParent
Signature:   void ImagePanel::SetParent(handle)

Function:    ImagePanel::SetPos
Signature:   void ImagePanel::SetPos(int, int)

Function:    ImagePanel::SetPostChildPaintEnabled
Signature:   void ImagePanel::SetPostChildPaintEnabled(bool)

Function:    ImagePanel::SetShouldScaleImage
Signature:   void ImagePanel::SetShouldScaleImage(bool)

Function:    ImagePanel::SetSize
Signature:   void ImagePanel::SetSize(int, int)

Function:    ImagePanel::SetTall
Signature:   void ImagePanel::SetTall(int)

Function:    ImagePanel::SetTileImage
Signature:   void ImagePanel::SetTileImage(bool)

Function:    ImagePanel::SetVisible
Signature:   void ImagePanel::SetVisible(bool)

Function:    ImagePanel::SetWide
Signature:   void ImagePanel::SetWide(int)

Function:    ImagePanel::SetZPos
Signature:   void ImagePanel::SetZPos(int)

Function:    ImpulseScale
Signature:   float ImpulseScale(float, float)
Description: Returns an impulse scale required to push an object.

Function:    IntervalPerTick
Signature:   float IntervalPerTick()
Description: Simulation tick interval

Function:    IsClient
Signature:   bool IsClient()
Description: Returns true if the script is being run on the client.

Function:    IsLinux
Signature:   bool IsLinux()
Description: Returns true if the game is being run on a Linux machine.

Function:    IsOSX
Signature:   bool IsOSX()
Description: Returns true if the game is being run on an OSX machine.

Function:    IsPosix
Signature:   bool IsPosix()
Description: Returns true if the game is being run on a Posix machine.

Function:    IsServer
Signature:   bool IsServer()
Description: Returns true if the script is being run on the server.

Function:    IsWindowedMode
Signature:   bool IsWindowedMode()

Function:    IsWindows
Signature:   bool IsWindows()
Description: Returns true if the game is being run on a Windows machine.

Function:    KeyValuesToFile
Signature:   bool KeyValuesToFile(string, handle)
Description: Stores the CScriptKeyValues into the file

Function:    Label::AddColorChange
Signature:   void Label::AddColorChange(int, int, int, int, int)

Function:    Label::AddTickSignal
Signature:   void Label::AddTickSignal(int)

Function:    Label::ClearColorChangeStream
Signature:   void Label::ClearColorChangeStream()

Function:    Label::Destroy
Signature:   void Label::Destroy()

Function:    Label::DrawBox
Signature:   void Label::DrawBox(int, int, int, int, int, int, int, int, bool)

Function:    Label::DrawBoxFade
Signature:   void Label::DrawBoxFade(int, int, int, int, int, int, int, int, int, int, bool, bool)

Function:    Label::GetAlpha
Signature:   int Label::GetAlpha()

Function:    Label::GetChildren
Signature:   void Label::GetChildren(handle)

Function:    Label::GetName
Signature:   string Label::GetName()

Function:    Label::GetParent
Signature:   handle Label::GetParent()

Function:    Label::GetTall
Signature:   int Label::GetTall()

Function:    Label::GetWide
Signature:   int Label::GetWide()

Function:    Label::GetXPos
Signature:   int Label::GetXPos()

Function:    Label::GetYPos
Signature:   int Label::GetYPos()

Function:    Label::GetZPos
Signature:   int Label::GetZPos()

Function:    Label::HasFocus
Signature:   bool Label::HasFocus()

Function:    Label::IsCursorOver
Signature:   bool Label::IsCursorOver()

Function:    Label::IsEnabled
Signature:   bool Label::IsEnabled()

Function:    Label::IsVisible
Signature:   bool Label::IsVisible()

Function:    Label::IsWithin
Signature:   bool Label::IsWithin(int, int)

Function:    Label::MakePopup
Signature:   void Label::MakePopup()

Function:    Label::MakeReadyForUse
Signature:   void Label::MakeReadyForUse()

Function:    Label::MoveToFront
Signature:   void Label::MoveToFront()

Function:    Label::RequestFocus
Signature:   void Label::RequestFocus()

Function:    Label::SetAllCaps
Signature:   void Label::SetAllCaps(bool)

Function:    Label::SetAlpha
Signature:   void Label::SetAlpha(int)

Function:    Label::SetAssociatedControl
Signature:   void Label::SetAssociatedControl(handle)

Function:    Label::SetBgColor
Signature:   void Label::SetBgColor(int, int, int, int)

Function:    Label::SetCenterWrap
Signature:   void Label::SetCenterWrap(bool)

Function:    Label::SetContentAlignment
Signature:   void Label::SetContentAlignment(int)

Function:    Label::SetCursor
Signature:   void Label::SetCursor(int)

Function:    Label::SetEnabled
Signature:   void Label::SetEnabled(bool)

Function:    Label::SetFgColor
Signature:   void Label::SetFgColor(int, int, int, int)

Function:    Label::SetFont
Signature:   void Label::SetFont(int)

Function:    Label::SetKeyBoardInputEnabled
Signature:   void Label::SetKeyBoardInputEnabled(bool)

Function:    Label::SetMouseInputEnabled
Signature:   void Label::SetMouseInputEnabled(bool)

Function:    Label::SetPaintBackgroundEnabled
Signature:   void Label::SetPaintBackgroundEnabled(bool)

Function:    Label::SetPaintBackgroundType
Signature:   void Label::SetPaintBackgroundType(int)

Function:    Label::SetPaintBorderEnabled
Signature:   void Label::SetPaintBorderEnabled(bool)

Function:    Label::SetPaintEnabled
Signature:   void Label::SetPaintEnabled(bool)

Function:    Label::SetParent
Signature:   void Label::SetParent(handle)

Function:    Label::SetPos
Signature:   void Label::SetPos(int, int)

Function:    Label::SetPostChildPaintEnabled
Signature:   void Label::SetPostChildPaintEnabled(bool)

Function:    Label::SetSize
Signature:   void Label::SetSize(int, int)

Function:    Label::SetTall
Signature:   void Label::SetTall(int)

Function:    Label::SetText
Signature:   void Label::SetText(string)

Function:    Label::SetTextInset
Signature:   void Label::SetTextInset(int, int)

Function:    Label::SetVisible
Signature:   void Label::SetVisible(bool)

Function:    Label::SetWide
Signature:   void Label::SetWide(int)

Function:    Label::SetWrap
Signature:   void Label::SetWrap(bool)

Function:    Label::SetZPos
Signature:   void Label::SetZPos(int)

Function:    Label::SizeToContents
Signature:   void Label::SizeToContents()

Function:    Lerp
Signature:   float Lerp(float, float, float)

Function:    ListenToGameEvent
Signature:   int ListenToGameEvent(string, handle, string)
Description: Register as a listener for a game event from script.

Function:    MainViewAngles
Signature:   Vector MainViewAngles()

Function:    MainViewForward
Signature:   Vector MainViewForward()

Function:    MainViewOrigin
Signature:   Vector MainViewOrigin()

Function:    MainViewRight
Signature:   Vector MainViewRight()

Function:    MainViewUp
Signature:   Vector MainViewUp()

Function:    Matcher_Match
Signature:   bool Matcher_Match(string, string)
Description: Compares a string to a query using Mapbase's matcher system, supporting wildcards, RS matchers, etc.

Function:    Matcher_NamesMatch
Signature:   bool Matcher_NamesMatch(string, string)
Description: Compares a string to a query using Mapbase's matcher system using wildcards only.

Function:    MatricesAreEqual
Signature:   void MatricesAreEqual(handle, handle)
Description: Checks if two matrices are equal.

Function:    MatrixAngles
Signature:   void MatrixAngles(handle, Vector, Vector)
Description: Gets the angles and position of a matrix.

Function:    MatrixCopy
Signature:   void MatrixCopy(handle, handle)
Description: Copies a matrix to another matrix.

Function:    MatrixGetColumn
Signature:   Vector MatrixGetColumn(handle, int)
Description: Gets the column of a matrix.

Function:    MatrixGetTranslation
Signature:   Vector MatrixGetTranslation(handle)
Description: Gets a matrix's translation.

Function:    MatrixInvert
Signature:   void MatrixInvert(handle, handle)
Description: Inverts a matrix and copies the result to another matrix.

Function:    MatrixQuaternion
Signature:   void MatrixQuaternion(handle, handle)
Description: Converts a matrix to a quaternion.

Function:    MatrixScaleBy
Signature:   void MatrixScaleBy(float, handle)
Description: Scales a matrix.

Function:    MatrixScaleByZero
Signature:   void MatrixScaleByZero(handle)
Description: Scales a matrix by zero.

Function:    MatrixSetColumn
Signature:   void MatrixSetColumn(Vector, int, handle)
Description: Sets the column of a matrix.

Function:    MatrixSetTranslation
Signature:   void MatrixSetTranslation(Vector, handle)
Description: Sets a matrix's translation.

Function:    Msg
Signature:   void Msg(string)

Function:    NPrint
Signature:   void NPrint(int, string)
Description: Notification print

Function:    NXPrint
Signature:   void NXPrint(int, int, int, int, bool, float, string)
Description: Notification print, customised

Function:    Panel::AddTickSignal
Signature:   void Panel::AddTickSignal(int)

Function:    Panel::Destroy
Signature:   void Panel::Destroy()

Function:    Panel::DrawBox
Signature:   void Panel::DrawBox(int, int, int, int, int, int, int, int, bool)

Function:    Panel::DrawBoxFade
Signature:   void Panel::DrawBoxFade(int, int, int, int, int, int, int, int, int, int, bool, bool)

Function:    Panel::GetAlpha
Signature:   int Panel::GetAlpha()

Function:    Panel::GetChildren
Signature:   void Panel::GetChildren(handle)

Function:    Panel::GetName
Signature:   string Panel::GetName()

Function:    Panel::GetParent
Signature:   handle Panel::GetParent()

Function:    Panel::GetTall
Signature:   int Panel::GetTall()

Function:    Panel::GetWide
Signature:   int Panel::GetWide()

Function:    Panel::GetXPos
Signature:   int Panel::GetXPos()

Function:    Panel::GetYPos
Signature:   int Panel::GetYPos()

Function:    Panel::GetZPos
Signature:   int Panel::GetZPos()

Function:    Panel::HasFocus
Signature:   bool Panel::HasFocus()

Function:    Panel::IsCursorOver
Signature:   bool Panel::IsCursorOver()

Function:    Panel::IsEnabled
Signature:   bool Panel::IsEnabled()

Function:    Panel::IsVisible
Signature:   bool Panel::IsVisible()

Function:    Panel::IsWithin
Signature:   bool Panel::IsWithin(int, int)

Function:    Panel::MakePopup
Signature:   void Panel::MakePopup()

Function:    Panel::MakeReadyForUse
Signature:   void Panel::MakeReadyForUse()

Function:    Panel::MoveToFront
Signature:   void Panel::MoveToFront()

Function:    Panel::RequestFocus
Signature:   void Panel::RequestFocus()

Function:    Panel::SetAlpha
Signature:   void Panel::SetAlpha(int)

Function:    Panel::SetBgColor
Signature:   void Panel::SetBgColor(int, int, int, int)

Function:    Panel::SetCallback
Signature:   void Panel::SetCallback(string, handle)

Function:    Panel::SetCursor
Signature:   void Panel::SetCursor(int)

Function:    Panel::SetEnabled
Signature:   void Panel::SetEnabled(bool)

Function:    Panel::SetFgColor
Signature:   void Panel::SetFgColor(int, int, int, int)

Function:    Panel::SetKeyBoardInputEnabled
Signature:   void Panel::SetKeyBoardInputEnabled(bool)

Function:    Panel::SetMouseInputEnabled
Signature:   void Panel::SetMouseInputEnabled(bool)

Function:    Panel::SetPaintBackgroundEnabled
Signature:   void Panel::SetPaintBackgroundEnabled(bool)

Function:    Panel::SetPaintBackgroundType
Signature:   void Panel::SetPaintBackgroundType(int)

Function:    Panel::SetPaintBorderEnabled
Signature:   void Panel::SetPaintBorderEnabled(bool)

Function:    Panel::SetPaintEnabled
Signature:   void Panel::SetPaintEnabled(bool)

Function:    Panel::SetParent
Signature:   void Panel::SetParent(handle)

Function:    Panel::SetPos
Signature:   void Panel::SetPos(int, int)

Function:    Panel::SetPostChildPaintEnabled
Signature:   void Panel::SetPostChildPaintEnabled(bool)

Function:    Panel::SetSize
Signature:   void Panel::SetSize(int, int)

Function:    Panel::SetTall
Signature:   void Panel::SetTall(int)

Function:    Panel::SetVisible
Signature:   void Panel::SetVisible(bool)

Function:    Panel::SetWide
Signature:   void Panel::SetWide(int)

Function:    Panel::SetZPos
Signature:   void Panel::SetZPos(int)

Function:    PrecacheMaterial
Signature:   void PrecacheMaterial(string)
Description: Precaches a material for later usage.

Function:    PrecacheModel
Signature:   int PrecacheModel(string)
Description: Precaches a model for later usage.

Function:    PrecacheOther
Signature:   void PrecacheOther(string)
Description: Precaches an entity class for later usage.

Function:    PrecacheParticleSystem
Signature:   void PrecacheParticleSystem(string)
Description: Precaches a particle system for later usage.

Function:    PrevMainViewAngles
Signature:   Vector PrevMainViewAngles()

Function:    PrevMainViewOrigin
Signature:   Vector PrevMainViewOrigin()

Function:    Quaternion::Init
Signature:   void Quaternion::Init(float, float, float, float)
Description: Creates a quaternion with the given values.

Function:    QuaternionAdd
Signature:   void QuaternionAdd(handle, handle, handle)
Description: Adds two quaternions together into another quaternion.

Function:    QuaternionAngles
Signature:   Vector QuaternionAngles(handle)
Description: Converts a quaternion to angles.

Function:    QuaternionMatrix
Signature:   void QuaternionMatrix(handle, handle)
Description: Converts a quaternion to a matrix.

Function:    RandomFloat
Signature:   float RandomFloat(float, float)
Description: Generate a random floating point number within a range, inclusive.

Function:    RandomInt
Signature:   int RandomInt(int, int)
Description: Generate a random integer within a range, inclusive.

Function:    RegisterActivityConstants
Signature:   void RegisterActivityConstants()
Description: Registers all activity IDs as usable constants.

Function:    RemapVal
Signature:   float RemapVal(float, float, float, float, float)

Function:    RemapValClamped
Signature:   float RemapValClamped(float, float, float, float, float)

Function:    RestoreTable
Signature:   void RestoreTable(string, handle)
Description: Retrieves a table from storage. Write into input table.

Function:    RichText::AddTickSignal
Signature:   void RichText::AddTickSignal(int)

Function:    RichText::Destroy
Signature:   void RichText::Destroy()

Function:    RichText::DrawBox
Signature:   void RichText::DrawBox(int, int, int, int, int, int, int, int, bool)

Function:    RichText::DrawBoxFade
Signature:   void RichText::DrawBoxFade(int, int, int, int, int, int, int, int, int, int, bool, bool)

Function:    RichText::GetAlpha
Signature:   int RichText::GetAlpha()

Function:    RichText::GetChildren
Signature:   void RichText::GetChildren(handle)

Function:    RichText::GetName
Signature:   string RichText::GetName()

Function:    RichText::GetNumLines
Signature:   int RichText::GetNumLines()

Function:    RichText::GetParent
Signature:   handle RichText::GetParent()

Function:    RichText::GetTall
Signature:   int RichText::GetTall()

Function:    RichText::GetWide
Signature:   int RichText::GetWide()

Function:    RichText::GetXPos
Signature:   int RichText::GetXPos()

Function:    RichText::GetYPos
Signature:   int RichText::GetYPos()

Function:    RichText::GetZPos
Signature:   int RichText::GetZPos()

Function:    RichText::GotoTextEnd
Signature:   void RichText::GotoTextEnd()

Function:    RichText::GotoTextStart
Signature:   void RichText::GotoTextStart()

Function:    RichText::HasFocus
Signature:   bool RichText::HasFocus()

Function:    RichText::InsertColorChange
Signature:   void RichText::InsertColorChange(int, int, int, int)

Function:    RichText::InsertString
Signature:   void RichText::InsertString(string)

Function:    RichText::IsCursorOver
Signature:   bool RichText::IsCursorOver()

Function:    RichText::IsEnabled
Signature:   bool RichText::IsEnabled()

Function:    RichText::IsVisible
Signature:   bool RichText::IsVisible()

Function:    RichText::IsWithin
Signature:   bool RichText::IsWithin(int, int)

Function:    RichText::MakePopup
Signature:   void RichText::MakePopup()

Function:    RichText::MakeReadyForUse
Signature:   void RichText::MakeReadyForUse()

Function:    RichText::MoveToFront
Signature:   void RichText::MoveToFront()

Function:    RichText::RequestFocus
Signature:   void RichText::RequestFocus()

Function:    RichText::SetAlpha
Signature:   void RichText::SetAlpha(int)

Function:    RichText::SetBgColor
Signature:   void RichText::SetBgColor(int, int, int, int)

Function:    RichText::SetCursor
Signature:   void RichText::SetCursor(int)

Function:    RichText::SetDrawTextOnly
Signature:   void RichText::SetDrawTextOnly()

Function:    RichText::SetEnabled
Signature:   void RichText::SetEnabled(bool)

Function:    RichText::SetFgColor
Signature:   void RichText::SetFgColor(int, int, int, int)

Function:    RichText::SetFont
Signature:   void RichText::SetFont(int)

Function:    RichText::SetKeyBoardInputEnabled
Signature:   void RichText::SetKeyBoardInputEnabled(bool)

Function:    RichText::SetMaximumCharCount
Signature:   void RichText::SetMaximumCharCount(int)

Function:    RichText::SetMouseInputEnabled
Signature:   void RichText::SetMouseInputEnabled(bool)

Function:    RichText::SetPaintBackgroundEnabled
Signature:   void RichText::SetPaintBackgroundEnabled(bool)

Function:    RichText::SetPaintBackgroundType
Signature:   void RichText::SetPaintBackgroundType(int)

Function:    RichText::SetPaintBorderEnabled
Signature:   void RichText::SetPaintBorderEnabled(bool)

Function:    RichText::SetPaintEnabled
Signature:   void RichText::SetPaintEnabled(bool)

Function:    RichText::SetPanelInteractive
Signature:   void RichText::SetPanelInteractive(bool)

Function:    RichText::SetParent
Signature:   void RichText::SetParent(handle)

Function:    RichText::SetPos
Signature:   void RichText::SetPos(int, int)

Function:    RichText::SetPostChildPaintEnabled
Signature:   void RichText::SetPostChildPaintEnabled(bool)

Function:    RichText::SetSize
Signature:   void RichText::SetSize(int, int)

Function:    RichText::SetTall
Signature:   void RichText::SetTall(int)

Function:    RichText::SetText
Signature:   void RichText::SetText(string)

Function:    RichText::SetUnusedScrollbarInvisible
Signature:   void RichText::SetUnusedScrollbarInvisible(bool)

Function:    RichText::SetVisible
Signature:   void RichText::SetVisible(bool)

Function:    RichText::SetWide
Signature:   void RichText::SetWide(int)

Function:    RichText::SetZPos
Signature:   void RichText::SetZPos(int)

Function:    SaveTable
Signature:   void SaveTable(string, handle)
Description: Store a table with primitive values that will persist across level transitions and save loads.

Function:    ScreenHeight
Signature:   int ScreenHeight()
Description: Height of the screen in pixels

Function:    ScreenToRay
Signature:   Vector ScreenToRay(int, int)
Description: Get a ray from screen pixel position to world space.

Function:    ScreenToWorld
Signature:   Vector ScreenToWorld(int, int)
Description: Get screen pixel position [0,1] in world space.

Function:    ScreenTransform
Signature:   bool ScreenTransform(Vector, handle)
Description: Get world position normalised in screen space. Return true if on screen.

Function:    ScreenWidth
Signature:   int ScreenWidth()
Description: Width of the screen in pixels

Function:    SetClipboardText
Signature:   void SetClipboardText(string)

Function:    SetHudElementVisible
Signature:   void SetHudElementVisible(string, bool)

Function:    SetIdentityMatrix
Signature:   void SetIdentityMatrix(handle)
Description: Turns a matrix into an identity matrix.

Function:    SetPhysVelocity
Signature:   void SetPhysVelocity(handle, Vector, Vector)
Description: Sets physics velocity for the given VPhysics object

Function:    SetScaleMatrix
Signature:   void SetScaleMatrix(float, float, float, handle)
Description: Builds a scale matrix.

Function:    SimpleSpline
Signature:   float SimpleSpline(float)

Function:    SimpleSplineRemapVal
Signature:   float SimpleSplineRemapVal(float, float, float, float, float)
Description: remaps a value in [startInterval, startInterval+rangeInterval] from linear to spline using SimpleSpline

Function:    SimpleSplineRemapValClamped
Signature:   float SimpleSplineRemapValClamped(float, float, float, float, float)
Description: remaps a value in [startInterval, startInterval+rangeInterval] from linear to spline using SimpleSpline

Function:    SmoothCurve
Signature:   float SmoothCurve(float)
Description: SmoothCurve maps a 0-1 value into another 0-1 value based on a cosine wave

Function:    SmoothCurve_Tweak
Signature:   float SmoothCurve_Tweak(float, float, float)
Description: SmoothCurve peaks at flPeakPos, flPeakSharpness controls the sharpness of the peak

Function:    StopListeningToAllGameEvents
Signature:   void StopListeningToAllGameEvents(string)
Description: Stop listening to all game events within a specific context.

Function:    StopListeningToGameEvent
Signature:   bool StopListeningToGameEvent(int)
Description: Stop the specified event listener.

Function:    StringToFile
Signature:   bool StringToFile(string, string)
Description: Stores the string into the file

Function:    TextEntry::AddTickSignal
Signature:   void TextEntry::AddTickSignal(int)

Function:    TextEntry::Destroy
Signature:   void TextEntry::Destroy()

Function:    TextEntry::DrawBox
Signature:   void TextEntry::DrawBox(int, int, int, int, int, int, int, int, bool)

Function:    TextEntry::DrawBoxFade
Signature:   void TextEntry::DrawBoxFade(int, int, int, int, int, int, int, int, int, int, bool, bool)

Function:    TextEntry::GetAlpha
Signature:   int TextEntry::GetAlpha()

Function:    TextEntry::GetChildren
Signature:   void TextEntry::GetChildren(handle)

Function:    TextEntry::GetName
Signature:   string TextEntry::GetName()

Function:    TextEntry::GetParent
Signature:   handle TextEntry::GetParent()

Function:    TextEntry::GetTall
Signature:   int TextEntry::GetTall()

Function:    TextEntry::GetText
Signature:   string TextEntry::GetText()

Function:    TextEntry::GetWide
Signature:   int TextEntry::GetWide()

Function:    TextEntry::GetXPos
Signature:   int TextEntry::GetXPos()

Function:    TextEntry::GetYPos
Signature:   int TextEntry::GetYPos()

Function:    TextEntry::GetZPos
Signature:   int TextEntry::GetZPos()

Function:    TextEntry::GotoTextEnd
Signature:   void TextEntry::GotoTextEnd()

Function:    TextEntry::GotoTextStart
Signature:   void TextEntry::GotoTextStart()

Function:    TextEntry::HasFocus
Signature:   bool TextEntry::HasFocus()

Function:    TextEntry::InsertString
Signature:   void TextEntry::InsertString(string)

Function:    TextEntry::IsCursorOver
Signature:   bool TextEntry::IsCursorOver()

Function:    TextEntry::IsEnabled
Signature:   bool TextEntry::IsEnabled()

Function:    TextEntry::IsVisible
Signature:   bool TextEntry::IsVisible()

Function:    TextEntry::IsWithin
Signature:   bool TextEntry::IsWithin(int, int)

Function:    TextEntry::MakePopup
Signature:   void TextEntry::MakePopup()

Function:    TextEntry::MakeReadyForUse
Signature:   void TextEntry::MakeReadyForUse()

Function:    TextEntry::MoveToFront
Signature:   void TextEntry::MoveToFront()

Function:    TextEntry::RequestFocus
Signature:   void TextEntry::RequestFocus()

Function:    TextEntry::SelectNone
Signature:   void TextEntry::SelectNone()

Function:    TextEntry::SetAllowNumericInputOnly
Signature:   void TextEntry::SetAllowNumericInputOnly(bool)

Function:    TextEntry::SetAlpha
Signature:   void TextEntry::SetAlpha(int)

Function:    TextEntry::SetBgColor
Signature:   void TextEntry::SetBgColor(int, int, int, int)

Function:    TextEntry::SetCallback
Signature:   void TextEntry::SetCallback(string, handle)

Function:    TextEntry::SetCatchEnterKey
Signature:   void TextEntry::SetCatchEnterKey(bool)

Function:    TextEntry::SetCursor
Signature:   void TextEntry::SetCursor(int)

Function:    TextEntry::SetEditable
Signature:   void TextEntry::SetEditable(bool)

Function:    TextEntry::SetEnabled
Signature:   void TextEntry::SetEnabled(bool)

Function:    TextEntry::SetFgColor
Signature:   void TextEntry::SetFgColor(int, int, int, int)

Function:    TextEntry::SetFont
Signature:   void TextEntry::SetFont(int)

Function:    TextEntry::SetKeyBoardInputEnabled
Signature:   void TextEntry::SetKeyBoardInputEnabled(bool)

Function:    TextEntry::SetMaximumCharCount
Signature:   void TextEntry::SetMaximumCharCount(int)

Function:    TextEntry::SetMouseInputEnabled
Signature:   void TextEntry::SetMouseInputEnabled(bool)

Function:    TextEntry::SetMultiline
Signature:   void TextEntry::SetMultiline(bool)

Function:    TextEntry::SetPaintBackgroundEnabled
Signature:   void TextEntry::SetPaintBackgroundEnabled(bool)

Function:    TextEntry::SetPaintBackgroundType
Signature:   void TextEntry::SetPaintBackgroundType(int)

Function:    TextEntry::SetPaintBorderEnabled
Signature:   void TextEntry::SetPaintBorderEnabled(bool)

Function:    TextEntry::SetPaintEnabled
Signature:   void TextEntry::SetPaintEnabled(bool)

Function:    TextEntry::SetParent
Signature:   void TextEntry::SetParent(handle)

Function:    TextEntry::SetPos
Signature:   void TextEntry::SetPos(int, int)

Function:    TextEntry::SetPostChildPaintEnabled
Signature:   void TextEntry::SetPostChildPaintEnabled(bool)

Function:    TextEntry::SetSize
Signature:   void TextEntry::SetSize(int, int)

Function:    TextEntry::SetTall
Signature:   void TextEntry::SetTall(int)

Function:    TextEntry::SetText
Signature:   void TextEntry::SetText(string)

Function:    TextEntry::SetVerticalScrollbar
Signature:   void TextEntry::SetVerticalScrollbar(bool)

Function:    TextEntry::SetVisible
Signature:   void TextEntry::SetVisible(bool)

Function:    TextEntry::SetWide
Signature:   void TextEntry::SetWide(int)

Function:    TextEntry::SetZPos
Signature:   void TextEntry::SetZPos(int)

Function:    Time
Signature:   float Time()
Description: Get the current server time

Function:    TraceHullComplex
Signature:   handle TraceHullComplex(Vector, Vector, Vector, Vector, handle, int, int)
Description: Takes 2 points, min/max hull bounds, an ent to ignore, a trace mask, and a collision group to trace to a point using a hull. Returns a handle which can access all trace info.

Function:    TraceLineComplex
Signature:   handle TraceLineComplex(Vector, Vector, handle, int, int)
Description: Complex version of TraceLine which takes 2 points, an ent to ignore, a trace mask, and a collision group. Returns a handle which can access all trace info.

Function:    UniqueString
Signature:   function UniqueString(string)
Description: Generate a string guaranteed to be unique across the life of the script VM, with an optional root string.

Function:    Vector::Cross
Signature:   float Vector::Cross(vector)
Description: Return the vector product of two vectors.

Function:    Vector::Dot
Signature:   float Vector::Dot(vector)
Description: Return the dot/scalar product of two vectors.

Function:    Vector::Length
Signature:   float Vector::Length()
Description: Return the vector's length.

Function:    Vector::Length2D
Signature:   float Vector::Length2D()
Description: Return the vector's 2D length.

Function:    Vector::Length2DSqr
Signature:   float Vector::Length2DSqr()
Description: Return the vector's squared 2D length.

Function:    Vector::LengthSqr
Signature:   float Vector::LengthSqr()
Description: Return the vector's squared length.

Function:    Vector::Norm
Signature:   void Vector::Norm()
Description: Normalize the vector in place.

Function:    Vector::Normalized
Signature:   float Vector::Normalized()
Description: Return a normalized version of the vector.

Function:    Vector::Scale
Signature:   vector Vector::Scale(float)
Description: Scale the vector's magnitude and return the result.

Function:    Vector::ToKVString
Signature:   string Vector::ToKVString()
Description: Return a vector as a string in KeyValue form, without separation commas.

Function:    VectorAngles
Signature:   Vector VectorAngles(Vector)
Description: Turns a direction vector into an angle.

Function:    VectorIRotate
Signature:   Vector VectorIRotate(Vector, handle)
Description: Rotates a vector with the inverse of a matrix.

Function:    VectorITransform
Signature:   Vector VectorITransform(Vector, handle)
Description: Transforms a vector with the inverse of a matrix.

Function:    VectorRotate
Signature:   Vector VectorRotate(Vector, handle)
Description: Rotates a vector with a matrix.

Function:    VectorTransform
Signature:   Vector VectorTransform(Vector, handle)
Description: Transforms a vector with a matrix.

Function:    XRES
Signature:   int XRES(float)

Function:    YRES
Signature:   int YRES(float)

Function:    clamp
Signature:   float clamp(float, float, float)

Function:    csurface_t::Name
Signature:   string csurface_t::Name()

Function:    csurface_t::SurfaceProps
Signature:   handle csurface_t::SurfaceProps()
Description: The surface's properties.

Function:    matrix3x4_t::Init
Signature:   void matrix3x4_t::Init(Vector, Vector, Vector, Vector)
Description: Creates a matrix where the X axis = forward, the Y axis = left, and the Z axis = up.

Function:    max
Signature:   float max(float, float)

Function:    min
Signature:   float min(float, float)

Function:    printc
Signature:   void printc(int, int, int, string)
Description: Version of print() which takes a color before the message.

Function:    printcl
Signature:   void printcl(int, int, int, string)
Description: Version of printl() which takes a color before the message.

Function:    scriptanimevent_t::GetCycle
Signature:   float scriptanimevent_t::GetCycle()

Function:    scriptanimevent_t::GetEvent
Signature:   int scriptanimevent_t::GetEvent()

Function:    scriptanimevent_t::GetEventTime
Signature:   float scriptanimevent_t::GetEventTime()

Function:    scriptanimevent_t::GetOptions
Signature:   string scriptanimevent_t::GetOptions()

Function:    scriptanimevent_t::GetSource
Signature:   handle scriptanimevent_t::GetSource()
Description: Gets the event's source entity.

Function:    scriptanimevent_t::GetType
Signature:   int scriptanimevent_t::GetType()
Description: Gets the event's type flags. See the 'AE_TYPE_' set of constants for valid flags.

Function:    scriptanimevent_t::SetCycle
Signature:   void scriptanimevent_t::SetCycle(float)

Function:    scriptanimevent_t::SetEvent
Signature:   void scriptanimevent_t::SetEvent(int)

Function:    scriptanimevent_t::SetEventTime
Signature:   void scriptanimevent_t::SetEventTime(float)

Function:    scriptanimevent_t::SetOptions
Signature:   void scriptanimevent_t::SetOptions(string)

Function:    scriptanimevent_t::SetSource
Signature:   void scriptanimevent_t::SetSource(handle)
Description: Sets the event's source entity.

Function:    scriptanimevent_t::SetType
Signature:   void scriptanimevent_t::SetType(int)
Description: Sets the event's type flags. See the 'AE_TYPE_' set of constants for valid flags.

Function:    surfacedata_t::GetFriction
Signature:   float surfacedata_t::GetFriction()

Function:    surfacedata_t::GetJumpFactor
Signature:   float surfacedata_t::GetJumpFactor()

Function:    surfacedata_t::GetMaterialChar
Signature:   char surfacedata_t::GetMaterialChar()

Function:    surfacedata_t::GetSoundBreak
Signature:   string surfacedata_t::GetSoundBreak()

Function:    surfacedata_t::GetSoundBulletImpact
Signature:   string surfacedata_t::GetSoundBulletImpact()

Function:    surfacedata_t::GetSoundImpactHard
Signature:   string surfacedata_t::GetSoundImpactHard()

Function:    surfacedata_t::GetSoundImpactSoft
Signature:   string surfacedata_t::GetSoundImpactSoft()

Function:    surfacedata_t::GetSoundRolling
Signature:   string surfacedata_t::GetSoundRolling()

Function:    surfacedata_t::GetSoundScrapeRough
Signature:   string surfacedata_t::GetSoundScrapeRough()

Function:    surfacedata_t::GetSoundScrapeSmooth
Signature:   string surfacedata_t::GetSoundScrapeSmooth()

Function:    surfacedata_t::GetSoundStepLeft
Signature:   string surfacedata_t::GetSoundStepLeft()

Function:    surfacedata_t::GetSoundStepRight
Signature:   string surfacedata_t::GetSoundStepRight()

Function:    surfacedata_t::GetSoundStrain
Signature:   string surfacedata_t::GetSoundStrain()

Function:    surfacedata_t::GetThickness
Signature:   float surfacedata_t::GetThickness()

Member:      Color.a
Signature:   char Color.a
Description: Member variable for alpha. (transparency)

Member:      Color.b
Signature:   char Color.b
Description: Member variable for blue.

Member:      Color.g
Signature:   char Color.g
Description: Member variable for green.

Member:      Color.r
Signature:   char Color.r
Description: Member variable for red.

Member:      Quaternion.w
Signature:   float Quaternion.w
Description: The quaternion's scalar component.

Member:      Quaternion.x
Signature:   float Quaternion.x
Description: The quaternion's i axis component.

Member:      Quaternion.y
Signature:   float Quaternion.y
Description: The quaternion's j axis component.

Member:      Quaternion.z
Signature:   float Quaternion.z
Description: The quaternion's k axis component.

Member:      Vector.x
Signature:   float Vector.x
Description: The vector's X coordinate on the cartesian X axis.

Member:      Vector.y
Signature:   float Vector.y
Description: The vector's Y coordinate on the cartesian Y axis.

Member:      Vector.z
Signature:   float Vector.z
Description: The vector's Z coordinate on the cartesian Z axis.

Hook:        CEntities -> OnEntityCreated
Signature:   void CEntities -> OnEntityCreated(handle [entity])
Description: Called when an entity is created. Requires EnableEntityListening() to be fired beforehand.

Hook:        CEntities -> OnEntityDeleted
Signature:   void CEntities -> OnEntityDeleted(handle [entity])
Description: Called when an entity is deleted. Requires EnableEntityListening() to be fired beforehand.

Hook:        C_BaseAnimating -> FireEvent
Signature:   bool C_BaseAnimating -> FireEvent(Vector [origin], Vector [angles], int [event], string [options])
Description: Called when handling animation events. Return false to cancel base handling.

Hook:        C_BaseAnimating -> OnClientRagdoll
Signature:   void C_BaseAnimating -> OnClientRagdoll(handle [ragdoll])
Description: Called when this entity turns into a client-side ragdoll.

Hook:        C_BaseEntity -> ModifyEmitSoundParams
Signature:   void C_BaseEntity -> ModifyEmitSoundParams(handle [params])
Description: Called every time a sound is emitted on this entity, allowing for its parameters to be modified.

Hook:        C_BaseEntity -> UpdateOnRemove
Signature:   void C_BaseEntity -> UpdateOnRemove()
Description: Called when the entity is being removed.

Hook:        C_PointCommentaryNode -> PreStartCommentaryClient
Signature:   bool C_PointCommentaryNode -> PreStartCommentaryClient()
Description: Called just before commentary begins on the client. Use this to modify variables or commentary behavior before it begins. Returning false will prevent the commentary from starting.

Hook:        C_WeaponCustomScripted -> AbortReload
Signature:   void C_WeaponCustomScripted -> AbortReload()

Hook:        C_WeaponCustomScripted -> ActivityList
Signature:   handle C_WeaponCustomScripted -> ActivityList()

Hook:        C_WeaponCustomScripted -> ActivityListCount
Signature:   int C_WeaponCustomScripted -> ActivityListCount()

Hook:        C_WeaponCustomScripted -> AddViewKick
Signature:   void C_WeaponCustomScripted -> AddViewKick()

Hook:        C_WeaponCustomScripted -> CanDeploy
Signature:   bool C_WeaponCustomScripted -> CanDeploy()
Description: Should return true if weapon can be deployed

Hook:        C_WeaponCustomScripted -> CanHolster
Signature:   bool C_WeaponCustomScripted -> CanHolster()
Description: Should return true if weapon can be holstered

Hook:        C_WeaponCustomScripted -> CheckReload
Signature:   void C_WeaponCustomScripted -> CheckReload()

Hook:        C_WeaponCustomScripted -> Deploy
Signature:   bool C_WeaponCustomScripted -> Deploy()
Description: Called when weapon is being deployed

Hook:        C_WeaponCustomScripted -> FinishReload
Signature:   void C_WeaponCustomScripted -> FinishReload()

Hook:        C_WeaponCustomScripted -> GetBulletSpread
Signature:   Vector C_WeaponCustomScripted -> GetBulletSpread()

Hook:        C_WeaponCustomScripted -> GetBulletSpreadForProficiency
Signature:   Vector C_WeaponCustomScripted -> GetBulletSpreadForProficiency(int [proficiency])
Description: Returns the bullet spread of a specific proficiency level. If this isn't defined, it will fall back to GetBulletSpread.

Hook:        C_WeaponCustomScripted -> GetDefaultAnimSpeed
Signature:   float C_WeaponCustomScripted -> GetDefaultAnimSpeed()

Hook:        C_WeaponCustomScripted -> GetDrawActivity
Signature:   variant C_WeaponCustomScripted -> GetDrawActivity()

Hook:        C_WeaponCustomScripted -> GetFireRate
Signature:   float C_WeaponCustomScripted -> GetFireRate()

Hook:        C_WeaponCustomScripted -> GetMaxBurst
Signature:   int C_WeaponCustomScripted -> GetMaxBurst()

Hook:        C_WeaponCustomScripted -> GetMaxRestTime
Signature:   float C_WeaponCustomScripted -> GetMaxRestTime()

Hook:        C_WeaponCustomScripted -> GetMinBurst
Signature:   int C_WeaponCustomScripted -> GetMinBurst()

Hook:        C_WeaponCustomScripted -> GetMinRestTime
Signature:   float C_WeaponCustomScripted -> GetMinRestTime()

Hook:        C_WeaponCustomScripted -> GetPrimaryAttackActivity
Signature:   variant C_WeaponCustomScripted -> GetPrimaryAttackActivity()

Hook:        C_WeaponCustomScripted -> GetSecondaryAttackActivity
Signature:   variant C_WeaponCustomScripted -> GetSecondaryAttackActivity()

Hook:        C_WeaponCustomScripted -> HandleFireOnEmpty
Signature:   void C_WeaponCustomScripted -> HandleFireOnEmpty()
Description: Called when they have the attack button down but they are out of ammo. The default implementation either reloads, switches weapons, or plays an empty sound.

Hook:        C_WeaponCustomScripted -> HasAnyAmmo
Signature:   bool C_WeaponCustomScripted -> HasAnyAmmo()
Description: Should return true if weapon has ammo

Hook:        C_WeaponCustomScripted -> HasPrimaryAmmo
Signature:   bool C_WeaponCustomScripted -> HasPrimaryAmmo()
Description: Should return true if weapon has primary ammo

Hook:        C_WeaponCustomScripted -> HasSecondaryAmmo
Signature:   bool C_WeaponCustomScripted -> HasSecondaryAmmo()
Description: Should return true if weapon has secondary ammo

Hook:        C_WeaponCustomScripted -> Holster
Signature:   bool C_WeaponCustomScripted -> Holster(handle [switchingto])
Description: Called when weapon is being holstered

Hook:        C_WeaponCustomScripted -> ItemBusyFrame
Signature:   void C_WeaponCustomScripted -> ItemBusyFrame()
Description: Called each frame by the player PostThink, if the player's not ready to attack yet

Hook:        C_WeaponCustomScripted -> ItemHolsterFrame
Signature:   void C_WeaponCustomScripted -> ItemHolsterFrame()
Description: Called each frame by the player PreThink, if the weapon is holstered

Hook:        C_WeaponCustomScripted -> ItemPostFrame
Signature:   void C_WeaponCustomScripted -> ItemPostFrame()
Description: Called each frame by the player PostThink

Hook:        C_WeaponCustomScripted -> ItemPreFrame
Signature:   void C_WeaponCustomScripted -> ItemPreFrame()
Description: Called each frame by the player PreThink

Hook:        C_WeaponCustomScripted -> PrimaryAttack
Signature:   void C_WeaponCustomScripted -> PrimaryAttack()

Hook:        C_WeaponCustomScripted -> Reload
Signature:   bool C_WeaponCustomScripted -> Reload()

Hook:        C_WeaponCustomScripted -> Reload_NPC
Signature:   void C_WeaponCustomScripted -> Reload_NPC()

Hook:        C_WeaponCustomScripted -> SecondaryAttack
Signature:   void C_WeaponCustomScripted -> SecondaryAttack()

Hook:        C_WeaponCustomScripted -> WeaponIdle
Signature:   void C_WeaponCustomScripted -> WeaponIdle()
Description: Called when no buttons pressed

Hook:        OnRestore
Signature:   void OnRestore()
Description: Called when the game is restored.

Hook:        OnSave
Signature:   void OnSave()
Description: Called when the game is saved.